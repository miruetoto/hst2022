{
  
    
        "post0": {
            "title": "해야할일들",
            "content": "&#49892;&#54744;&#50672;&#44396; . (1) HST에서 t와 노드수에 따른 계산시간측정 . (2) 예제2에서 다양한 noise 셋팅하에 유클리드, HST 2가지 방법으로 clustering performance 측정 . 당연히 유클리드와 HST만 유의미한 결과가 나올것 같아서 의미는 없을것 같습니다. | . (3) 예제2에서 다양한 noise 셋팅하에 diffusion distance와 HST의 embeddgin performance 시각화 + 반지름 제곱합을 histogram으로 제시 . diffusion distance는 노이즈에 영향을 받지 않고 HST는 f를 고려하므로 노이즈에 영향을 받을 겁니다. | HST가 노이즈레벨에 따라서 어떠한 임베딩퍼포먼스의 변화를 보이는지 시각화하는게 의미있을수도 있습니다. | 반지름의 제곱합을 histogram으로 제시 | . (4) piece-wise sine -&gt; 유클리드, 그래프, HST 3가지 방법으로 그래프변환 후 reconstruction하여 true값을 얼마나 잘 추론하는지? .",
            "url": "https://miruetoto.github.io/hst2022/2099/01/01/%ED%95%B4%EC%95%BC%ED%95%A0%EC%9D%BC%EB%93%A4.html",
            "relUrl": "/2099/01/01/%ED%95%B4%EC%95%BC%ED%95%A0%EC%9D%BC%EB%93%A4.html",
            "date": " • Jan 1, 2099"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": ".",
            "url": "https://miruetoto.github.io/hst2022/2022/05/28/(%EC%97%B0%EA%B5%AC)-HST-%EA%B3%84%EC%82%B0%EC%8B%9C%EA%B0%84-%EC%A1%B0%EC%82%AC.html",
            "relUrl": "/2022/05/28/(%EC%97%B0%EA%B5%AC)-HST-%EA%B3%84%EC%82%B0%EC%8B%9C%EA%B0%84-%EC%A1%B0%EC%82%AC.html",
            "date": " • May 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "(연구) HST example 3",
            "content": "&#49892;&#54744;&#54872;&#44221; . !conda env list . import . from IPython.display import HTML def show(fig): return HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False, config=dict({&#39;scrollZoom&#39;:False}))) . import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow plt.style.use(&#39;ggplot&#39;) . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . load data . n=23 f=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Worldwide)/1000000 V=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Film) W=np.array(pd.read_csv(&quot;2021-08-15-MCU-weights.csv&quot;,index_col=0))-np.eye(n,n) . HST . gs=GraphSignal(V,W,f) hst=HeavysnowTransform(gs) hst.snow(tau=100000,b=1,maxflow=n) . HST (tau= 100000, b=1) 100000/100000 HST completed and all history is recorded. . def choose_theta(maxtheta=300): y=[] x=np.arange(start=0.01,stop=maxtheta,step=0.1) for i in range(len(x)): hst.adjustingtheta(x[i]) gs=GraphSignal(V,hst.snowweight,f) spa=SpectralAnalysis(gs) spa.graphFouriertransform() spa.decompose() y.append(sum(abs(spa.lamb)&lt;0.001)) plt.plot(x,y) choose_theta() . /home/cgb3/Dropbox/01_yechan/_notebooks/heavysnow.py:11: RuntimeWarning: invalid value encountered in true_divide . hst.adjustingtheta(300) . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f809ce0d430&gt; . _type=[&#39;solo&#39;]*5+[&#39;multi&#39;]+[&#39;solo&#39;]*4+[&#39;multi&#39;]+[&#39;solo&#39;]+[&#39;multi&#39;]+[&#39;solo&#39;]*5+[&#39;multi&#39;]+[&#39;solo&#39;]*2+[&#39;multi&#39;]+[&#39;solo&#39;] df=pd.DataFrame({&#39;V&#39;:hst.V,&#39;f&#39;:hst.f,&#39;divlink&#39;:hst.graphweight.sum(axis=1), &#39;conlink&#39;:hst.graphweight.sum(axis=0),&#39;type&#39;:_type}) df . V f divlink conlink type . 0 Iron Man | 585.174222 | 4.000000 | 2.515815 | solo | . 1 The Incredible Hulk | 263.427551 | 1.000000 | 0.294608 | solo | . 2 Iron Man 2 | 623.933331 | 4.153846 | 3.107363 | solo | . 3 Thor | 449.326618 | 2.562500 | 2.241890 | solo | . 4 Captain America: The First Avenger | 370.569774 | 1.750000 | 0.948269 | solo | . 5 The Avengers | 1518.812988 | 4.647059 | 4.332114 | multi | . 6 Iron Man 3 | 1214.811252 | 3.200000 | 1.690351 | solo | . 7 Thor: The Dark World | 644.571402 | 2.411765 | 2.147921 | solo | . 8 Captain America: The Winter Soldier | 714.264267 | 3.266667 | 2.455757 | solo | . 9 Guardians of the Galaxy | 773.328629 | 1.631579 | 1.212075 | solo | . 10 Avengers: Age of Ultron | 1405.403694 | 3.952381 | 4.428065 | multi | . 11 Ant-man | 519.311965 | 1.750000 | 1.096071 | solo | . 12 Captain America: Civil War | 1153.304495 | 3.500000 | 4.048106 | multi | . 13 Doctor Strange | 677.718395 | 0.857143 | 0.182711 | solo | . 14 Guardians of the Galaxy Vol 2 | 863.756051 | 1.190476 | 0.898435 | solo | . 15 Spider-man: Homecoming | 880.166924 | 1.913043 | 2.416100 | solo | . 16 Thor: Ragnarok | 853.977126 | 2.285714 | 1.682512 | solo | . 17 Black Panther | 1346.913161 | 1.142857 | 0.582001 | solo | . 18 Avengers: Infinity War | 2048.359754 | 3.589744 | 7.545470 | multi | . 19 Ant-man and the Wasp | 622.674139 | 1.000000 | 0.875455 | solo | . 20 Captain Marvel | 1128.274794 | 1.333333 | 0.926001 | solo | . 21 Avengers: Endgame | 2796.274401 | 3.120000 | 8.935337 | multi | . 22 Spider-man: Far From Home | 1131.026557 | 1.937500 | 1.633182 | solo | . import plotly.graph_objects as go _colorscale=[ [0, &#39;rgb(0, 0, 0)&#39;], [1./10000, &#39;rgb(50, 50, 50)&#39;], [1./1000, &#39;rgb(100, 100, 100)&#39;], [1./100, &#39;rgb(150, 150, 150)&#39;], [1./10, &#39;rgb(200, 200, 200)&#39;], [1., &#39;rgb(255, 255, 255)&#39;], ] _colorbar= dict( tick0= 0, tickmode= &#39;array&#39;, tickvals= [-5, 0, 5, 10]) _mode =&#39;wrap&#39; _filter = np.array([1,1])*0.5 _z1 = np.diag(hst.snowygrounds[:,0])+0 _z2 = np.diag(hst.snowygrounds[:,25000])+5000 _z3 = np.diag(hst.snowygrounds[:,50000])+10000 _z4 = np.diag(hst.snowygrounds[:,75000])+15000 _z5 = np.diag(hst.snowygrounds[:,100000])+20000 # _z1=scipy.ndimage.filters.gaussian_filter(_z1, _filter, mode=_mode) # _z2=scipy.ndimage.filters.gaussian_filter(_z2, _filter, mode=_mode) # _z3=scipy.ndimage.filters.gaussian_filter(_z3, _filter, mode=_mode) # _z4=scipy.ndimage.filters.gaussian_filter(_z4, _filter, mode=_mode) fig = go.Figure([go.Surface(x = df.conlink, y = df.divlink, z = _z1, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z2, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z3, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z4, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z5, colorscale=_colorscale, colorbar=_colorbar, showscale=False)]) fig.update_layout(width=1000, height=1000, scene_camera_eye=dict(x=-2.5, y=-2.5, z=0.05), xaxis = list(title = list(text =&#39;conv&#39;)), yaxis = list(title = list(text =&#39;div&#39;)), zaxis = list(title = list(text =&#39;f&#39;)) ) show(fig) fig.write_image(&#39;2022-01-13-snow.pdf&#39;) . TypeError Traceback (most recent call last) /tmp/ipykernel_95153/2071314270.py in &lt;module&gt; 37 height=1000, 38 scene_camera_eye=dict(x=-2.5, y=-2.5, z=0.05), &gt; 39 xaxis = list(title = list(text =&#39;conv&#39;)), 40 yaxis = list(title = list(text =&#39;div&#39;)), 41 zaxis = list(title = list(text =&#39;f&#39;)) TypeError: list() takes no keyword arguments . R &#54872;&#44221;&#51004;&#47196;.. . import rpy2 %load_ext rpy2.ipython . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . n=hst.n V=hst.V f=hst.f WEuclid= hst.euclidweight Wgraph= (hst.graphweight+hst.graphweight.T)/2 Whst= hst.snowweight W= hst.graphweight . %R -i n %R -i V %R -i f %R -i WEuclid %R -i Wgraph %R -i Whst %R -i W . &#44536;&#47548;1&#49884;&#44033;&#54868; . %%R -w 2000 -h 1400 -r 150 library(tidyverse) list(n=n,V=V,f=f,WEuclid=WEuclid,Wgraph=Wgraph,Whst=Whst,W=W) %&gt;% saveRDS(file = &quot;2022-01-13.rds&quot;) source(&#39;heavysnow.R&#39;) df&lt;-tibble(V) df$f&lt;-as.vector(f) df$divlink&lt;-0 df$conlink&lt;-0 df$link&lt;-0 for(i in 1:23){ df$divlink[i]&lt;-sum(W[i,]) df$conlink[i]&lt;-sum(W[,i]) df$link[i]&lt;-(sum(W[i,])+sum(W[,i]))/2 } df$type&lt;-rep(&#39;solo&#39;,23) df[V %in% c(&quot;The Avengers&quot; ,&quot;Avengers: Age of Ultron&quot;,&quot;Captain America: Civil War&quot;,&quot;Avengers: Infinity War&quot;,&quot;Avengers: Endgame&quot;),&#39;type&#39;]=&#39;multi&#39; p1&lt;-ggplot(df, aes(x=conlink, y=divlink,z=f))+ geom_point(aes(x=conlink, y=divlink,size=f**2,shape=type),alpha=0.5)+ scale_size(range=c(2,20))+ #scale_alpha_manual(values=c(1,0.6))+ scale_shape_manual(values=c(18,20))+ theme_classic()+ guides(size=F)+ geom_text_repel(aes(x=conlink,y=divlink,label=V),col=&quot;gray40&quot;)+ #geom_density2d(aes(x=conlink,y=divlink,fill=tatf,color=f)),+ ylab(&quot;Out-degree&quot;)+xlab(&quot;In-degree&quot;)+ ggtitle(&quot;&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ theme(axis.title.x=element_text(face=4,size=rel(1)))+theme(axis.title.y=element_text(face=4,size=rel(1))) #theme(legend.position = &quot;none&quot;) show(p1) ggsave(plot=p1,&quot;./2022-01-13-p1.pdf&quot;,width=10,height=7) . &#44536;&#47000;&#54532;&#54504;&#47532;&#50640;&#48320;&#54872; -&gt; &#49884;&#44033;&#54868; . %%R -w 1000 -h 600 -r 150 g1&lt;-gfft(f,WEuclid) g2&lt;-gfft(f,Wgraph) g3&lt;-gfft(f,Whst) library(gridExtra) e1&lt;-eigenplot(g1)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e2&lt;-eigenplot(g2)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e3&lt;-eigenplot(g3)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) s1&lt;-specplot(g1) s2&lt;-specplot(g2) s3&lt;-specplot(g3) p2&lt;-grid.arrange(e1,e2,e3,s1,s2,s3,nrow=2) ggsave(plot=p2,&quot;./2022-01-13-p2.pdf&quot;,width=5,height=3) . &#48516;&#54644; . %%R -w 1400 -h 3500 -r 150 d1&lt;-decompose(f,WEuclid,V=V) # 0, 35000, 60000, 80000 d2&lt;-decompose(f,Wgraph,V=V) # 0, 35000, 60000, 80000 d3&lt;-decompose(f,Whst,V=V) # 0, 35000, 60000, 80000 d1$case&lt;-&quot;Euclid&quot; d2$case&lt;-&quot;Graph&quot; d3$case&lt;-&quot;HST&quot; df2_ &lt;-rbind(d1,d2,d3) df2_ %&gt;% group_by(case,eigenvectorindex) #%&gt;% mutate(textsize= 10*(abs(fhat)&gt;70)) df2=merge(df, df2_ %&gt;% group_by(case,eigenvectorindex) %&gt;% mutate(textsize= 10*(abs(fhat)&gt;70))) %&gt;% as_tibble complst_ = c() for(i in 1:23) complst_[i] = sum(filter(df2,eigenvectorindex==i,case==&#39;HST&#39;)$fhat**2)/sum(filter(df2,eigenvectorindex==i,case==&#39;HST&#39;)$f**2) selected_eigenvetorindex=which(complst_ &gt; 0.01) p3&lt;-ggplot(data=filter(df2,eigenvectorindex %in% selected_eigenvetorindex, case==&#39;HST&#39;),aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+ #geom_text_repel(aes(x=Vindex,y=fhat,label=V,size=textsize),col=1,fontface=4,alpha=0.8,segment.size=0.2,segment.color=&quot;gray60&quot;,min.segment.length=5,hjust=0.1)+ scale_radius(range = c(0,1.8))+ guides(size=FALSE)+ facet_wrap(&quot;eigenvectorindex&quot;,ncol=1,scales=&#39;free&#39;)+ geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+ theme_minimal()+ #theme(strip.text.x = element_text(angle=45,size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ #theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(axis.text.x=element_text(angle=45, hjust=1, vjust=1,size=rel(1.6)))+ #theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.6)))+ scale_x_discrete(limits=V) show(p3) ggsave(plot=p3,&quot;./2022-01-13-p3.pdf&quot;,width=7,height=7*2.5) . %%R -r 150 -w 1200 -h 3500 p4&lt;-ggplot(data=filter(df2,eigenvectorindex %in% selected_eigenvetorindex, case==&#39;HST&#39;),aes(x=V,y=fhat))+ geom_point(aes(x=conlink, y=divlink,size=f**2,col=ifelse(abs(fhat)&lt;30,&#39;Gray&#39;,ifelse(fhat&gt;0,&#39;Blue&#39;,&#39;Red&#39;)),shape=type),alpha=0.8)+ scale_colour_manual(values = c(&quot;#00BFC4&quot;, &quot;gray&quot;, &quot;#F8766D&quot;))+ scale_size(range=c(2,20))+ facet_wrap(&quot;eigenvectorindex&quot;,ncol=1,scales=&#39;free&#39;)+ scale_shape_manual(values=c(18,20))+ theme_void()+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ylim(c(0,5))+xlim(c(0,9))+ guides(size=F,shape=F)+ ggtitle(&quot;&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ theme(axis.title.x=element_text(face=4,size=rel(1)))+theme(axis.title.y=element_text(face=4,size=rel(1)))+ theme(legend.position = &quot;none&quot;) show(p4) ggsave(plot=p4,&quot;./2022-01-13-p4.pdf&quot;,width=3.0,height=7*2.5) . %%R ## 1. define friendship library(igraph) frnd_ship&lt;-friendship(W) ## 2. define relations relations&lt;-expand.grid(from=V, to=V) relations&lt;-cbind(relations,frnd_ship) ## 3. make gdf and weight library(ggraph) gdf&lt;-graph_from_data_frame(relations[frnd_ship&gt;0,],directed=TRUE,vertices=V) wght&lt;-frnd_ship[frnd_ship&gt;0] df_ = filter(df2,eigenvectorindex %in% selected_eigenvetorindex, case==&#39;HST&#39;) %&gt;% mutate(col=ifelse(abs(fhat)&lt;30,&#39;Gray&#39;,ifelse(fhat&gt;0,&#39;Blue&#39;,&#39;Red&#39;))) %&gt;% select(Vindex,eigenvectorindex,col) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[1]) %&gt;% arrange(Vindex))$col p_temp1 &lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#00BFC4&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp1,&#39;2022-01-13-p_temp1.pdf&#39;,width=3.5,height=7*2.5/5) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[2]) %&gt;% arrange(Vindex))$col p_temp2&lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#F8766D&quot;,&quot;#00BFC4&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp2,&#39;2022-01-13-p_temp2.pdf&#39;,width=3.5,height=7*2.5/5) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[3]) %&gt;% arrange(Vindex))$col p_temp3&lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#00BFC4&quot;, &quot;gray&quot;, &quot;#F8766D&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp3,&#39;2022-01-13-p_temp3.pdf&#39;,width=3.5,height=7*2.5/5) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[4]) %&gt;% arrange(Vindex))$col p_temp4&lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#00BFC4&quot;, &quot;gray&quot;, &quot;#F8766D&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp4,&#39;2022-01-13-p_temp4.pdf&#39;,width=3.5,height=7*2.5/5) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[5]) %&gt;% arrange(Vindex))$col p_temp5&lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#00BFC4&quot;, &quot;gray&quot;, &quot;#F8766D&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp5,&#39;2022-01-13-p_temp5.pdf&#39;,width=3.5,height=7*2.5/5) . R[write to console]: Using `stress` as default layout R[write to console]: Using `stress` as default layout R[write to console]: Using `stress` as default layout R[write to console]: Using `stress` as default layout R[write to console]: Using `stress` as default layout .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/03/12/(%EC%97%B0%EA%B5%AC)-HST-example-3-degree-%EC%A1%B0%EC%82%AC.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/03/12/(%EC%97%B0%EA%B5%AC)-HST-example-3-degree-%EC%A1%B0%EC%82%AC.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "(연구) HST example 1, Appendix 추가 (2) 이거로하자.",
            "content": "Import . import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=0 W[n-1,n-1]=0 . gs=GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . %run heavysnow hst=HeavysnowTransform(gs) hst.snow(tau=100000,b=0.01,maxflow=3) . HST (tau= 100000, b=0.01) 100000/100000 HST completed and all history is recorded. . plt.imshow(hst.snowdistance) . &lt;matplotlib.image.AxesImage at 0x7f534083b910&gt; . theta=10 hst.snowweight=np.exp(-hst.snowdistance/(theta*hst.tau*hst.b**2))-np.eye(n,n) plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f533d46ab80&gt; . - $ theta=10, theta=100$ 에서의 결과가 우수하다. . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.983778e+00 1.792158e+00 1.780492e+00 1.751487e+00 1.248511e+00 [6] 1.218169e+00 1.189868e+00 1.016213e+00 1.931223e-02 1.178294e-05 [11] 5.348067e-12 2.837044e-12 5.714269e-17 1.168346e-23 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -6.476973e-19 -5.301214e-01 1.475232e-01 -4.596750e-22 3.754725e-22 [2,] -7.609886e-19 7.185427e-01 -1.931337e-01 -5.455497e-22 4.447190e-22 [3,] -5.447955e-19 -3.688585e-01 8.719645e-02 -4.118253e-22 3.322559e-22 [4,] 2.260761e-16 -7.728108e-24 -2.626892e-23 -4.576965e-17 2.984822e-17 [5,] 5.851465e-19 1.349179e-01 4.738872e-01 -5.103593e-22 2.649701e-22 [6,] 7.338546e-19 -1.906186e-01 -7.227767e-01 -6.205020e-22 3.195785e-22 [7,] 5.762819e-19 1.098761e-01 4.316919e-01 -4.824496e-22 2.477068e-22 [8,] 5.086295e-01 -4.663465e-23 -1.975104e-22 -1.145449e-05 -2.689938e-05 [9,] -7.099903e-01 -1.209483e-22 -4.654171e-22 1.205196e-05 8.773382e-06 [10,] 4.870419e-01 1.027624e-22 4.013157e-22 -1.238076e-06 2.489188e-05 [11,] -1.228360e-26 -7.319856e-32 -2.895283e-31 5.878007e-29 -1.198760e-28 [12,] -1.364587e-05 -5.278953e-28 -2.094408e-27 -4.530053e-01 -7.162871e-01 [13,] 9.802951e-06 -2.559054e-28 -9.906752e-28 7.555810e-01 7.510744e-03 [14,] -2.953063e-06 6.152251e-30 2.678109e-29 -4.731632e-01 6.977653e-01 [,6] [,7] [,8] [,9] [,10] [1,] -3.429857e-01 -5.112846e-01 1.320933e-18 -4.104170e-01 -5.179850e-17 [2,] -2.047302e-02 -5.256120e-02 1.552080e-18 -4.822170e-01 -6.144639e-17 [3,] 4.373024e-01 6.530002e-01 1.111522e-18 -3.452760e-01 -4.627354e-17 [4,] 5.143004e-23 -3.308900e-23 3.277037e-16 -3.774758e-15 -3.902724e-12 [5,] -5.681040e-01 3.799390e-01 -1.177103e-18 3.681796e-01 -5.262009e-17 [6,] -2.219276e-02 -5.065392e-03 -1.475926e-18 4.613437e-01 -6.389283e-17 [7,] 6.061960e-01 -4.062473e-01 -1.161494e-18 3.625118e-01 -4.965361e-17 [8,] -1.267807e-21 8.979855e-22 -6.921128e-01 -3.036522e-18 4.537936e-01 [9,] -2.558862e-22 1.589466e-22 -6.864913e-04 1.109246e-18 6.239948e-01 [10,] 7.052899e-22 -4.890600e-22 7.217891e-01 1.536252e-18 4.357249e-01 [11,] -5.973648e-31 4.099182e-31 -3.598416e-26 -2.263697e-29 1.191818e-26 [12,] -6.393905e-27 4.533346e-27 2.567775e-05 -2.485223e-23 -2.460168e-01 [13,] -1.275569e-27 8.746251e-28 -1.015613e-05 -2.197987e-24 -3.036090e-01 [14,] 2.764298e-28 -2.000330e-28 -2.595307e-05 1.497844e-24 -2.492850e-01 [,11] [,12] [,13] [,14] [1,] 3.096623e-10 -3.869302e-01 -1.053743e-05 2.190265e-12 [2,] 3.673399e-10 -4.589996e-01 -1.250013e-05 2.598223e-12 [3,] 2.766349e-10 -3.456617e-01 -9.413550e-06 1.956660e-12 [4,] 1.382085e-05 2.723342e-05 -1.000000e+00 2.078483e-07 [5,] 3.146494e-10 -3.931617e-01 -1.070713e-05 2.225539e-12 [6,] 3.820586e-10 -4.773910e-01 -1.300099e-05 2.702330e-12 [7,] 2.969166e-10 -3.710042e-01 -1.010371e-05 2.100114e-12 [8,] -2.373760e-01 -1.006276e-10 -3.280740e-06 4.697197e-13 [9,] -3.264105e-01 -1.383708e-10 -4.511274e-06 6.459014e-13 [10,] -2.279353e-01 -9.662551e-11 -3.150262e-06 4.510385e-13 [11,] -8.936185e-13 2.024354e-16 2.078483e-07 1.000000e+00 [12,] -4.703134e-01 -1.993735e-10 -6.500131e-06 9.306982e-13 [13,] -5.803985e-01 -2.460404e-10 -8.021601e-06 1.148545e-12 [14,] -4.765471e-01 -2.020161e-10 -6.586287e-06 9.430341e-13 $fbar [1] 0.28567429 0.12626185 -0.22438827 -0.17058816 -0.01100433 -0.08974293 [7] -0.05778069 0.02897936 0.04587489 0.71460256 -2.31896703 2.43317559 [13] -0.99996599 -0.99999979 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 ggsave(plot=fig1,&quot;2021-08-14-EX1(0).pdf&quot;,width=15,height=10) . %%R -w 200 -h 600 -r 120 fig_= grid.arrange(fig1_4,fig1_5,fig1_6,nrow=3) ggsave(plot=fig_,&quot;2021-08-14-EX1(1).pdf&quot;,width=2,height=6) . %%R gfftrslt_Graph[[1]][13] #print(n) . [1] 0.02905818 . 13/14 . 0.9285714285714286 . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 ggsave(plot=fig2,&quot;2021-08-14-EX1(2).pdf&quot;,width=20,height=6) . Appendix . _, (ax1,ax2) = plt.subplots(1,2) ax1.imshow(hst.eucliddistance[:7,:7],origin=&#39;lower&#39;) ax2.imshow(hst.snowdistance[:7,:7],origin=&#39;lower&#39;) plt.show() . brk=10000 p, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(l2distance(hst.snowygrounds[:,0:brk]),origin=&#39;lower&#39;) ax2.imshow(l2distance(hst.snowygrounds[:,brk:]),origin=&#39;lower&#39;) ax3.imshow(hst.snowdistance,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) #plt.show() p.savefig(&#39;temp.pdf&#39;,transparent=True) . y=hst.snowdistance[0] plt.plot(y,&#39;o--&#39;) plt.plot([0,1,2,4,5,6,10],y[[0,1,2,4,5,6,10]],&#39;o&#39;) plt.plot([3,7,8,9,11,12,13],y[[3,7,8,9,11,12,13]],&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fef40896040&gt;] . p, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(hst.euclidweight,origin=&#39;lower&#39;) ax2.imshow(hst.snowweight,origin=&#39;lower&#39;) ax3.imshow(hst.graphweight,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) #p.show() p.savefig(&#39;temp.pdf&#39;, transparent=True) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/03/02/(%EC%97%B0%EA%B5%AC)-HST-example-1.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/03/02/(%EC%97%B0%EA%B5%AC)-HST-example-1.html",
            "date": " • Mar 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "(연구) HST example 3",
            "content": "import . import matplotlib.pyplot as plt import mpl_toolkits.mplot3d.art3d as art3d import numpy as np . &#54788;&#51116;&#54872;&#44221; . !conda env list . # conda environments: # base /home/cgb3/anaconda3 py39r40 * /home/cgb3/anaconda3/envs/py39r40 . &#50696;&#51228;&#49444;&#51221; . V=[&#39;V1&#39;,&#39;V2&#39;,&#39;V3&#39;,&#39;V4&#39;] f=[3,1,4,5] x=[-1/np.sqrt(2),0,1,0] y=[-1/np.sqrt(2),0,0,1] W=[[0,1,0,0], [1,0,1,1], [0,1,0,0], [0,1,0,0]] . HST . %run heavysnow . gs=GraphSignal(V,W,f) hst=HeavysnowTransform(gs) hst.snow(tau=9,b=1,maxflow=16) . HST (tau= 9, b=1) 9/9 HST completed and all history is recorded. . trajectory = [V[k] for k in hst.trajectory] print(trajectory) . [&#39;V2&#39;, &#39;V1&#39;, &#39;V2&#39;, &#39;V1&#39;, &#39;V2&#39;, &#39;V4&#39;, &#39;V2&#39;, &#39;V3&#39;, &#39;V3&#39;, &#39;V2&#39;] . &#49884;&#44033;&#54868; . with plt.style.context(&#39;seaborn-pastel&#39;): fig = plt.figure(figsize=(16,16)) for k in range(9): ax = fig.add_subplot(3, 3, k+1, projection=&#39;3d&#39;) _i=1 for xi, yi, fi in zip(x, y, hst.snowygrounds[:,k]): line=art3d.Line3D(*zip((xi, yi, 0), (xi, yi, fi))) ax.add_line(line) #_col= hst.trajectory[3]+1 ax.text(xi,yi,-2, &#39;V&#39;+str(_i)) _i=_i+1 ax.text(xi,yi,fi+0.1, str(fi)) for start in range(4): for end in range(start,4): if(W[start][end]==1): line2=art3d.Line3D( *zip((x[start],y[start],0),(x[end],y[end],0)), linestyle=&#39;dashed&#39;, color=&#39;gray&#39;, linewidth=1 ) ax.add_line(line2) ax.set_title(hst.status[k]) ax.set_xlim3d(-1.1, 1.1) ax.set_ylim3d(-1.1, 1.1) ax.set_zlim3d(0, 10) ax.set_yticks(ticks= []) ax.set_xticks(ticks= []) ax.set_zticks(ticks= []) # Get rid of the panes ax.w_xaxis.set_pane_color((1.0, 1.0, 1.0, 0.0)) ax.w_yaxis.set_pane_color((1.0, 1.0, 1.0, 0.0)) ax.w_zaxis.set_pane_color((1.0, 1.0, 1.0, 0.0)) # Get rid of the spines ax.w_xaxis.line.set_color((1.0, 1.0, 1.0, 0.0)) ax.w_yaxis.line.set_color((1.0, 1.0, 1.0, 0.0)) ax.w_zaxis.line.set_color((1.0, 1.0, 1.0, 0.0)) plt.show() . fig.savefig(&#39;2022-02-12-illustration_of_HSprocess.pdf&#39;, transparent=True) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/02/12/(%EB%85%B8%ED%8A%B8)-HST-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98-%EC%98%88%EC%8B%9C.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/02/12/(%EB%85%B8%ED%8A%B8)-HST-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98-%EC%98%88%EC%8B%9C.html",
            "date": " • Feb 12, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "(연구) HST example 3",
            "content": "&#49892;&#54744;&#54872;&#44221; . !conda env list . # conda environments: # base /home/cgb3/anaconda3 py39r40 * /home/cgb3/anaconda3/envs/py39r40 . import . from IPython.display import HTML def show(fig): return HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False, config=dict({&#39;scrollZoom&#39;:False}))) . import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow plt.style.use(&#39;ggplot&#39;) . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . load data . n=23 f=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Worldwide)/1000000 V=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Film) W=np.array(pd.read_csv(&quot;2021-08-15-MCU-weights.csv&quot;,index_col=0))-np.eye(n,n) . HST . gs=GraphSignal(V,W,f) hst=HeavysnowTransform(gs) hst.snow(tau=100000,b=1,maxflow=n) . HST (tau= 100000, b=1) 100000/100000 HST completed and all history is recorded. . def choose_theta(maxtheta=300): y=[] x=np.arange(start=0.01,stop=maxtheta,step=0.1) for i in range(len(x)): hst.adjustingtheta(x[i]) gs=GraphSignal(V,hst.snowweight,f) spa=SpectralAnalysis(gs) spa.graphFouriertransform() spa.decompose() y.append(sum(abs(spa.lamb)&lt;0.001)) plt.plot(x,y) choose_theta() . /home/cgb3/Dropbox/01_yechan/_notebooks/heavysnow.py:11: RuntimeWarning: invalid value encountered in true_divide . hst.adjustingtheta(300) . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f809ce0d430&gt; . _type=[&#39;solo&#39;]*5+[&#39;multi&#39;]+[&#39;solo&#39;]*4+[&#39;multi&#39;]+[&#39;solo&#39;]+[&#39;multi&#39;]+[&#39;solo&#39;]*5+[&#39;multi&#39;]+[&#39;solo&#39;]*2+[&#39;multi&#39;]+[&#39;solo&#39;] df=pd.DataFrame({&#39;V&#39;:hst.V,&#39;f&#39;:hst.f,&#39;divlink&#39;:hst.graphweight.sum(axis=1), &#39;conlink&#39;:hst.graphweight.sum(axis=0),&#39;type&#39;:_type}) df . V f divlink conlink type . 0 Iron Man | 585.174222 | 4.000000 | 2.515815 | solo | . 1 The Incredible Hulk | 263.427551 | 1.000000 | 0.294608 | solo | . 2 Iron Man 2 | 623.933331 | 4.153846 | 3.107363 | solo | . 3 Thor | 449.326618 | 2.562500 | 2.241890 | solo | . 4 Captain America: The First Avenger | 370.569774 | 1.750000 | 0.948269 | solo | . 5 The Avengers | 1518.812988 | 4.647059 | 4.332114 | multi | . 6 Iron Man 3 | 1214.811252 | 3.200000 | 1.690351 | solo | . 7 Thor: The Dark World | 644.571402 | 2.411765 | 2.147921 | solo | . 8 Captain America: The Winter Soldier | 714.264267 | 3.266667 | 2.455757 | solo | . 9 Guardians of the Galaxy | 773.328629 | 1.631579 | 1.212075 | solo | . 10 Avengers: Age of Ultron | 1405.403694 | 3.952381 | 4.428065 | multi | . 11 Ant-man | 519.311965 | 1.750000 | 1.096071 | solo | . 12 Captain America: Civil War | 1153.304495 | 3.500000 | 4.048106 | multi | . 13 Doctor Strange | 677.718395 | 0.857143 | 0.182711 | solo | . 14 Guardians of the Galaxy Vol 2 | 863.756051 | 1.190476 | 0.898435 | solo | . 15 Spider-man: Homecoming | 880.166924 | 1.913043 | 2.416100 | solo | . 16 Thor: Ragnarok | 853.977126 | 2.285714 | 1.682512 | solo | . 17 Black Panther | 1346.913161 | 1.142857 | 0.582001 | solo | . 18 Avengers: Infinity War | 2048.359754 | 3.589744 | 7.545470 | multi | . 19 Ant-man and the Wasp | 622.674139 | 1.000000 | 0.875455 | solo | . 20 Captain Marvel | 1128.274794 | 1.333333 | 0.926001 | solo | . 21 Avengers: Endgame | 2796.274401 | 3.120000 | 8.935337 | multi | . 22 Spider-man: Far From Home | 1131.026557 | 1.937500 | 1.633182 | solo | . import plotly.graph_objects as go _colorscale=[ [0, &#39;rgb(0, 0, 0)&#39;], [1./10000, &#39;rgb(50, 50, 50)&#39;], [1./1000, &#39;rgb(100, 100, 100)&#39;], [1./100, &#39;rgb(150, 150, 150)&#39;], [1./10, &#39;rgb(200, 200, 200)&#39;], [1., &#39;rgb(255, 255, 255)&#39;], ] _colorbar= dict( tick0= 0, tickmode= &#39;array&#39;, tickvals= [-5, 0, 5, 10]) _mode =&#39;wrap&#39; _filter = np.array([1,1])*0.5 _z1 = np.diag(hst.snowygrounds[:,0])+0 _z2 = np.diag(hst.snowygrounds[:,25000])+5000 _z3 = np.diag(hst.snowygrounds[:,50000])+10000 _z4 = np.diag(hst.snowygrounds[:,75000])+15000 _z5 = np.diag(hst.snowygrounds[:,100000])+20000 # _z1=scipy.ndimage.filters.gaussian_filter(_z1, _filter, mode=_mode) # _z2=scipy.ndimage.filters.gaussian_filter(_z2, _filter, mode=_mode) # _z3=scipy.ndimage.filters.gaussian_filter(_z3, _filter, mode=_mode) # _z4=scipy.ndimage.filters.gaussian_filter(_z4, _filter, mode=_mode) fig = go.Figure([go.Surface(x = df.conlink, y = df.divlink, z = _z1, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z2, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z3, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z4, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z5, colorscale=_colorscale, colorbar=_colorbar, showscale=False)]) fig.update_layout(width=1000, height=1000, scene_camera_eye=dict(x=-2.5, y=-2.5, z=0.05), xaxis = list(title = list(text =&#39;conv&#39;)), yaxis = list(title = list(text =&#39;div&#39;)), zaxis = list(title = list(text =&#39;f&#39;)) ) show(fig) fig.write_image(&#39;2022-01-13-snow.pdf&#39;) . TypeError Traceback (most recent call last) /tmp/ipykernel_95153/2071314270.py in &lt;module&gt; 37 height=1000, 38 scene_camera_eye=dict(x=-2.5, y=-2.5, z=0.05), &gt; 39 xaxis = list(title = list(text =&#39;conv&#39;)), 40 yaxis = list(title = list(text =&#39;div&#39;)), 41 zaxis = list(title = list(text =&#39;f&#39;)) TypeError: list() takes no keyword arguments . R &#54872;&#44221;&#51004;&#47196;.. . import rpy2 %load_ext rpy2.ipython . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . n=hst.n V=hst.V f=hst.f WEuclid= hst.euclidweight Wgraph= (hst.graphweight+hst.graphweight.T)/2 Whst= hst.snowweight W= hst.graphweight . %R -i n %R -i V %R -i f %R -i WEuclid %R -i Wgraph %R -i Whst %R -i W . &#44536;&#47548;1&#49884;&#44033;&#54868; . %%R -w 2000 -h 1400 -r 150 library(tidyverse) list(n=n,V=V,f=f,WEuclid=WEuclid,Wgraph=Wgraph,Whst=Whst,W=W) %&gt;% saveRDS(file = &quot;2022-01-13.rds&quot;) source(&#39;heavysnow.R&#39;) df&lt;-tibble(V) df$f&lt;-as.vector(f) df$divlink&lt;-0 df$conlink&lt;-0 df$link&lt;-0 for(i in 1:23){ df$divlink[i]&lt;-sum(W[i,]) df$conlink[i]&lt;-sum(W[,i]) df$link[i]&lt;-(sum(W[i,])+sum(W[,i]))/2 } df$type&lt;-rep(&#39;solo&#39;,23) df[V %in% c(&quot;The Avengers&quot; ,&quot;Avengers: Age of Ultron&quot;,&quot;Captain America: Civil War&quot;,&quot;Avengers: Infinity War&quot;,&quot;Avengers: Endgame&quot;),&#39;type&#39;]=&#39;multi&#39; p1&lt;-ggplot(df, aes(x=conlink, y=divlink,z=f))+ geom_point(aes(x=conlink, y=divlink,size=f**2,shape=type),alpha=0.5)+ scale_size(range=c(2,20))+ #scale_alpha_manual(values=c(1,0.6))+ scale_shape_manual(values=c(18,20))+ theme_classic()+ guides(size=F)+ geom_text_repel(aes(x=conlink,y=divlink,label=V),col=&quot;gray40&quot;)+ #geom_density2d(aes(x=conlink,y=divlink,fill=tatf,color=f)),+ ylab(&quot;Out-degree&quot;)+xlab(&quot;In-degree&quot;)+ ggtitle(&quot;&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ theme(axis.title.x=element_text(face=4,size=rel(1)))+theme(axis.title.y=element_text(face=4,size=rel(1))) #theme(legend.position = &quot;none&quot;) show(p1) ggsave(plot=p1,&quot;./2022-01-13-p1.pdf&quot;,width=10,height=7) . &#44536;&#47000;&#54532;&#54504;&#47532;&#50640;&#48320;&#54872; -&gt; &#49884;&#44033;&#54868; . %%R -w 1000 -h 600 -r 150 g1&lt;-gfft(f,WEuclid) g2&lt;-gfft(f,Wgraph) g3&lt;-gfft(f,Whst) library(gridExtra) e1&lt;-eigenplot(g1)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e2&lt;-eigenplot(g2)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e3&lt;-eigenplot(g3)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) s1&lt;-specplot(g1) s2&lt;-specplot(g2) s3&lt;-specplot(g3) p2&lt;-grid.arrange(e1,e2,e3,s1,s2,s3,nrow=2) ggsave(plot=p2,&quot;./2022-01-13-p2.pdf&quot;,width=5,height=3) . &#48516;&#54644; . %%R -w 1400 -h 3500 -r 150 d1&lt;-decompose(f,WEuclid,V=V) # 0, 35000, 60000, 80000 d2&lt;-decompose(f,Wgraph,V=V) # 0, 35000, 60000, 80000 d3&lt;-decompose(f,Whst,V=V) # 0, 35000, 60000, 80000 d1$case&lt;-&quot;Euclid&quot; d2$case&lt;-&quot;Graph&quot; d3$case&lt;-&quot;HST&quot; df2_ &lt;-rbind(d1,d2,d3) df2_ %&gt;% group_by(case,eigenvectorindex) #%&gt;% mutate(textsize= 10*(abs(fhat)&gt;70)) df2=merge(df, df2_ %&gt;% group_by(case,eigenvectorindex) %&gt;% mutate(textsize= 10*(abs(fhat)&gt;70))) %&gt;% as_tibble complst_ = c() for(i in 1:23) complst_[i] = sum(filter(df2,eigenvectorindex==i,case==&#39;HST&#39;)$fhat**2)/sum(filter(df2,eigenvectorindex==i,case==&#39;HST&#39;)$f**2) selected_eigenvetorindex=which(complst_ &gt; 0.01) p3&lt;-ggplot(data=filter(df2,eigenvectorindex %in% selected_eigenvetorindex, case==&#39;HST&#39;),aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+ #geom_text_repel(aes(x=Vindex,y=fhat,label=V,size=textsize),col=1,fontface=4,alpha=0.8,segment.size=0.2,segment.color=&quot;gray60&quot;,min.segment.length=5,hjust=0.1)+ scale_radius(range = c(0,1.8))+ guides(size=FALSE)+ facet_wrap(&quot;eigenvectorindex&quot;,ncol=1,scales=&#39;free&#39;)+ geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+ theme_minimal()+ #theme(strip.text.x = element_text(angle=45,size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ #theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(axis.text.x=element_text(angle=45, hjust=1, vjust=1,size=rel(1.6)))+ #theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.6)))+ scale_x_discrete(limits=V) show(p3) ggsave(plot=p3,&quot;./2022-01-13-p3.pdf&quot;,width=7,height=7*2.5) . %%R -r 150 -w 1200 -h 3500 p4&lt;-ggplot(data=filter(df2,eigenvectorindex %in% selected_eigenvetorindex, case==&#39;HST&#39;),aes(x=V,y=fhat))+ geom_point(aes(x=conlink, y=divlink,size=f**2,col=ifelse(abs(fhat)&lt;30,&#39;Gray&#39;,ifelse(fhat&gt;0,&#39;Blue&#39;,&#39;Red&#39;)),shape=type),alpha=0.8)+ scale_colour_manual(values = c(&quot;#00BFC4&quot;, &quot;gray&quot;, &quot;#F8766D&quot;))+ scale_size(range=c(2,20))+ facet_wrap(&quot;eigenvectorindex&quot;,ncol=1,scales=&#39;free&#39;)+ scale_shape_manual(values=c(18,20))+ theme_void()+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ylim(c(0,5))+xlim(c(0,9))+ guides(size=F,shape=F)+ ggtitle(&quot;&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ theme(axis.title.x=element_text(face=4,size=rel(1)))+theme(axis.title.y=element_text(face=4,size=rel(1)))+ theme(legend.position = &quot;none&quot;) show(p4) ggsave(plot=p4,&quot;./2022-01-13-p4.pdf&quot;,width=3.0,height=7*2.5) . %%R ## 1. define friendship library(igraph) frnd_ship&lt;-friendship(W) ## 2. define relations relations&lt;-expand.grid(from=V, to=V) relations&lt;-cbind(relations,frnd_ship) ## 3. make gdf and weight library(ggraph) gdf&lt;-graph_from_data_frame(relations[frnd_ship&gt;0,],directed=TRUE,vertices=V) wght&lt;-frnd_ship[frnd_ship&gt;0] df_ = filter(df2,eigenvectorindex %in% selected_eigenvetorindex, case==&#39;HST&#39;) %&gt;% mutate(col=ifelse(abs(fhat)&lt;30,&#39;Gray&#39;,ifelse(fhat&gt;0,&#39;Blue&#39;,&#39;Red&#39;))) %&gt;% select(Vindex,eigenvectorindex,col) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[1]) %&gt;% arrange(Vindex))$col p_temp1 &lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#00BFC4&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp1,&#39;2022-01-13-p_temp1.pdf&#39;,width=3.5,height=7*2.5/5) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[2]) %&gt;% arrange(Vindex))$col p_temp2&lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#F8766D&quot;,&quot;#00BFC4&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp2,&#39;2022-01-13-p_temp2.pdf&#39;,width=3.5,height=7*2.5/5) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[3]) %&gt;% arrange(Vindex))$col p_temp3&lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#00BFC4&quot;, &quot;gray&quot;, &quot;#F8766D&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp3,&#39;2022-01-13-p_temp3.pdf&#39;,width=3.5,height=7*2.5/5) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[4]) %&gt;% arrange(Vindex))$col p_temp4&lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#00BFC4&quot;, &quot;gray&quot;, &quot;#F8766D&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp4,&#39;2022-01-13-p_temp4.pdf&#39;,width=3.5,height=7*2.5/5) col=(df_%&gt;% filter(eigenvectorindex==selected_eigenvetorindex[5]) %&gt;% arrange(Vindex))$col p_temp5&lt;- ggraph(gdf)+theme_void()+ geom_edge_arc(curvature=0.1,aes(alpha=frnd_ship),edge_width=0.2,arrow=arrow(length=unit(2,&#39;mm&#39;),type=&#39;closed&#39;,angle=10),linewidth=20)+ geom_node_point(size=3+f/100,alpha=0.7,aes(color=col))+ scale_colour_manual(values = c(&quot;#00BFC4&quot;, &quot;gray&quot;, &quot;#F8766D&quot;))+ #geom_node_text(aes(label = V,size=f), color=&quot;black&quot;, repel=T,fontface=4)+ guides(size=&#39;none&#39;) + guides(edge_alpha=&#39;none&#39;) + guides(color=&#39;none&#39;)+ ggtitle(&quot;&quot;)+ theme(plot.title=element_text(hjust=0.09))+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) ggsave(plot=p_temp5,&#39;2022-01-13-p_temp5.pdf&#39;,width=3.5,height=7*2.5/5) . R[write to console]: Using `stress` as default layout R[write to console]: Using `stress` as default layout R[write to console]: Using `stress` as default layout R[write to console]: Using `stress` as default layout R[write to console]: Using `stress` as default layout .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/01/13/(%EC%97%B0%EA%B5%AC)-HST-example-3.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/01/13/(%EC%97%B0%EA%B5%AC)-HST-example-3.html",
            "date": " • Jan 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "(연구) HST example 2 이거로하자",
            "content": "def show(fig): return HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False, config=dict({&#39;scrollZoom&#39;:False}))) . import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(1,n+1) r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.35 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=np.array(cm.rainbow((ang+pi)/2/pi)) . gs1=GraphSignal(V,W,f1) gs2=GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0. 0.08727822 0.08664285 ... 0.08397182 0.08664285 0.08727822] [0.08727822 0. 0.08727822 ... 0.07728965 0.08397182 0.08664285] [0.08664285 0.08727822 0. ... 0.06514026 0.07728965 0.08397182] ... [0.08397182 0.07728965 0.06514026 ... 0. 0.08727822 0.08664285] [0.08664285 0.08397182 0.07728965 ... 0.08727822 0. 0.08727822] [0.08727822 0.08664285 0.08397182 ... 0.08664285 0.08727822 0. ]] . &lt;matplotlib.image.AxesImage at 0x7fe064bf13d0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7fe061b573a0&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7fe061ab5fd0&gt; . Snow distance . hs1=HeavysnowTransform(gs1) hs2=HeavysnowTransform(gs2) . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb3/anaconda3/envs/py39r40/lib/python3.9/site-packages/sklearn/decomposition/_pca.py:501: RuntimeWarning: invalid value encountered in true_divide . p=plt.figure(figsize=(12,4), dpi=500) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) #p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional #p.savefig(&#39;temp.pdf&#39;,transparent=True) . &lt;mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7fe083572910&gt; . import plotly.graph_objects as go from IPython.display import HTML import scipy.ndimage _col = np.flipud(col) # reverse _vx = np.r_[vx,vx[:1]] _vy = np.r_[vy,vy[:1]] _filter = np.array([1.0,1.0])*0.001 _z0=hs2.snowygrounds[:,0] _z1=hs2.snowygrounds[:,2000] _z2=hs2.snowygrounds[:,4000] _z3=hs2.snowygrounds[:,6000] _z4=hs2.snowygrounds[:,8000] _z5=hs2.snowygrounds[:,10000] _z6=hs2.snowygrounds[:,12000] _z7=hs2.snowygrounds[:,100000] . p2=plt.figure(figsize=(12,4), dpi=500) # Make figure object # 2. ax1=p2.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p2.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p2.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p2.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p2.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p2.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p2.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p2.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z0/np.max(_z0) bottom = np.zeros_like(top) width=depth=0.05 ax1.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax1.view_init(azim=45) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-1.5,1.5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z1/np.max(_z1) bottom = np.zeros_like(top) width=depth=0.05 ax2.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax2.view_init(azim=45) ax2.set_xlim(-1,1) ax2.set_ylim(-1,1) ax2.set_zlim(-1.5,1.5) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z2/np.max(_z2) bottom = np.zeros_like(top) width=depth=0.05 ax3.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax3.view_init(azim=45) ax3.set_xlim(-1,1) ax3.set_ylim(-1,1) ax3.set_zlim(-1.5,1.5) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z3/np.max(_z3) bottom = np.zeros_like(top) width=depth=0.05 ax4.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax4.view_init(azim=45) ax4.set_xlim(-1,1) ax4.set_ylim(-1,1) ax4.set_zlim(-1.5,1.5) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z3/np.max(_z3) bottom = np.zeros_like(top) width=depth=0.05 ax4.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax4.view_init(azim=45) ax4.set_xlim(-1,1) ax4.set_ylim(-1,1) ax4.set_zlim(-1.5,1.5) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z4/np.max(_z4) bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax5.view_init(azim=45) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-1.5,1.5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z5/np.max(_z5) bottom = np.zeros_like(top) width=depth=0.05 ax6.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax6.view_init(azim=45) ax6.set_xlim(-1,1) ax6.set_ylim(-1,1) ax6.set_zlim(-1.5,1.5) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z6/np.max(_z6) bottom = np.zeros_like(top) width=depth=0.05 ax7.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax7.view_init(azim=45) ax7.set_xlim(-1,1) ax7.set_ylim(-1,1) ax7.set_zlim(-1.5,1.5) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = _z7/np.max(_z7) bottom = np.zeros_like(top) width=depth=0.05 ax8.bar3d(vy, vx, bottom, width, depth, top, shade=False,color=_col) ax8.view_init(azim=45) ax8.set_xlim(-1,1) ax8.set_ylim(-1,1) ax8.set_zlim(-1.5,1.5) p2.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional p2.savefig(&#39;2022-01-11-snowygrounds.pdf&#39;,transparent=True) . # from IPython.display import HTML # import scipy.ndimage # _contours = { # &quot;x&quot;: {&quot;show&quot;: True, &quot;start&quot;: -1, &quot;end&quot;: 1, &quot;size&quot;: 0.1}, # &quot;y&quot;: {&quot;show&quot;: True, &quot;start&quot;: -1, &quot;end&quot;: 1, &quot;size&quot;: 0.1} # } # _vx = np.r_[vx,vx[:1]] # _vy = np.r_[vy,vy[:1]] # _mode =&#39;wrap&#39; # _filter = np.array([1.0,1.0])*0.001 # _z0=scipy.ndimage.filters.gaussian_filter(np.diag(np.r_[hs2.snowygrounds[:,0],hs2.snowygrounds[:1,0]])+0, _filter, mode=_mode) # _z1=scipy.ndimage.filters.gaussian_filter(np.diag(np.r_[hs2.snowygrounds[:,1000],hs2.snowygrounds[:1,1000]])+0,_filter, mode=_mode) # _z2=scipy.ndimage.filters.gaussian_filter(np.diag(np.r_[hs2.snowygrounds[:,5000],hs2.snowygrounds[:1,5000]])+0,_filter, mode=_mode) # _z3=scipy.ndimage.filters.gaussian_filter(np.diag(np.r_[hs2.snowygrounds[:,50000],hs2.snowygrounds[:1,50000]])+0,_filter, mode=_mode) # _z4=scipy.ndimage.filters.gaussian_filter(np.diag(np.r_[hs2.snowygrounds[:,100000],hs2.snowygrounds[:1,100000]])+0,_filter, mode=_mode) # _colorscale=[ # [0, &#39;rgb(0, 0, 0)&#39;], # [1./10000, &#39;rgb(50, 50, 50)&#39;], # [1./1000, &#39;rgb(100, 100, 100)&#39;], # [1./100, &#39;rgb(150, 150, 150)&#39;], # [1./10, &#39;rgb(200, 200, 200)&#39;], # [1., &#39;rgb(255, 255, 255)&#39;], # ] # _colorbar= dict( # tick0= 0, # tickmode= &#39;array&#39;, # tickvals= [-5, 0, 5, 10] # ) # #fig = go.Figure(data=[go.Surface(x = _vx, y = _vy, z = _z1, colorscale=_colorscale, colorbar=_colorbar,showscale=False)]) # fig = go.Figure(data=[go.Surface(x = _vx, y = _vy, z = _z0, colorscale=_colorscale, colorbar=_colorbar,showscale=False), # go.Surface(x = _vx, y = _vy, z = _z1+200, colorscale=_colorscale, colorbar=_colorbar,showscale=False), # go.Surface(x = _vx, y = _vy, z = _z2+400, colorscale=_colorscale, colorbar=_colorbar,showscale=False), # go.Surface(x = _vx, y = _vy, z = _z3+600, colorscale=_colorscale, colorbar=_colorbar,showscale=False), # go.Surface(x = _vx, y = _vy, z = _z4+800, colorscale=_colorscale, colorbar=_colorbar,showscale=False), # ]) # fig.update_layout(width=1000,height=1000, scene_camera_eye=dict(x=-2, y=2, z=1)) # show(fig) # #fig.write_image(&#39;2022-01-11-snow.pdf&#39;,scale=20) . brk=15000 p, ((ax1,ax2,ax3,ax4),(ax5,ax6,ax7,ax8)) = plt.subplots(2,4) ax1.imshow(hs1.eucliddistance,origin=&#39;lower&#39;) ax2.imshow(diffusion_distance,origin=&#39;lower&#39;) ax3.imshow(l2distance(hs1.snowygrounds[:,0:brk]),origin=&#39;lower&#39;) ax4.imshow(l2distance(hs1.snowygrounds[:,brk:]),origin=&#39;lower&#39;) ax5.imshow(hs2.eucliddistance,origin=&#39;lower&#39;) ax6.imshow(diffusion_distance,origin=&#39;lower&#39;) ax7.imshow(l2distance(hs2.snowygrounds[:,0:brk]),origin=&#39;lower&#39;) ax8.imshow(l2distance(hs2.snowygrounds[:,brk:]),origin=&#39;lower&#39;) p.tight_layout() #rect : tuple (left, bottom, right, top), optional #p.savefig(&quot;temp.pdf&quot;,tranparent=True) . hs1_eucliddistance=hs1.eucliddistance diffusion_distance=diffusion_distance hs1_sigma1=l2distance(hs1.snowygrounds[:,:brk]) hs1_sigma2=l2distance(hs1.snowygrounds[:,brk:]) hs2_eucliddistance=hs2.eucliddistance diffusion_distance=diffusion_distance hs2_sigma1=l2distance(hs2.snowygrounds[:,:brk]) hs2_sigma2=l2distance(hs2.snowygrounds[:,brk:]) . %R -i hs1_eucliddistance,diffusion_distance,hs1_sigma1,hs1_sigma2,hs2_eucliddistance,hs2_sigma1,hs2_sigma2 . %%R library(tidyverse) library(gridExtra) library(latex2exp) n=60 grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long_caseA&lt;-as_tibble(cbind(grid,as.vector(diffusion_distance)));names(W_Graph_long_caseA)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long_caseA&lt;-as_tibble(cbind(grid,as.vector(hs1_eucliddistance)));names(W_Euclid_long_caseA)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST1_long_caseA&lt;-as_tibble(cbind(grid,as.vector(hs1_sigma1)));names(W_HST1_long_caseA)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST2_long_caseA&lt;-as_tibble(cbind(grid,as.vector(hs1_sigma2)));names(W_HST2_long_caseA)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Graph_long_caseB&lt;-as_tibble(cbind(grid,as.vector(diffusion_distance)));names(W_Graph_long_caseB)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long_caseB&lt;-as_tibble(cbind(grid,as.vector(hs2_eucliddistance)));names(W_Euclid_long_caseB)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST1_long_caseB&lt;-as_tibble(cbind(grid,as.vector(hs2_sigma1)));names(W_HST1_long_caseB)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST2_long_caseB&lt;-as_tibble(cbind(grid,as.vector(hs2_sigma2)));names(W_HST2_long_caseB)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . %%R -w 2000 -h 1000 -r 250 fig1&lt;-ggplot()+geom_tile(data=W_Euclid_long_caseA,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig2&lt;-ggplot()+geom_tile(data=W_Graph_long_caseA,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig3&lt;-ggplot()+geom_tile(data=W_HST1_long_caseA,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig4&lt;-ggplot()+geom_tile(data=W_HST2_long_caseA,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig5&lt;-ggplot()+geom_tile(data=W_Euclid_long_caseB,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig6&lt;-ggplot()+geom_tile(data=W_Graph_long_caseB,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig7&lt;-ggplot()+geom_tile(data=W_HST1_long_caseB,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig8&lt;-ggplot()+geom_tile(data=W_HST2_long_caseB,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) # fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() # fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() # fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig=grid.arrange(fig1,fig2,fig3,fig4,fig5,fig6,fig7,fig8,ncol=4,nrow=2) fig #ggsave(plot=fig,&quot;temp.pdf&quot;,width=10,height=5) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/01/11/(%EC%97%B0%EA%B5%AC)-HST-example-2-%EC%9D%B4%EA%B1%B0%EB%A1%9C%ED%95%98%EC%9E%90.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2022/01/11/(%EC%97%B0%EA%B5%AC)-HST-example-2-%EC%9D%B4%EA%B1%B0%EB%A1%9C%ED%95%98%EC%9E%90.html",
            "date": " • Jan 11, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "(연구) HST example 3",
            "content": "&#49892;&#54744;&#54872;&#44221; . !conda env list . # conda environments: # base /home/cgb2/anaconda3 py39r40 * /home/cgb2/anaconda3/envs/py39r40 . import . def show(fig): return HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False, config=dict({&#39;scrollZoom&#39;:False}))) . import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow plt.style.use(&#39;ggplot&#39;) . load data . n=23 f=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Worldwide)/1000000 V=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Film) W=np.array(pd.read_csv(&quot;2021-08-15-MCU-weights.csv&quot;,index_col=0))-np.eye(n,n) . HST . gs=GraphSignal(V,W,f) hst=HeavysnowTransform(gs) hst.snow(tau=80000,b=1) . HST (tau= 80000, b=1) 80000/80000 HST completed and all history is recorded. . def choose_theta(maxtheta=300): y=[] x=np.arange(start=0.01,stop=maxtheta,step=0.1) for i in range(len(x)): hst.adjustingtheta(x[i]) gs=GraphSignal(V,hst.snowweight,f) spa=SpectralAnalysis(gs) spa.graphFouriertransform() spa.decompose() y.append(sum(abs(spa.lamb)&lt;0.001)) plt.plot(x,y) choose_theta() . /home/cgb2/Dropbox/01_yechan/_notebooks/heavysnow.py:11: RuntimeWarning: invalid value encountered in true_divide . hst.adjustingtheta(300) . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f7515f99550&gt; . _type=[&#39;solo&#39;]*5+[&#39;multi&#39;]+[&#39;solo&#39;]*4+[&#39;multi&#39;]+[&#39;solo&#39;]+[&#39;multi&#39;]+[&#39;solo&#39;]*5+[&#39;multi&#39;]+[&#39;solo&#39;]*2+[&#39;multi&#39;]+[&#39;solo&#39;] df=pd.DataFrame({&#39;V&#39;:hst.V,&#39;f&#39;:hst.f,&#39;divlink&#39;:hst.graphweight.sum(axis=1), &#39;conlink&#39;:hst.graphweight.sum(axis=0),&#39;type&#39;:_type}) df . V f divlink conlink type . 0 Iron Man | 585.174222 | 4.000000 | 2.515815 | solo | . 1 The Incredible Hulk | 263.427551 | 1.000000 | 0.294608 | solo | . 2 Iron Man 2 | 623.933331 | 4.153846 | 3.107363 | solo | . 3 Thor | 449.326618 | 2.562500 | 2.241890 | solo | . 4 Captain America: The First Avenger | 370.569774 | 1.750000 | 0.948269 | solo | . 5 The Avengers | 1518.812988 | 4.647059 | 4.332114 | multi | . 6 Iron Man 3 | 1214.811252 | 3.200000 | 1.690351 | solo | . 7 Thor: The Dark World | 644.571402 | 2.411765 | 2.147921 | solo | . 8 Captain America: The Winter Soldier | 714.264267 | 3.266667 | 2.455757 | solo | . 9 Guardians of the Galaxy | 773.328629 | 1.631579 | 1.212075 | solo | . 10 Avengers: Age of Ultron | 1405.403694 | 3.952381 | 4.428065 | multi | . 11 Ant-man | 519.311965 | 1.750000 | 1.096071 | solo | . 12 Captain America: Civil War | 1153.304495 | 3.500000 | 4.048106 | multi | . 13 Doctor Strange | 677.718395 | 0.857143 | 0.182711 | solo | . 14 Guardians of the Galaxy Vol 2 | 863.756051 | 1.190476 | 0.898435 | solo | . 15 Spider-man: Homecoming | 880.166924 | 1.913043 | 2.416100 | solo | . 16 Thor: Ragnarok | 853.977126 | 2.285714 | 1.682512 | solo | . 17 Black Panther | 1346.913161 | 1.142857 | 0.582001 | solo | . 18 Avengers: Infinity War | 2048.359754 | 3.589744 | 7.545470 | multi | . 19 Ant-man and the Wasp | 622.674139 | 1.000000 | 0.875455 | solo | . 20 Captain Marvel | 1128.274794 | 1.333333 | 0.926001 | solo | . 21 Avengers: Endgame | 2796.274401 | 3.120000 | 8.935337 | multi | . 22 Spider-man: Far From Home | 1131.026557 | 1.937500 | 1.633182 | solo | . import plotly.graph_objects as go from IPython.display import HTML import scipy.ndimage _contours = { &quot;x&quot;: {&quot;show&quot;: True, &quot;start&quot;: -1, &quot;end&quot;: 1, &quot;size&quot;: 0.2}, &quot;y&quot;: {&quot;show&quot;: True, &quot;start&quot;: -1, &quot;end&quot;: 1, &quot;size&quot;: 0.2} } _mode =&#39;wrap&#39; _filter = np.array([1.0,1.0])*1 #_z0=scipy.ndimage.filters.gaussian_filter(np.diag(np.r_[hs2.snowygrounds[:,0],hs2.snowygrounds[:1,0]])+100, _filter-0.2, mode=_mode) _z1=scipy.ndimage.filters.gaussian_filter(np.diag(hst.snowygrounds[:,4000])+0,_filter, mode=_mode) _z2=scipy.ndimage.filters.gaussian_filter(np.diag(hst.snowygrounds[:,6000])+5000,_filter+0.3, mode=_mode) _z3=scipy.ndimage.filters.gaussian_filter(np.diag(hst.snowygrounds[:,8000])+50000,_filter+0.8, mode=_mode) _colorscale=[ [0, &#39;rgb(0, 0, 0)&#39;], [1./10000, &#39;rgb(50, 50, 50)&#39;], [1./1000, &#39;rgb(100, 100, 100)&#39;], [1./100, &#39;rgb(150, 150, 150)&#39;], [1./10, &#39;rgb(200, 200, 200)&#39;], [1., &#39;rgb(255, 255, 255)&#39;], ] _colorbar= dict( tick0= 0, tickmode= &#39;array&#39;, tickvals= [-5, 0, 5, 10] ) fig = go.Figure(data=[go.Surface(x = _vx, y = _vy, z = _z1, colorscale=_colorscale, colorbar=_colorbar,showscale=False), go.Surface(x = _vx, y = _vy, z = _z2, colorscale=_colorscale, colorbar=_colorbar,showscale=False), go.Surface(x = _vx, y = _vy, z = _z3, colorscale=_colorscale, colorbar=_colorbar,showscale=False), ]) fig.update_layout(width=1000,height=1000, scene_camera_eye=dict(x=2, y=1, z=0.5)) . NameError Traceback (most recent call last) &lt;ipython-input-322-dab8a8fd3a2a&gt; in &lt;module&gt; 32 33 &gt; 34 fig = go.Figure(data=[go.Surface(x = _vx, y = _vy, z = _z1, colorscale=_colorscale, colorbar=_colorbar,showscale=False), 35 go.Surface(x = _vx, y = _vy, z = _z2, colorscale=_colorscale, colorbar=_colorbar,showscale=False), 36 go.Surface(x = _vx, y = _vy, z = _z3, colorscale=_colorscale, colorbar=_colorbar,showscale=False), NameError: name &#39;_vx&#39; is not defined . import plotly.graph_objects as go _colorscale=[ [0, &#39;rgb(0, 0, 0)&#39;], [1./10000, &#39;rgb(50, 50, 50)&#39;], [1./1000, &#39;rgb(100, 100, 100)&#39;], [1./100, &#39;rgb(150, 150, 150)&#39;], [1./10, &#39;rgb(200, 200, 200)&#39;], [1., &#39;rgb(255, 255, 255)&#39;], ] _colorbar= dict( tick0= 0, tickmode= &#39;array&#39;, tickvals= [-5, 0, 5, 10]) _mode =&#39;wrap&#39; _filter = np.array([1,1])*0.5 _z1 = np.diag(hst.snowygrounds[:,0])+0 _z2 = np.diag(hst.snowygrounds[:,20000])+5000 _z3 = np.diag(hst.snowygrounds[:,40000])+10000 _z4 = np.diag(hst.snowygrounds[:,60000])+15000 _z5 = np.diag(hst.snowygrounds[:,80000])+20000 # _z1=scipy.ndimage.filters.gaussian_filter(_z1, _filter, mode=_mode) # _z2=scipy.ndimage.filters.gaussian_filter(_z2, _filter, mode=_mode) # _z3=scipy.ndimage.filters.gaussian_filter(_z3, _filter, mode=_mode) # _z4=scipy.ndimage.filters.gaussian_filter(_z4, _filter, mode=_mode) fig = go.Figure([go.Surface(x = df.conlink, y = df.divlink, z = _z1, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z2, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z3, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z4, colorscale=_colorscale, colorbar=_colorbar, showscale=False), go.Surface(x = df.conlink, y = df.divlink, z = _z5, colorscale=_colorscale, colorbar=_colorbar, showscale=False)]) fig.update_layout(width=1000,height=1000, scene_camera_eye=dict(x=-2, y=-2, z=0.05)) show(fig) fig.write_image(&#39;2022-01-13-snow.pdf&#39;) . . . R &#54872;&#44221;&#51004;&#47196;.. . import rpy2 %load_ext rpy2.ipython . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . n=hst.n V=hst.V f=hst.f WEuclid= hst.euclidweight Wgraph= (hst.graphweight+hst.graphweight.T)/2 Whst= hst.snowweight W= hst.graphweight . %R -i n %R -i V %R -i f %R -i WEuclid %R -i Wgraph %R -i Whst %R -i W . &#50976;&#53364;&#47532;&#46300;&#50752; &#44536;&#47000;&#54532;&#46020;&#47700;&#51064;&#51032; &#51221;&#48372;&#47484; &#54540;&#46991;. . %%R library(plotly) fig &lt;- plot_ly(z = ~volcano) fig &lt;- fig %&gt;% add_surface() fig . R[write to console]: Error in viewer(index_html) : &#39;browser&#39; must be a non-empty character string . RRuntimeError Traceback (most recent call last) &lt;ipython-input-162-2478e7b8eac6&gt; in &lt;module&gt; -&gt; 1 get_ipython().run_cell_magic(&#39;R&#39;, &#39;&#39;, &#39;library(plotly) nfig &lt;- plot_ly(z = ~volcano) nfig &lt;- fig %&gt;% add_surface() n nfig n&#39;) ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/IPython/core/interactiveshell.py in run_cell_magic(self, magic_name, line, cell) 2417 with self.builtin_trap: 2418 args = (magic_arg_s, cell) -&gt; 2419 result = fn(*args, **kwargs) 2420 return result 2421 ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/decorator.py in fun(*args, **kw) 230 if not kwsyntax: 231 args, kw = fix(args, kw, sig) --&gt; 232 return caller(func, *(extras + args), **kw) 233 fun.__name__ = func.__name__ 234 fun.__doc__ = func.__doc__ ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&#39;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/rpy2/ipython/rmagic.py in R(self, line, cell, local_ns) 773 &#39;consolewrite_print&#39;, 774 self.write_console_regular)) --&gt; 775 cell_display(result, args) 776 text_output += self.flush() 777 ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/rpy2/ipython/rmagic.py in CELL_DISPLAY_DEFAULT(res, args) 108 109 def CELL_DISPLAY_DEFAULT(res, args): --&gt; 110 return ro.r.show(res) 111 112 ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/rpy2/robjects/functions.py in __call__(self, *args, **kwargs) 196 v = kwargs.pop(k) 197 kwargs[r_k] = v --&gt; 198 return (super(SignatureTranslatedFunction, self) 199 .__call__(*args, **kwargs)) 200 ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/rpy2/robjects/functions.py in __call__(self, *args, **kwargs) 123 else: 124 new_kwargs[k] = conversion.py2rpy(v) --&gt; 125 res = super(Function, self).__call__(*new_args, **new_kwargs) 126 res = conversion.rpy2py(res) 127 return res ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/rpy2/rinterface_lib/conversion.py in _(*args, **kwargs) 43 def _cdata_res_to_rinterface(function): 44 def _(*args, **kwargs): &gt; 45 cdata = function(*args, **kwargs) 46 # TODO: test cdata is of the expected CType 47 return _cdata_to_rinterface(cdata) ~/anaconda3/envs/py39r40/lib/python3.9/site-packages/rpy2/rinterface.py in __call__(self, *args, **kwargs) 678 ) 679 if error_occured[0]: --&gt; 680 raise embedded.RRuntimeError(_rinterface._geterrmessage()) 681 return res 682 RRuntimeError: Error in viewer(index_html) : &#39;browser&#39; must be a non-empty character string . %%R source(&#39;heavysnow.R&#39;) df&lt;-tibble(V) df$f&lt;-as.vector(f) df$divlink&lt;-0 df$conlink&lt;-0 df$link&lt;-0 for(i in 1:23){ df$divlink[i]&lt;-sum(W[i,]) df$conlink[i]&lt;-sum(W[,i]) df$link[i]&lt;-(sum(W[i,])+sum(W[,i]))/2 } df$type&lt;-rep(&#39;solo&#39;,23) df[V %in% c(&quot;The Avengers&quot; ,&quot;Avengers: Age of Ultron&quot;,&quot;Captain America: Civil War&quot;,&quot;Avengers: Infinity War&quot;,&quot;Avengers: Endgame&quot;),&#39;type&#39;]=&#39;multi&#39; df . # A tibble: 23 × 6 V f divlink conlink link type &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 Iron Man 585. 4 2.52 3.26 solo 2 The Incredible Hulk 263. 1 0.295 0.647 solo 3 Iron Man 2 624. 4.15 3.11 3.63 solo 4 Thor 449. 2.56 2.24 2.40 solo 5 Captain America: The First Avenger 371. 1.75 0.948 1.35 solo 6 The Avengers 1519. 4.65 4.33 4.49 multi 7 Iron Man 3 1215. 3.2 1.69 2.45 solo 8 Thor: The Dark World 645. 2.41 2.15 2.28 solo 9 Captain America: The Winter Soldier 714. 3.27 2.46 2.86 solo 10 Guardians of the Galaxy 773. 1.63 1.21 1.42 solo # … with 13 more rows . - geom_coutour_filled() 복습 . %%R df_ = tibble(x=c(1,1,2,2),y=c(1,2,1,2),z=c(0,1,2,3)) ## 데이터는 항상 격자모양이어야함 v &lt;- ggplot(df_, aes(x, y, z = z)) v + geom_contour_filled() . - df의 데이터프레임 변형하여 플랏이 가능하도록 만들자. . %%R df$divlink = round(df$divlink,1) df$conlink = round(df$conlink,1) div_ranges_= range(df$divlink) con_ranges_= range(df$conlink) df_=expand.grid(seq(div_ranges_[1]-0.1,div_ranges_[2]+0.1,by=0.1),seq(con_ranges_[1]-0.1,con_ranges_[2]+0.1,by=0.1)) names(df_)=c(&#39;divlink&#39;,&#39;conlink&#39;) df_$f=0 df_$V=NA df_$link=NA df_$type=NA df_=tibble(V=df_$V,f=df_$f,divlink=df_$divlink,conlink=df_$conlink,link=df_$link,type=df_$type) for(i in 1:23){ df_[abs(df_$divlink - df[i,]$divlink)&lt;0.1 &amp; abs(df_$conlink - df[i,]$conlink)&lt;0.1,] &lt;- df[i,] } df_ . # A tibble: 3,600 × 6 V f divlink conlink link type &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 &lt;NA&gt; 0 0.8 0.1 NA &lt;NA&gt; 2 &lt;NA&gt; 0 0.9 0.1 NA &lt;NA&gt; 3 &lt;NA&gt; 0 1 0.1 NA &lt;NA&gt; 4 &lt;NA&gt; 0 1.1 0.1 NA &lt;NA&gt; 5 &lt;NA&gt; 0 1.2 0.1 NA &lt;NA&gt; 6 &lt;NA&gt; 0 1.3 0.1 NA &lt;NA&gt; 7 &lt;NA&gt; 0 1.4 0.1 NA &lt;NA&gt; 8 &lt;NA&gt; 0 1.5 0.1 NA &lt;NA&gt; 9 &lt;NA&gt; 0 1.6 0.1 NA &lt;NA&gt; 10 &lt;NA&gt; 0 1.7 0.1 NA &lt;NA&gt; # … with 3,590 more rows . %%R p1&lt;-ggplot(df_, aes(x=conlink, y=divlink,z=f)) #geom_point(aes(x=conlink,y=divlink,size=f**2,shape=type),col=&#39;hotpink1&#39;,stroke=3)+ #scale_size(range=c(2,30))+ #scale_alpha_manual(values=c(1,0.6))+ #scale_shape_manual(values=c(11,1))+ #theme_light()+ #geom_text_repel(aes(x=conlink,y=divlink,label=V),col=&quot;gray40&quot;)+ #geom_density2d(aes(x=conlink,y=divlink,fill=tatf,color=f)),+ #ylab(&quot;Out-degree&quot;)+xlab(&quot;In-degree&quot;)+ #ggtitle(&quot;&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ #theme(axis.title.x=element_text(face=4,size=rel(1)))+theme(axis.title.y=element_text(face=4,size=rel(1))) #theme(legend.position = &quot;none&quot;)+ show(p1) ggsave(plot=p1,&quot;./2021-12-10-p1.pdf&quot;,width=15,height=10) . %%R df . # A tibble: 23 × 6 V f divlink conlink link type &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 Iron Man 585. 4 2.52 3.26 solo 2 The Incredible Hulk 263. 1 0.29 0.647 solo 3 Iron Man 2 624. 4.15 3.11 3.63 solo 4 Thor 449. 2.56 2.24 2.40 solo 5 Captain America: The First Avenger 371. 1.75 0.95 1.35 solo 6 The Avengers 1519. 4.65 4.33 4.49 multi 7 Iron Man 3 1215. 3.2 1.69 2.45 solo 8 Thor: The Dark World 645. 2.41 2.15 2.28 solo 9 Captain America: The Winter Soldier 714. 3.27 2.46 2.86 solo 10 Guardians of the Galaxy 773. 1.63 1.21 1.42 solo # … with 13 more rows . gfft &#49688;&#54665;&#54616;&#44256; &#44208;&#44284;&#47484; &#51200;&#51109;&#54632;. . %%R g1&lt;-gfft(f,WEuclid) g2&lt;-gfft(f,Wgraph) g3&lt;-gfft(f,Whst) . &#50500;&#51060;&#44176;&#54540;&#46991; . %%R library(gridExtra) e1&lt;-eigenplot(g1)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e2&lt;-eigenplot(g2)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e3&lt;-eigenplot(g3)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) s1&lt;-specplot(g1) s2&lt;-specplot(g2) s3&lt;-specplot(g3) p2&lt;-grid.arrange(e1,e2,e3,s1,s2,s3,nrow=2) ggsave(plot=p2,&quot;./2021-12-10-p2.pdf&quot;,width=5,height=3) . &#48516;&#54644; . %%R d1&lt;-decompose(f,WEuclid,V=V) # 0, 35000, 60000, 80000 d2&lt;-decompose(f,Wgraph,V=V) # 0, 35000, 60000, 80000 d3&lt;-decompose(f,Whst,V=V) # 0, 35000, 60000, 80000 d1$case&lt;-&quot;Euclid&quot; d2$case&lt;-&quot;Graph&quot; d3$case&lt;-&quot;HST&quot; .df2 &lt;-rbind(d1,d2,d3) .df2 %&gt;% group_by(case,eigenvectorindex) #%&gt;% mutate(textsize= 10*(abs(fhat)&gt;70)) df2=merge(df, .df2 %&gt;% group_by(case,eigenvectorindex) %&gt;% mutate(textsize= 10*(abs(fhat)&gt;70))) %&gt;% as_tibble df2 . %%R -r 150 -w 1000 -h 5000 p3&lt;-ggplot(data=filter(df2,eigenvectorindex %in% 1:23, case==&#39;HST&#39;))+ geom_col(aes(x=Vindex,y=fhat,fill=fhat&gt;0),width=0.7)+ geom_text_repel(aes(x=Vindex,y=fhat,label=V,size=textsize),col=1,fontface=4,alpha=0.8,segment.size=0.2,segment.color=&quot;gray60&quot;,min.segment.length=5,hjust=0.1)+ scale_radius(range = c(0,1.8))+ guides(size=FALSE)+ facet_wrap(&quot;eigenvectorindex&quot;,ncol=1)+ geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+ theme(axis.text.x=element_text(angle=85,hjust=1,vjust=1,face=4,size=rel(0.7),colour=&quot;gray60&quot;))+ theme_light()+ theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) show(p3) ggsave(plot=p3,&quot;./2021-12-10-p3.pdf&quot;,width=10,height=15) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/12/10/(%EC%97%B0%EA%B5%AC)-HST-example-3.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/12/10/(%EC%97%B0%EA%B5%AC)-HST-example-3.html",
            "date": " • Dec 10, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "(연구) HST example 3 파이썬으로 변경",
            "content": "import . #!rm -rf ~/.local/share/Trash/files/* import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib #matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 from adjustText import adjust_text %load_ext rpy2.ipython %run heavysnow . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . load data . n=23 f=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Worldwide)/1000000 V=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Film) W=np.array(pd.read_csv(&quot;2021-08-15-MCU-weights.csv&quot;,index_col=0))-np.eye(n,n) . scatter plot . df=pd.DataFrame({&#39;V&#39;:V,&#39;f&#39;:f,&#39;in_degree&#39;:[sum(W[:,i]) for i in range(n)],&#39;out_degree&#39;:[sum(W[i,:]) for i in range(n)]}) df.head() . V f in_degree out_degree . 0 Iron Man | 585.174222 | 2.515815 | 4.000000 | . 1 The Incredible Hulk | 263.427551 | 0.294608 | 1.000000 | . 2 Iron Man 2 | 623.933331 | 3.107363 | 4.153846 | . 3 Thor | 449.326618 | 2.241890 | 2.562500 | . 4 Captain America: The First Avenger | 370.569774 | 0.948269 | 1.750000 | . df[&#39;type&#39;]=&#39;SOLO/NOT-CORE&#39; . df.loc[map(lambda x: (&quot;Iron Man&quot; in x) or (&quot;Thor&quot; in x) or (&quot;Captain America&quot; in x),df1.V),&#39;type&#39;]=&#39;SOLO/CORE&#39; df.loc[map(lambda x: (&quot;Avengers&quot; in x) or (&quot;Civil War&quot; in x),df1.V),&#39;type&#39;]=&#39;MULTI&#39; . df . V f in_degree out_degree type . 0 Iron Man | 585.174222 | 2.515815 | 4.000000 | SOLO/CORE | . 1 The Incredible Hulk | 263.427551 | 0.294608 | 1.000000 | SOLO/NOT-CORE | . 2 Iron Man 2 | 623.933331 | 3.107363 | 4.153846 | SOLO/CORE | . 3 Thor | 449.326618 | 2.241890 | 2.562500 | SOLO/CORE | . 4 Captain America: The First Avenger | 370.569774 | 0.948269 | 1.750000 | SOLO/CORE | . 5 The Avengers | 1518.812988 | 4.332114 | 4.647059 | MULTI | . 6 Iron Man 3 | 1214.811252 | 1.690351 | 3.200000 | SOLO/CORE | . 7 Thor: The Dark World | 644.571402 | 2.147921 | 2.411765 | SOLO/CORE | . 8 Captain America: The Winter Soldier | 714.264267 | 2.455757 | 3.266667 | SOLO/CORE | . 9 Guardians of the Galaxy | 773.328629 | 1.212075 | 1.631579 | SOLO/NOT-CORE | . 10 Avengers: Age of Ultron | 1405.403694 | 4.428065 | 3.952381 | MULTI | . 11 Ant-man | 519.311965 | 1.096071 | 1.750000 | SOLO/NOT-CORE | . 12 Captain America: Civil War | 1153.304495 | 4.048106 | 3.500000 | MULTI | . 13 Doctor Strange | 677.718395 | 0.182711 | 0.857143 | SOLO/NOT-CORE | . 14 Guardians of the Galaxy Vol 2 | 863.756051 | 0.898435 | 1.190476 | SOLO/NOT-CORE | . 15 Spider-man: Homecoming | 880.166924 | 2.416100 | 1.913043 | SOLO/NOT-CORE | . 16 Thor: Ragnarok | 853.977126 | 1.682512 | 2.285714 | SOLO/CORE | . 17 Black Panther | 1346.913161 | 0.582001 | 1.142857 | SOLO/NOT-CORE | . 18 Avengers: Infinity War | 2048.359754 | 7.545470 | 3.589744 | MULTI | . 19 Ant-man and the Wasp | 622.674139 | 0.875455 | 1.000000 | SOLO/NOT-CORE | . 20 Captain Marvel | 1128.274794 | 0.926001 | 1.333333 | SOLO/NOT-CORE | . 21 Avengers: Endgame | 2796.274401 | 8.935337 | 3.120000 | MULTI | . 22 Spider-man: Far From Home | 1131.026557 | 1.633182 | 1.937500 | SOLO/NOT-CORE | . fig = ggplot(df) a1= aes(x=&#39;in_degree&#39;,y=&#39;out_degree&#39;,size=&#39;f&#39;,color=&#39;type&#39;) a2= aes(x=&#39;in_degree&#39;,y=&#39;out_degree&#39;,label=&#39;V&#39;,color=&#39;type&#39;) point1= geom_point(a1) . p1=fig+point1 +xlab(&quot;In-degree&quot;)+ylab(&quot;Out-degree&quot;) +geom_text(a2)+theme_minimal() p1=p1.draw() p1.set_figheight(7) p1.set_figwidth(10) . adjust_text(p1.axes[0].texts,ax=p1.axes[0], arrowprops=dict(arrowstyle=&#39;-&#39;, color=&#39;gray&#39;)) . 500 . &lt;Figure size 432x288 with 0 Axes&gt; . p1 . HST . gs=GraphSignal(V,W,f) hst=HeavysnowTransform(gs) hst.snow(tau=20000,b=1) . HST (tau= 20000, b=1) 20000/20000 HST completed and all history is recorded. . plt.plot(hst.snowygrounds[:,0]) plt.plot(hst.snowygrounds[:,2000]) plt.plot(hst.snowygrounds[:,20000]) plt.plot(hst.snowygrounds[:,40000]) plt.plot(hst.snowygrounds[:,60000]) plt.plot(hst.snowygrounds[:,-1]) . IndexError Traceback (most recent call last) /tmp/ipykernel_2863525/3057445435.py in &lt;module&gt; 2 plt.plot(hst.snowygrounds[:,2000]) 3 plt.plot(hst.snowygrounds[:,20000]) -&gt; 4 plt.plot(hst.snowygrounds[:,40000]) 5 plt.plot(hst.snowygrounds[:,60000]) 6 plt.plot(hst.snowygrounds[:,-1]) IndexError: index 40000 is out of bounds for axis 1 with size 20001 . Spectral analysis . %run heavysnow gs=GraphSignal(V,hst.snowweight,f) spa=SpectralAnalysis(gs) spa.graphFouriertransform() spa.decompose() . def choose_theta(maxtheta=100): y=[] x=np.arange(start=0.01,stop=maxtheta,step=0.1) for i in range(len(x)): hst.adjustingtheta(x[i]) gs=GraphSignal(V,hst.snowweight,f) spa=SpectralAnalysis(gs) spa.graphFouriertransform() spa.decompose() y.append(sum(abs(spa.lamb)&lt;0.001)) plt.plot(x,y) choose_theta() . /home/cgb3/Dropbox/01_yechan/_notebooks/heavysnow.py:11: RuntimeWarning: invalid value encountered in true_divide . abs(spa.fbar) . array([ 113.82693976, 69.1874798 , 111.44376896, 120.73111873, 27.31894564, 28.72744563, 18.9015293 , 129.94958627, 23.58492009, 117.97292179, 44.70789371, 257.06854198, 389.82856746, 234.97154632, 296.21620356, 1134.27156442, 4.21826872, 1321.97934777, 212.13470331, 3727.64704919, 686.79172621, 1947.68808622, 2796.274401 ]) . hst.adjustingtheta(100) gs=GraphSignal(V,hst.snowweight,f) spa=SpectralAnalysis(gs) spa.graphFouriertransform() spa.decompose() plt.plot(spa.lamb,abs(spa.fbar),&#39;.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fb1bf0c2a30&gt;] . abs(spa.fbar) . array([ 113.82693976, 69.1874798 , 111.44376896, 120.73111873, 27.31894564, 28.72744563, 18.9015293 , 129.94958627, 23.58492009, 117.97292179, 44.70789371, 257.06854198, 389.82856746, 234.97154632, 296.21620356, 1134.27156442, 4.21826872, 1321.97934777, 212.13470331, 3727.64704919, 686.79172621, 1947.68808622, 2796.274401 ]) . fig, axs= plt.subplots(1,3) axs[0].imshow(hst.euclidweight) axs[1].imshow(hst.snowweight) axs[2].imshow(hst.graphweight) fig.set_figwidth(15) fig.set_figheight(10) fig.tight_layout() . _a = pd.DataFrame({&#39;lambda_i&#39;:spa.lamb}).reset_index().rename(columns={&#39;index&#39;:&#39;comp&#39;}) _b = pd.DataFrame(spa.components).stack().reset_index().rename(columns={&#39;level_0&#39;:&#39;Vindex&#39;,&#39;level_1&#39;:&#39;comp&#39;,0:&#39;fbar&#39;}) _ = pd.merge(_a,_b) . df2 =_.assign(comp=list(map(lambda x: spa.n-x, _.comp))).merge(pd.DataFrame({&#39;V&#39;:df.V,&#39;Vindex&#39;:range(spa.n),&#39;fill&#39;:df.type})) . df2 . comp lambda_i Vindex fbar V fill . 0 23 | 1.648869e+00 | 0 | -1.670024e-02 | Iron Man | SOLO/CORE | . 1 22 | 1.502045e+00 | 0 | -1.013031e-14 | Iron Man | SOLO/CORE | . 2 21 | 1.422011e+00 | 0 | 8.004475e-02 | Iron Man | SOLO/CORE | . 3 20 | 1.408156e+00 | 0 | 7.656253e-03 | Iron Man | SOLO/CORE | . 4 19 | 1.394609e+00 | 0 | -1.093432e-05 | Iron Man | SOLO/CORE | . ... ... | ... | ... | ... | ... | ... | . 524 5 | 1.182634e-03 | 22 | 0.000000e+00 | Spider-man: Far From Home | SOLO/NOT-CORE | . 525 4 | 1.351494e-05 | 22 | 0.000000e+00 | Spider-man: Far From Home | SOLO/NOT-CORE | . 526 3 | 5.897675e-17 | 22 | 0.000000e+00 | Spider-man: Far From Home | SOLO/NOT-CORE | . 527 2 | 2.975736e-17 | 22 | 1.131027e+03 | Spider-man: Far From Home | SOLO/NOT-CORE | . 528 1 | 0.000000e+00 | 22 | 0.000000e+00 | Spider-man: Far From Home | SOLO/NOT-CORE | . 529 rows × 6 columns . ggplot(df2)+facet_wrap(&#39;comp&#39;)+geom_col(aes(x=&#39;Vindex&#39;,y=&#39;fbar&#39;,fill=&#39;fill&#39;)) . &lt;ggplot: (8775108141575)&gt; . plt.plot(df2.query(&quot; V==&#39;Avengers: Infinity War&#39; &quot;)[&#39;fbar&#39;],&#39;.&#39;) df2.query(&quot; V==&#39;Avengers: Infinity War&#39; &quot;)[&#39;fbar&#39;].sum() . 2048.359754000001 . f . array([ 585.174222, 263.427551, 623.933331, 449.326618, 370.569774, 1518.812988, 1214.811252, 644.571402, 714.264267, 773.328629, 1405.403694, 519.311965, 1153.304495, 677.718395, 863.756051, 880.166924, 853.977126, 1346.913161, 2048.359754, 622.674139, 1128.274794, 2796.274401, 1131.026557]) . fig=ggplot(df2) facet=facet_wrap(&#39;comp&#39;,ncol=1) a1=aes(x=&#39;Vindex&#39;,y=&#39;fbar&#39;,fill=&#39;fill&#39;) a2=aes(x=&#39;Vindex&#39;,y=&#39;fbar&#39;,label=&#39;V&#39;) col=geom_col(a1,alpha=0.5) hline=geom_hline(yintercept=0,linetype=&#39;dashed&#39;,color=&#39;gray&#39;,size=0.3) p2=fig+facet +geom_col(a1) +geom_hline(yintercept=0,linetype=&#39;dashed&#39;,color=&#39;gray&#39;) +theme(figure_size=(20, 100)) +geom_text(a2) p2 . &lt;ggplot: (8775108740292)&gt; . &#50976;&#53364;&#47532;&#46300;&#50752; &#44536;&#47000;&#54532;&#46020;&#47700;&#51064;&#51032; &#51221;&#48372;&#47484; &#54540;&#46991;. . %R -i f . WW =hst.snowweight . %R -i WW . %%R degree&lt;-function(W){ diag(apply(W,1,sum)) } degree_rootinv&lt;-function(W){ d&lt;-apply(W,1,sum) drootinv&lt;-d drootinv[d&gt;0.01]&lt;-sqrt(1/d[d&gt;0.01]) diag(drootinv) } . %%R gfft&lt;-function(f,W){ n&lt;-length(f) D&lt;-degree(W) D_rootinv&lt;-degree_rootinv(W) L&lt;-D-W L_tilde&lt;-D_rootinv%*%L%*%D_rootinv svdrslt&lt;-svd(L_tilde) λ&lt;-svdrslt$d Λ&lt;-diag(λ) U&lt;-svdrslt$u; V&lt;-svdrslt$v; Ψ&lt;-U ## reconstruction: L_tilde &lt;- U%*%Lamb*t(V) or L_tilde &lt;- Psi%*%Lamb*t(Psi) fbar&lt;-as.vector(t(Ψ)%*%f) ## fhat is Fourier Transform of f. list(λ=λ,Ψ=Ψ,fbar=fbar) } . %%R Psi=gfft(f,WW)$Ψ lamb=gfft(f,WW)$λ fbar=gfft(f,WW)$fbar . %R -o Psi %R -o lamb %R -o fbar . %%R A=rbind(c(1,2,4,5),c(2,3,1,0),c(5,4,0,2),c(2,0,0,1)) svd(L_tilde) . $d [1] 2.000000e+00 2.000000e+00 2.220446e-16 1.251279e-71 2.072649e-87 [6] 3.094230e-204 3.094230e-204 0.000000e+00 0.000000e+00 0.000000e+00 [11] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [16] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [21] 0.000000e+00 0.000000e+00 0.000000e+00 $u [,1] [,2] [,3] [,4] [,5] [,6] [1,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [2,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [3,] 0.0000000 -7.071068e-01 0.0000000 0.0000000 0.0000000 -1.995229e-204 [4,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [5,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [6,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [7,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [8,] 0.0000000 1.542089e-204 0.0000000 0.0000000 0.0000000 -1.000000e+00 [9,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [10,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [11,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [12,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [13,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [14,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [15,] 0.0000000 0.000000e+00 0.0000000 0.7071068 -0.7071068 0.000000e+00 [16,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [17,] 0.0000000 0.000000e+00 0.0000000 -0.7071068 -0.7071068 0.000000e+00 [18,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [19,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [20,] 0.0000000 7.071068e-01 0.0000000 0.0000000 0.0000000 1.856148e-205 [21,] -0.7071068 0.000000e+00 -0.7071068 0.0000000 0.0000000 0.000000e+00 [22,] 0.0000000 0.000000e+00 0.0000000 0.0000000 0.0000000 0.000000e+00 [23,] 0.7071068 0.000000e+00 -0.7071068 0.0000000 0.0000000 0.000000e+00 [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [1,] 0.000000e+00 0 0 0 0 0 0 0 0 [2,] 0.000000e+00 0 0 0 0 0 0 0 0 [3,] 7.071068e-01 0 0 0 0 0 0 0 0 [4,] 0.000000e+00 0 0 0 0 0 0 0 0 [5,] 0.000000e+00 0 0 0 0 0 1 0 0 [6,] 0.000000e+00 0 0 0 0 0 0 0 0 [7,] 0.000000e+00 0 0 0 0 0 0 0 0 [8,] -1.279590e-204 0 0 0 0 0 0 0 0 [9,] 0.000000e+00 0 0 0 0 0 0 0 0 [10,] 0.000000e+00 0 0 0 0 0 0 0 0 [11,] 0.000000e+00 1 0 0 0 0 0 0 0 [12,] 0.000000e+00 0 1 0 0 0 0 0 0 [13,] 0.000000e+00 0 0 0 0 0 0 0 0 [14,] 0.000000e+00 0 0 0 0 0 0 -1 0 [15,] 0.000000e+00 0 0 0 0 0 0 0 0 [16,] 0.000000e+00 0 0 -1 0 0 0 0 0 [17,] 0.000000e+00 0 0 0 0 0 0 0 0 [18,] 0.000000e+00 0 0 0 1 0 0 0 0 [19,] 0.000000e+00 0 0 0 0 1 0 0 0 [20,] 7.071068e-01 0 0 0 0 0 0 0 0 [21,] 0.000000e+00 0 0 0 0 0 0 0 0 [22,] 0.000000e+00 0 0 0 0 0 0 0 1 [23,] 0.000000e+00 0 0 0 0 0 0 0 0 [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [1,] 0.000000e+00 0 0 0 0 0 0 1 [2,] 0.000000e+00 0 0 0 0 0 1 0 [3,] 0.000000e+00 0 0 0 0 0 0 0 [4,] 0.000000e+00 0 0 -1 0 0 0 0 [5,] 0.000000e+00 0 0 0 0 0 0 0 [6,] 0.000000e+00 0 0 0 0 1 0 0 [7,] 0.000000e+00 0 0 0 1 0 0 0 [8,] 0.000000e+00 0 0 0 0 0 0 0 [9,] 0.000000e+00 0 1 0 0 0 0 0 [10,] 0.000000e+00 1 0 0 0 0 0 0 [11,] 0.000000e+00 0 0 0 0 0 0 0 [12,] 0.000000e+00 0 0 0 0 0 0 0 [13,] 1.000000e+00 0 0 0 0 0 0 0 [14,] 0.000000e+00 0 0 0 0 0 0 0 [15,] 0.000000e+00 0 0 0 0 0 0 0 [16,] 0.000000e+00 0 0 0 0 0 0 0 [17,] 0.000000e+00 0 0 0 0 0 0 0 [18,] 0.000000e+00 0 0 0 0 0 0 0 [19,] 0.000000e+00 0 0 0 0 0 0 0 [20,] 0.000000e+00 0 0 0 0 0 0 0 [21,] -1.295618e-33 0 0 0 0 0 0 0 [22,] 0.000000e+00 0 0 0 0 0 0 0 [23,] 0.000000e+00 0 0 0 0 0 0 0 $v [,1] [,2] [,3] [,4] [,5] [1,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [2,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [3,] 0.000000e+00 -7.071068e-01 0.000000e+00 0.000000e+00 0.000000e+00 [4,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [5,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [6,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [7,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [8,] 0.000000e+00 1.542089e-204 0.000000e+00 0.000000e+00 0.000000e+00 [9,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [10,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [11,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [12,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [13,] -1.175703e-267 0.000000e+00 1.058979e-251 0.000000e+00 0.000000e+00 [14,] 0.000000e+00 0.000000e+00 -1.000000e+00 1.570092e-16 2.453269e-18 [15,] 0.000000e+00 0.000000e+00 0.000000e+00 7.071068e-01 2.080627e-02 [16,] 0.000000e+00 0.000000e+00 0.000000e+00 1.110223e-16 9.995670e-01 [17,] 0.000000e+00 0.000000e+00 0.000000e+00 -7.071068e-01 2.080627e-02 [18,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [19,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [20,] 0.000000e+00 7.071068e-01 0.000000e+00 0.000000e+00 0.000000e+00 [21,] -7.071068e-01 0.000000e+00 -1.110223e-16 2.465190e-32 3.851860e-34 [22,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 [23,] 7.071068e-01 0.000000e+00 1.110223e-16 -2.465190e-32 -3.851860e-34 [,6] [,7] [,8] [,9] [,10] [,11] [,12] [1,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [2,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [3,] 7.071068e-01 0.000000e+00 0 0 0.000000e+00 0 0 [4,] 0.000000e+00 2.180843e-204 0 0 0.000000e+00 0 0 [5,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [6,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [7,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [8,] 1.542089e-204 -1.000000e+00 0 0 0.000000e+00 0 0 [9,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [10,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [11,] 0.000000e+00 0.000000e+00 1 0 0.000000e+00 0 0 [12,] 0.000000e+00 0.000000e+00 0 1 0.000000e+00 0 0 [13,] 0.000000e+00 0.000000e+00 0 0 1.000000e+00 0 0 [14,] 0.000000e+00 0.000000e+00 0 0 1.058979e-251 0 0 [15,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [16,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [17,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [18,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 1 0 [19,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 1 [20,] 7.071068e-01 2.180843e-204 0 0 0.000000e+00 0 0 [21,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [22,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [23,] 0.000000e+00 0.000000e+00 0 0 0.000000e+00 0 0 [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [1,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [2,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [3,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [4,] -1.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [5,] 0.000000e+00 0.00000000 0 0.00000000 0 0 1 0 [6,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [7,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 1 [8,] -2.180843e-204 0.00000000 0 0.00000000 0 0 0 0 [9,] 0.000000e+00 0.00000000 0 0.00000000 0 1 0 0 [10,] 0.000000e+00 0.00000000 0 0.00000000 1 0 0 0 [11,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [12,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [13,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [14,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [15,] 0.000000e+00 0.49978350 0 -0.49978350 0 0 0 0 [16,] 0.000000e+00 -0.02080627 0 0.02080627 0 0 0 0 [17,] 0.000000e+00 0.49978350 0 -0.49978350 0 0 0 0 [18,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [19,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [20,] 0.000000e+00 0.00000000 0 0.00000000 0 0 0 0 [21,] 0.000000e+00 0.50000000 0 0.50000000 0 0 0 0 [22,] 0.000000e+00 0.00000000 1 0.00000000 0 0 0 0 [23,] 0.000000e+00 0.50000000 0 0.50000000 0 0 0 0 [,21] [,22] [,23] [1,] 0 0 1 [2,] 0 1 0 [3,] 0 0 0 [4,] 0 0 0 [5,] 0 0 0 [6,] 1 0 0 [7,] 0 0 0 [8,] 0 0 0 [9,] 0 0 0 [10,] 0 0 0 [11,] 0 0 0 [12,] 0 0 0 [13,] 0 0 0 [14,] 0 0 0 [15,] 0 0 0 [16,] 0 0 0 [17,] 0 0 0 [18,] 0 0 0 [19,] 0 0 0 [20,] 0 0 0 [21,] 0 0 0 [22,] 0 0 0 [23,] 0 0 0 . np.linalg.svd(spa.Lz) . (array([[ 8.31802845e-07, -2.28244345e-02, 1.69005964e-05, 8.32458517e-05, 1.37445367e-03, -1.69822716e-03, -2.72169523e-04, 1.62367170e-01, 1.00120612e-01, 7.87048705e-01, 2.28051493e-03, 1.30702273e-01, -2.37071773e-01, -1.52905997e-02, 2.00695093e-01, 2.67355662e-01, -2.13953115e-01, 1.09902642e-01, 7.86967503e-02, -1.48612089e-01, -2.68747745e-01, 1.30686848e-15, 0.00000000e+00], [-1.73745237e-07, 5.82817056e-01, 3.19679606e-06, 1.95527208e-05, -4.01026817e-04, 1.79423330e-03, 1.42218015e-03, -2.93595666e-01, -1.03797754e-02, 1.14069591e-01, 6.91273124e-04, 4.16978017e-02, -8.86891483e-02, -1.23071410e-02, 2.91466972e-01, -4.03091203e-01, 4.10097210e-01, 3.04233036e-01, 1.72107925e-01, -5.85142438e-02, -1.00131938e-01, 4.86771502e-16, 0.00000000e+00], [ 1.79945470e-06, -8.86372067e-03, -1.04110175e-05, -9.71301027e-06, 4.57105960e-03, -4.80419733e-03, -1.70253832e-03, 6.84489722e-02, -8.94572257e-02, -3.62195685e-01, 7.07057922e-01, -8.91235662e-02, -3.08771296e-01, -1.43439358e-02, 2.87180479e-01, 1.38574486e-03, -2.50779597e-01, 5.25321979e-02, 4.62662964e-02, -1.53603086e-01, -2.80575388e-01, 1.27474638e-15, 0.00000000e+00], [-3.81405817e-07, 3.49123335e-01, -1.13849656e-05, -5.20669020e-05, 1.71456172e-03, -4.55458198e-03, -3.23802030e-03, 6.03887632e-01, 1.59324493e-02, -1.71482299e-01, -1.01439208e-03, -6.13090187e-02, 1.29497547e-01, 1.64717834e-02, -3.63078784e-01, 3.19851736e-01, 2.19096359e-01, 3.13539902e-01, 1.85056706e-01, -1.08809944e-01, -1.90814734e-01, 9.28237485e-16, 0.00000000e+00], [ 3.16749182e-07, -7.33268982e-01, -5.84182485e-07, -5.10615468e-06, 1.76538169e-05, -3.21602859e-04, -2.73625670e-04, 5.32095578e-02, 8.79091764e-04, -4.98735345e-03, -2.44886069e-05, -1.33381519e-03, 2.20628230e-03, -9.51433687e-04, 4.34514775e-02, -1.84099352e-01, 4.42865286e-01, 3.83729129e-01, 2.19747367e-01, -8.96443849e-02, -1.54818075e-01, 7.52880680e-16, 0.00000000e+00], [-4.21211716e-01, -1.26228933e-06, 9.91140473e-03, 1.05442602e-01, -2.34738842e-02, 8.53928708e-02, -4.37304704e-01, -1.81877637e-03, -1.21592942e-02, 3.22860569e-03, 1.99130400e-04, 6.87072180e-03, -8.67943385e-03, 5.85421891e-01, 2.28593792e-02, 3.80026942e-03, 1.21361156e-02, -2.35507433e-01, 4.01787503e-01, 2.04572687e-01, -9.92561433e-02, 5.47220932e-16, 0.00000000e+00], [ 7.57297687e-02, -6.30483358e-06, 3.91285206e-02, 3.71727089e-01, -4.54039898e-02, 1.26342172e-01, -6.01054964e-01, -1.99193673e-03, -3.77249821e-04, -4.01709394e-04, -4.51319737e-05, -1.59359360e-03, 2.37308481e-03, -5.22068979e-01, -2.88333379e-02, -8.70800118e-03, -1.75269179e-02, 9.61943777e-02, -1.21708705e-01, 3.73352537e-01, -1.94988884e-01, 1.03622738e-15, 0.00000000e+00], [ 1.86543546e-06, -2.97029443e-03, -3.36972961e-05, -1.05359128e-04, 4.99362785e-03, -5.24357048e-03, -2.35731474e-03, 2.37200800e-02, -1.09617362e-01, -6.16365153e-02, 1.42842702e-02, 5.07740516e-01, 7.11653463e-01, -4.13443733e-03, 1.88246122e-01, -1.34691861e-01, -2.46561507e-01, 2.10092754e-02, 2.76205858e-02, -1.53692883e-01, -2.82641870e-01, 1.37503249e-15, 0.00000000e+00], [-7.99573985e-06, 3.95206738e-03, -6.27063562e-05, -3.92509820e-04, -1.69919218e-02, 1.62054211e-02, 2.80023428e-03, -4.07149823e-02, 6.87137136e-01, -6.93247574e-02, 7.38886061e-03, 2.21976985e-01, -1.87390215e-01, 2.61529015e-02, -4.24713135e-01, -3.69548565e-01, -1.14035532e-01, -9.97472687e-02, -4.81725917e-02, -1.41761537e-01, -2.70847893e-01, 1.31690350e-15, 0.00000000e+00], [-3.95062745e-05, 1.57431046e-03, 4.06604890e-04, 1.18991491e-03, -7.33907458e-02, 7.64563613e-02, 3.33175204e-02, -5.19933079e-03, -6.78035427e-01, 1.21947194e-01, 6.51141842e-03, 2.21973929e-01, -2.57726712e-01, 5.74820600e-03, -4.45391431e-01, -2.23195140e-01, 9.46570807e-02, -2.15389710e-01, -1.24586624e-01, -1.23608317e-01, -2.50818380e-01, 1.21581416e-15, 0.00000000e+00], [ 7.42676668e-01, 1.32904594e-06, -3.99249712e-03, -3.94942827e-02, 7.34555531e-03, -2.26382886e-02, 1.10541819e-01, 3.97233327e-04, 8.59303569e-04, -1.51619560e-04, -6.17706951e-06, -2.07405990e-04, 2.05099427e-04, 4.74556551e-02, 3.47728873e-03, 1.70086239e-03, 1.25454062e-02, -2.83772670e-01, 4.90026906e-01, 2.99206276e-01, -1.46514769e-01, 6.96183304e-16, 0.00000000e+00], [-3.90910918e-07, -6.36400071e-03, 2.21728059e-05, 7.82229365e-05, -4.58350808e-03, 7.96250033e-03, 4.65490914e-03, -7.12305097e-01, -1.02963001e-02, -9.01948826e-02, -2.89885212e-04, -2.39584007e-02, 5.89179260e-02, 9.93604657e-03, -2.82526103e-01, 5.16201870e-01, -3.87611918e-02, 2.09850059e-01, 1.31822329e-01, -1.30288266e-01, -2.32190851e-01, 1.12860186e-15, 0.00000000e+00], [ 4.19197158e-03, -3.33385384e-06, -3.37382216e-02, -8.28576687e-01, 5.81916530e-03, 3.00909739e-02, -1.88089877e-01, -1.03679492e-03, -6.50140854e-03, 1.56416197e-03, 8.88984740e-05, 3.05321800e-03, -3.71410692e-03, 6.77143011e-02, -2.98911556e-03, -4.54139776e-03, -1.88890206e-02, 1.62808110e-01, -2.36446569e-01, 3.83251555e-01, -2.04088197e-01, 1.02375742e-15, 0.00000000e+00], [-5.66982260e-08, 2.55064959e-03, -7.19961507e-05, -3.00326201e-04, 6.07234653e-04, -1.09077308e-03, -2.15658870e-03, -2.46346567e-02, -5.50520388e-02, 1.96041569e-01, -2.69369204e-02, -7.77356097e-01, 3.24311614e-01, 1.64295269e-02, -1.13776766e-01, -3.00731043e-01, -2.04937318e-01, -3.32171483e-02, -5.70435499e-03, -1.50080534e-01, -2.80031330e-01, 1.36278202e-15, 0.00000000e+00], [ 4.10395438e-05, -3.13366217e-04, 8.14273566e-04, 5.56447636e-03, 6.41222150e-01, 5.01569971e-01, 5.62343554e-02, 4.95667053e-03, 8.51669174e-02, -2.04955771e-02, -1.19727187e-03, -4.10396061e-02, 4.97920470e-02, -1.12808282e-02, 1.39500146e-01, 1.47501547e-01, 3.11105818e-01, -3.04008474e-01, -1.92176972e-01, -9.10637927e-02, -2.15471294e-01, 1.05080883e-15, 0.00000000e+00], [ 1.48848758e-04, -2.35982660e-04, -3.53800726e-03, -1.71372928e-02, -7.45851291e-01, 2.44486580e-01, 8.56940821e-02, 1.15410572e-02, 1.31798247e-01, -3.31660885e-02, -1.86999343e-03, -6.43221718e-02, 7.83897657e-02, -2.74666493e-03, 1.98432101e-01, 1.79123088e-01, 3.17444893e-01, -2.97926254e-01, -1.92852034e-01, -8.18949588e-02, -2.06142479e-01, 9.93177050e-16, 0.00000000e+00], [ 8.78543271e-07, -3.17838052e-04, 1.34421400e-03, 6.78594911e-03, 1.51549473e-01, -8.02101418e-01, -1.75991858e-01, -8.06160106e-03, 4.14051119e-02, -8.94283673e-03, -5.89880091e-04, -2.01057558e-02, 2.42119590e-02, -1.44689643e-02, 8.93288614e-02, 1.20168864e-01, 3.01542324e-01, -3.03845431e-01, -1.89928235e-01, -9.58247486e-02, -2.20590883e-01, 1.08307003e-15, 0.00000000e+00], [-5.14913484e-01, 4.18430716e-07, -9.80986052e-03, -1.03562437e-01, 2.24827063e-02, -8.16855839e-02, 4.18037887e-01, 1.73339634e-03, 1.11731626e-02, -2.93783168e-03, -1.79887167e-04, -6.20431547e-03, 7.81293050e-03, -4.94481358e-01, -1.81997957e-02, -1.90892495e-03, 5.98037592e-03, -2.06293518e-01, 3.65843309e-01, 3.11017153e-01, -1.54468446e-01, 6.89446812e-16, 0.00000000e+00], [-3.30872245e-24, -6.46234854e-27, -6.93889390e-18, 3.46944695e-18, -3.46944695e-18, -2.77555756e-17, 2.22044605e-16, 1.08420217e-19, -4.33680869e-19, 2.16840434e-19, -2.49800181e-16, 0.00000000e+00, -8.67361738e-19, 2.71050543e-20, 2.11758237e-22, -1.55096365e-25, -1.03397577e-25, -9.92616735e-24, 1.65436123e-23, 1.82641479e-21, -4.82947016e-15, -1.00000000e+00, 0.00000000e+00], [ 1.79531969e-06, -8.94842690e-03, -1.01546268e-05, -8.73262658e-06, 4.55614976e-03, -4.79156777e-03, -1.69335914e-03, 6.90829904e-02, -8.89583848e-02, -3.67777353e-01, -7.06420773e-01, -4.41061120e-02, -3.12741481e-01, -1.44351074e-02, 2.87782945e-01, 3.18915913e-03, -2.50720746e-01, 5.29210854e-02, 4.64923431e-02, -1.53587496e-01, -2.80525323e-01, 1.45326093e-15, 0.00000000e+00], [-8.33021631e-03, 1.05962533e-05, 7.09113594e-01, 2.40362541e-01, 1.65950319e-02, -6.45471772e-02, 3.19056399e-01, 1.13629083e-03, 1.20076058e-04, 2.58146832e-04, 2.73459895e-05, 9.63515224e-04, -1.41365588e-03, 2.63265400e-01, 1.27213549e-02, 1.05603468e-03, -1.39706382e-02, 1.64799812e-01, -2.50268914e-01, 3.66433378e-01, -1.98337145e-01, 9.19573780e-16, 0.00000000e+00], [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, -1.00000000e+00], [-7.36022066e-03, 8.23867965e-06, -7.03038426e-01, 3.06153537e-01, 1.79901928e-02, -5.91845158e-02, 2.84078264e-01, 9.35442758e-04, -8.43705836e-04, 4.66038804e-04, 3.80317664e-05, 1.32834008e-03, -1.83555043e-03, 2.48090528e-01, 1.10378059e-02, 3.25080258e-04, -1.47079819e-02, 1.65391227e-01, -2.49763201e-01, 3.68918163e-01, -1.99236686e-01, 9.21646644e-16, 0.00000000e+00]]), array([1.62354816e+00, 1.54316369e+00, 1.35756541e+00, 1.34448641e+00, 1.31529137e+00, 1.29394024e+00, 1.28834537e+00, 1.27251369e+00, 1.20017996e+00, 1.18789691e+00, 1.17953136e+00, 1.17909170e+00, 1.17562417e+00, 1.11826799e+00, 1.07719638e+00, 8.87648300e-01, 4.23129021e-01, 2.66322700e-01, 2.52463591e-01, 1.37935777e-02, 2.83343727e-09, 1.11370076e-17, 0.00000000e+00]), array([[ 8.31802845e-07, -1.73745237e-07, 1.79945470e-06, -3.81405817e-07, 3.16749182e-07, -4.21211716e-01, 7.57297687e-02, 1.86543546e-06, -7.99573985e-06, -3.95062745e-05, 7.42676668e-01, -3.90910918e-07, 4.19197158e-03, -5.66982261e-08, 4.10395438e-05, 1.48848758e-04, 8.78543271e-07, -5.14913484e-01, 2.11758237e-22, 1.79531969e-06, -8.33021631e-03, 0.00000000e+00, -7.36022066e-03], [-2.28244345e-02, 5.82817056e-01, -8.86372067e-03, 3.49123335e-01, -7.33268982e-01, -1.26228933e-06, -6.30483358e-06, -2.97029443e-03, 3.95206738e-03, 1.57431046e-03, 1.32904594e-06, -6.36400071e-03, -3.33385384e-06, 2.55064959e-03, -3.13366217e-04, -2.35982660e-04, -3.17838052e-04, 4.18430716e-07, 0.00000000e+00, -8.94842690e-03, 1.05962533e-05, 0.00000000e+00, 8.23867965e-06], [ 1.69005964e-05, 3.19679606e-06, -1.04110175e-05, -1.13849656e-05, -5.84182485e-07, 9.91140473e-03, 3.91285206e-02, -3.36972961e-05, -6.27063562e-05, 4.06604890e-04, -3.99249712e-03, 2.21728059e-05, -3.37382216e-02, -7.19961507e-05, 8.14273566e-04, -3.53800726e-03, 1.34421400e-03, -9.80986052e-03, -1.11022302e-16, -1.01546268e-05, 7.09113594e-01, 0.00000000e+00, -7.03038426e-01], [ 8.32458517e-05, 1.95527208e-05, -9.71301027e-06, -5.20669020e-05, -5.10615468e-06, 1.05442602e-01, 3.71727089e-01, -1.05359128e-04, -3.92509820e-04, 1.18991491e-03, -3.94942827e-02, 7.82229365e-05, -8.28576687e-01, -3.00326201e-04, 5.56447636e-03, -1.71372928e-02, 6.78594911e-03, -1.03562437e-01, 5.55111512e-17, -8.73262658e-06, 2.40362541e-01, 0.00000000e+00, 3.06153537e-01], [ 1.37445367e-03, -4.01026817e-04, 4.57105960e-03, 1.71456172e-03, 1.76538169e-05, -2.34738842e-02, -4.54039898e-02, 4.99362785e-03, -1.69919218e-02, -7.33907458e-02, 7.34555531e-03, -4.58350808e-03, 5.81916530e-03, 6.07234653e-04, 6.41222150e-01, -7.45851291e-01, 1.51549473e-01, 2.24827063e-02, 0.00000000e+00, 4.55614976e-03, 1.65950319e-02, 0.00000000e+00, 1.79901928e-02], [-1.69822716e-03, 1.79423330e-03, -4.80419733e-03, -4.55458198e-03, -3.21602859e-04, 8.53928708e-02, 1.26342172e-01, -5.24357048e-03, 1.62054211e-02, 7.64563613e-02, -2.26382886e-02, 7.96250033e-03, 3.00909739e-02, -1.09077308e-03, 5.01569971e-01, 2.44486580e-01, -8.02101418e-01, -8.16855839e-02, -2.77555756e-17, -4.79156777e-03, -6.45471772e-02, 0.00000000e+00, -5.91845158e-02], [-2.72169523e-04, 1.42218015e-03, -1.70253832e-03, -3.23802030e-03, -2.73625670e-04, -4.37304704e-01, -6.01054964e-01, -2.35731474e-03, 2.80023428e-03, 3.33175204e-02, 1.10541819e-01, 4.65490914e-03, -1.88089877e-01, -2.15658870e-03, 5.62343554e-02, 8.56940821e-02, -1.75991858e-01, 4.18037887e-01, 2.08166817e-17, -1.69335914e-03, 3.19056399e-01, 0.00000000e+00, 2.84078264e-01], [ 1.62367170e-01, -2.93595666e-01, 6.84489722e-02, 6.03887632e-01, 5.32095578e-02, -1.81877637e-03, -1.99193673e-03, 2.37200800e-02, -4.07149823e-02, -5.19933079e-03, 3.97233327e-04, -7.12305097e-01, -1.03679492e-03, -2.46346567e-02, 4.95667053e-03, 1.15410572e-02, -8.06160106e-03, 1.73339634e-03, 0.00000000e+00, 6.90829904e-02, 1.13629083e-03, 0.00000000e+00, 9.35442758e-04], [ 1.00120612e-01, -1.03797754e-02, -8.94572257e-02, 1.59324493e-02, 8.79091764e-04, -1.21592942e-02, -3.77249821e-04, -1.09617362e-01, 6.87137136e-01, -6.78035427e-01, 8.59303569e-04, -1.02963001e-02, -6.50140854e-03, -5.50520388e-02, 8.51669174e-02, 1.31798247e-01, 4.14051119e-02, 1.11731626e-02, 0.00000000e+00, -8.89583848e-02, 1.20076058e-04, 0.00000000e+00, -8.43705836e-04], [ 7.87048705e-01, 1.14069591e-01, -3.62195685e-01, -1.71482299e-01, -4.98735345e-03, 3.22860569e-03, -4.01709394e-04, -6.16365153e-02, -6.93247574e-02, 1.21947194e-01, -1.51619560e-04, -9.01948826e-02, 1.56416197e-03, 1.96041569e-01, -2.04955771e-02, -3.31660885e-02, -8.94283673e-03, -2.93783168e-03, 0.00000000e+00, -3.67777353e-01, 2.58146832e-04, 0.00000000e+00, 4.66038804e-04], [ 2.28051493e-03, 6.91273124e-04, 7.07057922e-01, -1.01439208e-03, -2.44886069e-05, 1.99130400e-04, -4.51319737e-05, 1.42842702e-02, 7.38886061e-03, 6.51141842e-03, -6.17706950e-06, -2.89885212e-04, 8.88984740e-05, -2.69369204e-02, -1.19727187e-03, -1.86999343e-03, -5.89880091e-04, -1.79887167e-04, 5.20417043e-18, -7.06420773e-01, 2.73459895e-05, 0.00000000e+00, 3.80317664e-05], [ 1.30702273e-01, 4.16978017e-02, -8.91235662e-02, -6.13090187e-02, -1.33381519e-03, 6.87072180e-03, -1.59359360e-03, 5.07740516e-01, 2.21976985e-01, 2.21973929e-01, -2.07405990e-04, -2.39584007e-02, 3.05321800e-03, -7.77356097e-01, -4.10396061e-02, -6.43221718e-02, -2.01057558e-02, -6.20431547e-03, 5.55111512e-17, -4.41061120e-02, 9.63515224e-04, 0.00000000e+00, 1.32834008e-03], [-2.37071773e-01, -8.86891483e-02, -3.08771296e-01, 1.29497547e-01, 2.20628230e-03, -8.67943385e-03, 2.37308481e-03, 7.11653463e-01, -1.87390215e-01, -2.57726712e-01, 2.05099427e-04, 5.89179260e-02, -3.71410692e-03, 3.24311614e-01, 4.97920470e-02, 7.83897657e-02, 2.42119590e-02, 7.81293050e-03, 0.00000000e+00, -3.12741481e-01, -1.41365588e-03, 0.00000000e+00, -1.83555043e-03], [-1.52905997e-02, -1.23071410e-02, -1.43439358e-02, 1.64717834e-02, -9.51433687e-04, 5.85421891e-01, -5.22068979e-01, -4.13443733e-03, 2.61529015e-02, 5.74820600e-03, 4.74556551e-02, 9.93604657e-03, 6.77143011e-02, 1.64295269e-02, -1.12808282e-02, -2.74666493e-03, -1.44689643e-02, -4.94481358e-01, 0.00000000e+00, -1.44351074e-02, 2.63265400e-01, 0.00000000e+00, 2.48090528e-01], [ 2.00695093e-01, 2.91466972e-01, 2.87180479e-01, -3.63078784e-01, 4.34514775e-02, 2.28593792e-02, -2.88333379e-02, 1.88246122e-01, -4.24713135e-01, -4.45391431e-01, 3.47728873e-03, -2.82526103e-01, -2.98911556e-03, -1.13776766e-01, 1.39500146e-01, 1.98432101e-01, 8.93288614e-02, -1.81997957e-02, 0.00000000e+00, 2.87782945e-01, 1.27213549e-02, 0.00000000e+00, 1.10378059e-02], [ 2.67355662e-01, -4.03091203e-01, 1.38574486e-03, 3.19851736e-01, -1.84099352e-01, 3.80026942e-03, -8.70800118e-03, -1.34691861e-01, -3.69548565e-01, -2.23195140e-01, 1.70086239e-03, 5.16201870e-01, -4.54139776e-03, -3.00731043e-01, 1.47501547e-01, 1.79123088e-01, 1.20168864e-01, -1.90892495e-03, 0.00000000e+00, 3.18915913e-03, 1.05603468e-03, 0.00000000e+00, 3.25080258e-04], [-2.13953115e-01, 4.10097210e-01, -2.50779597e-01, 2.19096359e-01, 4.42865286e-01, 1.21361156e-02, -1.75269179e-02, -2.46561507e-01, -1.14035532e-01, 9.46570807e-02, 1.25454062e-02, -3.87611918e-02, -1.88890206e-02, -2.04937318e-01, 3.11105818e-01, 3.17444893e-01, 3.01542324e-01, 5.98037592e-03, 0.00000000e+00, -2.50720746e-01, -1.39706382e-02, 0.00000000e+00, -1.47079819e-02], [ 1.09902642e-01, 3.04233036e-01, 5.25321979e-02, 3.13539902e-01, 3.83729129e-01, -2.35507433e-01, 9.61943777e-02, 2.10092754e-02, -9.97472687e-02, -2.15389710e-01, -2.83772670e-01, 2.09850059e-01, 1.62808110e-01, -3.32171483e-02, -3.04008474e-01, -2.97926254e-01, -3.03845431e-01, -2.06293518e-01, 4.23516474e-22, 5.29210854e-02, 1.64799812e-01, 0.00000000e+00, 1.65391227e-01], [ 7.86967503e-02, 1.72107925e-01, 4.62662964e-02, 1.85056706e-01, 2.19747367e-01, 4.01787503e-01, -1.21708705e-01, 2.76205858e-02, -4.81725917e-02, -1.24586624e-01, 4.90026906e-01, 1.31822329e-01, -2.36446569e-01, -5.70435499e-03, -1.92176972e-01, -1.92852034e-01, -1.89928235e-01, 3.65843309e-01, 4.23516474e-22, 4.64923431e-02, -2.50268914e-01, 0.00000000e+00, -2.49763201e-01], [-1.48612089e-01, -5.85142438e-02, -1.53603086e-01, -1.08809944e-01, -8.96443849e-02, 2.04572687e-01, 3.73352537e-01, -1.53692883e-01, -1.41761537e-01, -1.23608317e-01, 2.99206276e-01, -1.30288266e-01, 3.83251555e-01, -1.50080534e-01, -9.10637927e-02, -8.18949588e-02, -9.58247486e-02, 3.11017153e-01, 0.00000000e+00, -1.53587496e-01, 3.66433378e-01, 0.00000000e+00, 3.68918163e-01], [-2.68747745e-01, -1.00131938e-01, -2.80575388e-01, -1.90814734e-01, -1.54818075e-01, -9.92561433e-02, -1.94988884e-01, -2.82641870e-01, -2.70847893e-01, -2.50818380e-01, -1.46514769e-01, -2.32190851e-01, -2.04088197e-01, -2.80031330e-01, -2.15471294e-01, -2.06142479e-01, -2.20590883e-01, -1.54468446e-01, -8.78843834e-10, -2.80525323e-01, -1.98337145e-01, 0.00000000e+00, -1.99236686e-01], [ 2.36187298e-10, 8.80003360e-11, 2.46581927e-10, 1.67696352e-10, 1.36060911e-10, 8.72306466e-11, 1.71364793e-10, 2.48398124e-10, 2.38033022e-10, 2.20430187e-10, 1.28763601e-10, 2.04059498e-10, 1.79361579e-10, 2.46103751e-10, 1.89365580e-10, 1.81167053e-10, 1.93864968e-10, 1.35753644e-10, -1.00000000e+00, 2.46537947e-10, 1.74307318e-10, 0.00000000e+00, 1.75098054e-10], [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, -1.00000000e+00, 0.00000000e+00]])) . %run heavysnow.py spa=SpectralAnalysis(gs) spa.graphFouriertransform() spa.decompose() . plt.imshow(spa.Lz) . &lt;matplotlib.image.AxesImage at 0x7fb1e2ac22e0&gt; . spa.Lz[13:18,13:18] . array([[ 1.00000000e+00, -3.47748512e-02, -2.56935107e-02, -4.14298210e-02, -6.56720534e-12], [-3.47748512e-02, 1.00000000e+00, -3.13567731e-01, -2.95687253e-01, -1.13797574e-06], [-2.56935107e-02, -3.13567731e-01, 1.00000000e+00, -2.99256990e-01, -2.77663248e-06], [-4.14298210e-02, -2.95687253e-01, -2.99256990e-01, 1.00000000e+00, -6.51246540e-07], [-6.56720534e-12, -1.13797574e-06, -2.77663248e-06, -6.51246540e-07, 1.00000000e+00]]) . %%R D&lt;-degree(WW) D_rootinv&lt;-degree_rootinv(WW) L&lt;-D-WW L_tilde&lt;-D_rootinv%*%L%*%D_rootinv . %R -o L_tilde . plt.imshow(spa.Lz) . &lt;matplotlib.image.AxesImage at 0x7fb1f0343a30&gt; . plt.imshow(L_tilde) . &lt;matplotlib.image.AxesImage at 0x7fb1e0dc93d0&gt; . spa.Psi[0] . array([ 8.31802845e-07, -2.28244345e-02, 1.69005964e-05, 8.32458517e-05, 1.37445367e-03, -1.69822716e-03, -2.72169523e-04, 1.62367170e-01, 1.00120612e-01, 7.87048705e-01, 2.28051493e-03, 1.30702273e-01, -2.37071773e-01, -1.52905997e-02, 2.00695093e-01, 2.67355662e-01, -2.13953115e-01, 1.09902642e-01, 7.86967503e-02, -1.48612089e-01, -2.68747745e-01, 1.30686848e-15, 0.00000000e+00]) . Psi[0] . array([ 8.31802846e-07, -2.28244345e-02, 1.69005964e-05, 8.32458517e-05, 1.37445367e-03, -1.69822716e-03, -2.72169523e-04, 1.62367170e-01, 1.00120612e-01, 7.87048705e-01, 2.28051493e-03, -1.30702273e-01, -2.37071773e-01, -1.52905997e-02, 2.00695093e-01, 2.67355662e-01, -2.13953115e-01, 1.09902642e-01, 7.86967503e-02, -1.48612089e-01, -2.68747745e-01, 4.53298893e-07, 1.40733495e-38]) . spa.fbar . array([-2.10281887e+02, 1.40244756e+01, 8.71311468e+00, 7.45361934e+01, -3.80931713e+01, 6.17719604e+01, -2.14128291e+02, -3.55025393e+00, 1.92122028e+01, -3.86380121e+00, 4.42134781e-01, -8.70162667e+00, 1.07088816e+01, 3.00488134e+02, 3.01659077e+01, 4.85119271e+01, 3.80885030e+02, -7.85570930e+02, 5.73774201e+02, 1.80256280e+03, -3.59847855e+03, -2.04835975e+03, -2.79627440e+03]) . plt.imshow(spa.Psi) . &lt;matplotlib.image.AxesImage at 0x7fb1f04075e0&gt; . U, lamb, Vt =np.linalg.svd(spa.Lz) . plt.imshow(Vt) . &lt;matplotlib.image.AxesImage at 0x7fb1e1bf90a0&gt; . plt.imshow(U @ np.diag(lamb) @ Vt) . &lt;matplotlib.image.AxesImage at 0x7fb1d0047340&gt; . plt.imshow(spa.Lz) . &lt;matplotlib.image.AxesImage at 0x7fb1e08494f0&gt; . fbar . array([-2.10281887e+02, 1.40244756e+01, 8.71311468e+00, 7.45361934e+01, -3.80931713e+01, 6.17719604e+01, -2.14128291e+02, -3.55025393e+00, 1.92122028e+01, -3.86380121e+00, 4.42134781e-01, 8.70162667e+00, 1.07088816e+01, 3.00488134e+02, 3.01659077e+01, 4.85119271e+01, 3.80885030e+02, -7.85570930e+02, 5.73774201e+02, 1.80256280e+03, -3.59847510e+03, 2.04836582e+03, -2.79627440e+03]) . plt.imshow(Psi @np.diag(lamb) @ Psi.T) . &lt;matplotlib.image.AxesImage at 0x7fb1d017e9a0&gt; . Psi . array([[ 8.31802846e-07, -2.28244345e-02, 1.69005964e-05, 8.32458517e-05, 1.37445367e-03, -1.69822716e-03, -2.72169523e-04, 1.62367170e-01, 1.00120612e-01, 7.87048705e-01, 2.28051493e-03, -1.30702273e-01, -2.37071773e-01, -1.52905997e-02, 2.00695093e-01, 2.67355662e-01, -2.13953115e-01, 1.09902642e-01, 7.86967503e-02, -1.48612089e-01, -2.68747745e-01, 4.53298893e-07, 1.40733495e-38], [-1.73745234e-07, 5.82817056e-01, 3.19679606e-06, 1.95527208e-05, -4.01026817e-04, 1.79423330e-03, 1.42218015e-03, -2.93595666e-01, -1.03797754e-02, 1.14069591e-01, 6.91273124e-04, -4.16978017e-02, -8.86891483e-02, -1.23071410e-02, 2.91466972e-01, -4.03091203e-01, 4.10097210e-01, 3.04233036e-01, 1.72107925e-01, -5.85142438e-02, -1.00131938e-01, 1.68893309e-07, 5.24354816e-39], [ 1.79945470e-06, -8.86372067e-03, -1.04110175e-05, -9.71301027e-06, 4.57105960e-03, -4.80419733e-03, -1.70253832e-03, 6.84489722e-02, -8.94572257e-02, -3.62195685e-01, 7.07057922e-01, 8.91235662e-02, -3.08771296e-01, -1.43439358e-02, 2.87180479e-01, 1.38574486e-03, -2.50779597e-01, 5.25321979e-02, 4.62662964e-02, -1.53603086e-01, -2.80575388e-01, 4.73248670e-07, 1.46927205e-38], [-3.81405816e-07, 3.49123335e-01, -1.13849656e-05, -5.20669020e-05, 1.71456172e-03, -4.55458198e-03, -3.23802030e-03, 6.03887632e-01, 1.59324493e-02, -1.71482299e-01, -1.01439208e-03, 6.13090187e-02, 1.29497547e-01, 1.64717834e-02, -3.63078784e-01, 3.19851736e-01, 2.19096359e-01, 3.13539902e-01, 1.85056706e-01, -1.08809944e-01, -1.90814734e-01, 3.21848681e-07, 9.99227897e-39], [ 3.16749178e-07, -7.33268982e-01, -5.84182485e-07, -5.10615468e-06, 1.76538169e-05, -3.21602859e-04, -2.73625670e-04, 5.32095578e-02, 8.79091764e-04, -4.98735345e-03, -2.44886069e-05, 1.33381519e-03, 2.20628230e-03, -9.51433687e-04, 4.34514775e-02, -1.84099352e-01, 4.42865286e-01, 3.83729129e-01, 2.19747367e-01, -8.96443849e-02, -1.54818075e-01, 2.61132838e-07, 8.10726382e-39], [-4.21211716e-01, -1.26228933e-06, 9.91140473e-03, 1.05442602e-01, -2.34738842e-02, 8.53928708e-02, -4.37304704e-01, -1.81877637e-03, -1.21592942e-02, 3.22860569e-03, 1.99130400e-04, -6.87072180e-03, -8.67943385e-03, 5.85421891e-01, 2.28593792e-02, 3.80026942e-03, 1.21361156e-02, -2.35507433e-01, 4.01787503e-01, 2.04572687e-01, -9.92561433e-02, 1.67416356e-07, 5.19769120e-39], [ 7.57297687e-02, -6.30483358e-06, 3.91285206e-02, 3.71727089e-01, -4.54039898e-02, 1.26342172e-01, -6.01054964e-01, -1.99193673e-03, -3.77249821e-04, -4.01709394e-04, -4.51319737e-05, 1.59359360e-03, 2.37308481e-03, -5.22068979e-01, -2.88333379e-02, -8.70800118e-03, -1.75269179e-02, 9.61943777e-02, -1.21708705e-01, 3.73352537e-01, -1.94988884e-01, 3.28889581e-07, 1.02108736e-38], [ 1.86543546e-06, -2.97029443e-03, -3.36972961e-05, -1.05359128e-04, 4.99362785e-03, -5.24357048e-03, -2.35731474e-03, 2.37200800e-02, -1.09617362e-01, -6.16365153e-02, 1.42842702e-02, -5.07740516e-01, 7.11653463e-01, -4.13443733e-03, 1.88246122e-01, -1.34691861e-01, -2.46561507e-01, 2.10092754e-02, 2.76205858e-02, -1.53692883e-01, -2.82641870e-01, 4.76734222e-07, 1.48009348e-38], [-7.99573985e-06, 3.95206738e-03, -6.27063562e-05, -3.92509820e-04, -1.69919218e-02, 1.62054211e-02, 2.80023428e-03, -4.07149823e-02, 6.87137136e-01, -6.93247574e-02, 7.38886061e-03, -2.21976985e-01, -1.87390215e-01, 2.61529015e-02, -4.24713135e-01, -3.69548565e-01, -1.14035532e-01, -9.97472687e-02, -4.81725917e-02, -1.41761537e-01, -2.70847893e-01, 4.56841235e-07, 1.41833269e-38], [-3.95062745e-05, 1.57431046e-03, 4.06604890e-04, 1.18991491e-03, -7.33907458e-02, 7.64563613e-02, 3.33175204e-02, -5.19933079e-03, -6.78035427e-01, 1.21947194e-01, 6.51141842e-03, -2.21973929e-01, -2.57726712e-01, 5.74820600e-03, -4.45391431e-01, -2.23195140e-01, 9.46570807e-02, -2.15389710e-01, -1.24586624e-01, -1.23608317e-01, -2.50818380e-01, 4.23057305e-07, 1.31344537e-38], [ 7.42676668e-01, 1.32904593e-06, -3.99249712e-03, -3.94942827e-02, 7.34555531e-03, -2.26382886e-02, 1.10541819e-01, 3.97233327e-04, 8.59303569e-04, -1.51619560e-04, -6.17706950e-06, 2.07405990e-04, 2.05099427e-04, 4.74556551e-02, 3.47728873e-03, 1.70086239e-03, 1.25454062e-02, -2.83772670e-01, 4.90026906e-01, 2.99206276e-01, -1.46514769e-01, 2.47127902e-07, 7.67245728e-39], [-3.90910918e-07, -6.36400071e-03, 2.21728059e-05, 7.82229365e-05, -4.58350808e-03, 7.96250033e-03, 4.65490914e-03, -7.12305097e-01, -1.02963001e-02, -9.01948826e-02, -2.89885212e-04, 2.39584007e-02, 5.89179260e-02, 9.93604657e-03, -2.82526103e-01, 5.16201870e-01, -3.87611918e-02, 2.09850059e-01, 1.31822329e-01, -1.30288266e-01, -2.32190851e-01, 3.91638098e-07, 1.21589969e-38], [ 4.19197158e-03, -3.33385384e-06, -3.37382216e-02, -8.28576687e-01, 5.81916530e-03, 3.00909739e-02, -1.88089877e-01, -1.03679492e-03, -6.50140854e-03, 1.56416197e-03, 8.88984740e-05, -3.05321800e-03, -3.71410692e-03, 6.77143011e-02, -2.98911556e-03, -4.54139776e-03, -1.88890206e-02, 1.62808110e-01, -2.36446569e-01, 3.83251555e-01, -2.04088197e-01, 3.44237465e-07, 1.06873721e-38], [-5.66982257e-08, 2.55064959e-03, -7.19961507e-05, -3.00326201e-04, 6.07234653e-04, -1.09077308e-03, -2.15658870e-03, -2.46346567e-02, -5.50520388e-02, 1.96041569e-01, -2.69369204e-02, 7.77356097e-01, 3.24311614e-01, 1.64295269e-02, -1.13776766e-01, -3.00731043e-01, -2.04937318e-01, -3.32171483e-02, -5.70435499e-03, -1.50080534e-01, -2.80031330e-01, 4.72331005e-07, 1.46642303e-38], [ 4.10395438e-05, -3.13366217e-04, 8.14273566e-04, 5.56447636e-03, 6.41222150e-01, 5.01569971e-01, 5.62343554e-02, 4.95667053e-03, 8.51669174e-02, -2.04955771e-02, -1.19727187e-03, 4.10396061e-02, 4.97920470e-02, -1.12808282e-02, 1.39500146e-01, 1.47501547e-01, 3.11105818e-01, -3.04008474e-01, -1.92176972e-01, -9.10637927e-02, -2.15471294e-01, 3.63437110e-07, 1.12834546e-38], [ 1.48848758e-04, -2.35982660e-04, -3.53800726e-03, -1.71372928e-02, -7.45851291e-01, 2.44486580e-01, 8.56940821e-02, 1.15410572e-02, 1.31798247e-01, -3.31660885e-02, -1.86999343e-03, 6.43221718e-02, 7.83897657e-02, -2.74666493e-03, 1.98432101e-01, 1.79123088e-01, 3.17444893e-01, -2.97926254e-01, -1.92852034e-01, -8.18949588e-02, -2.06142479e-01, 3.47702130e-07, 1.07949384e-38], [ 8.78543271e-07, -3.17838052e-04, 1.34421400e-03, 6.78594911e-03, 1.51549473e-01, -8.02101418e-01, -1.75991858e-01, -8.06160106e-03, 4.14051119e-02, -8.94283673e-03, -5.89880091e-04, 2.01057558e-02, 2.42119590e-02, -1.44689643e-02, 8.93288614e-02, 1.20168864e-01, 3.01542324e-01, -3.03845431e-01, -1.89928235e-01, -9.58247486e-02, -2.20590883e-01, 3.72072360e-07, 1.15515490e-38], [-5.14913484e-01, 4.18430718e-07, -9.80986052e-03, -1.03562437e-01, 2.24827063e-02, -8.16855839e-02, 4.18037887e-01, 1.73339634e-03, 1.11731626e-02, -2.93783168e-03, -1.79887167e-04, 6.20431547e-03, 7.81293050e-03, -4.94481358e-01, -1.81997957e-02, -1.90892495e-03, 5.98037592e-03, -2.06293518e-01, 3.65843309e-01, 3.11017153e-01, -1.54468446e-01, 2.60543425e-07, 8.08896293e-39], [ 1.24737016e-14, 3.93407465e-20, -3.45930152e-16, -3.77912922e-15, 8.60963323e-16, -3.15374791e-15, 1.62369084e-14, 6.86568858e-17, 4.88028646e-16, -1.30919084e-16, -7.70880621e-17, 2.77661485e-16, 3.55900371e-16, -2.51906933e-14, -1.02117568e-15, -2.06045401e-16, -1.38074571e-15, 4.25733421e-14, -7.66199636e-14, -7.14108351e-13, 1.68670810e-06, 1.00000000e+00, 5.55916566e-39], [ 1.79531969e-06, -8.94842690e-03, -1.01546268e-05, -8.73262658e-06, 4.55614976e-03, -4.79156777e-03, -1.69335914e-03, 6.90829904e-02, -8.89583848e-02, -3.67777353e-01, -7.06420773e-01, 4.41061120e-02, -3.12741481e-01, -1.44351074e-02, 2.87782945e-01, 3.18915913e-03, -2.50720746e-01, 5.29210854e-02, 4.64923431e-02, -1.53587496e-01, -2.80525323e-01, 4.73164226e-07, 1.46900989e-38], [-8.33021631e-03, 1.05962533e-05, 7.09113594e-01, 2.40362541e-01, 1.65950319e-02, -6.45471772e-02, 3.19056399e-01, 1.13629083e-03, 1.20076058e-04, 2.58146832e-04, 2.73459895e-05, -9.63515224e-04, -1.41365588e-03, 2.63265400e-01, 1.27213549e-02, 1.05603468e-03, -1.39706382e-02, 1.64799812e-01, -2.50268914e-01, 3.66433378e-01, -1.98337145e-01, 3.34537107e-07, 1.03862099e-38], [-2.91684989e-48, -9.67870296e-54, 7.66429393e-50, 1.08195293e-48, -2.53869829e-49, 8.96655349e-49, -4.58225740e-48, -2.04520610e-50, -1.56019945e-49, 4.54073575e-50, -5.67284365e-47, -1.13905076e-48, -7.09980313e-50, 8.55192528e-48, 3.59904771e-49, 8.81265710e-50, 1.23887175e-48, -6.06897321e-47, 1.15220264e-46, 1.96550022e-44, -5.23663927e-38, 5.55925399e-39, -1.00000000e+00], [-7.36022066e-03, 8.23867965e-06, -7.03038426e-01, 3.06153537e-01, 1.79901928e-02, -5.91845158e-02, 2.84078264e-01, 9.35442758e-04, -8.43705836e-04, 4.66038804e-04, 3.80317664e-05, -1.32834008e-03, -1.83555043e-03, 2.48090528e-01, 1.10378059e-02, 3.25080258e-04, -1.47079819e-02, 1.65391227e-01, -2.49763201e-01, 3.68918163e-01, -1.99236686e-01, 3.36054372e-07, 1.04333156e-38]]) . plt.imshow(Psi) . &lt;matplotlib.image.AxesImage at 0x7fb1c935ccd0&gt; . plt.imshow(spa.Psi) . &lt;matplotlib.image.AxesImage at 0x7fb1c8f46100&gt; . %%R -r 150 -w 2000 -h 660 source(&#39;heavysnow.R&#39;) dat_&lt;-tibble(V) dat_$f&lt;-as.vector(f) dat_$divlink&lt;-0 dat_$conlink&lt;-0 dat_$link&lt;-0 dat&lt;-dat_ for(i in 1:23){ dat$divlink[i]&lt;-sum(W[i,]) dat$conlink[i]&lt;-sum(W[,i]) dat$link[i]&lt;-sum(W[i,])+sum(W[i,]) } p1_&lt;-ggplot(dat)+geom_point(aes(x=f,y=divlink),size=3)+theme_light()+ geom_text_repel(aes(x=f,y=divlink,label=V),col=&quot;gray40&quot;)+ ylab(&quot;Out-degree&quot;)+xlab(&quot;Box office record&quot;)+ geom_hline(aes(yintercept=2),col=2,lty=2,lwd=0.5)+ geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ ggtitle(&quot;(a)&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ theme(axis.title.x=element_text(face=4,size=rel(1)))+ theme(axis.title.y=element_text(face=4,size=rel(1))) p2_&lt;-ggplot(dat)+geom_point(aes(x=f,y=conlink),size=3)+theme_light()+ geom_text_repel(aes(x=f,y=conlink,label=V),col=&quot;gray40&quot;)+ ylab(&quot;In-degree&quot;)+xlab(&quot;Box office record&quot;)+ geom_hline(aes(yintercept=3.75),col=2,lty=2,lwd=0.5)+ geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ ggtitle(&quot;(b)&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ theme(axis.title.x=element_text(face=4,size=rel(1)))+ theme(axis.title.y=element_text(face=4,size=rel(1))) # p3_&lt;-ggplot(dat)+geom_point(aes(x=f,y=link),size=3)+theme_light()+ # geom_text_repel(aes(x=f,y=link,label=V),col=&quot;gray40&quot;)+ # ylab(&quot;Graph&quot;)+xlab(&quot;Box office record&quot;)+ # geom_hline(aes(yintercept=6.25),col=2,lty=2,lwd=0.5)+ # geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ # ggtitle(&quot;(c)&quot;) p1&lt;-grid.arrange(p1_,p2_,ncol=2) #ggsave(plot=p1,&quot;./fig/p1.pdf&quot;,width=9,height=4.5) . R[write to console]: Error in library(kohonen) : there is no package called ‘kohonen’ . Error in library(kohonen) : there is no package called ‘kohonen’ . RRuntimeError Traceback (most recent call last) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/ipython/rmagic.py in eval(self, code) 267 # Need the newline in case the last line in code is a comment. --&gt; 268 value, visible = ro.r(&#34;withVisible({%s n})&#34; % code) 269 except (ri.embedded.RRuntimeError, ValueError) as exception: ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/robjects/__init__.py in __call__(self, string) 437 p = rinterface.parse(string) --&gt; 438 res = self.eval(p) 439 return conversion.rpy2py(res) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/robjects/functions.py in __call__(self, *args, **kwargs) 197 kwargs[r_k] = v --&gt; 198 return (super(SignatureTranslatedFunction, self) 199 .__call__(*args, **kwargs)) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/robjects/functions.py in __call__(self, *args, **kwargs) 124 new_kwargs[k] = conversion.py2rpy(v) --&gt; 125 res = super(Function, self).__call__(*new_args, **new_kwargs) 126 res = conversion.rpy2py(res) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/rinterface_lib/conversion.py in _(*args, **kwargs) 44 def _(*args, **kwargs): &gt; 45 cdata = function(*args, **kwargs) 46 # TODO: test cdata is of the expected CType ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/rinterface.py in __call__(self, *args, **kwargs) 679 if error_occured[0]: --&gt; 680 raise embedded.RRuntimeError(_rinterface._geterrmessage()) 681 return res RRuntimeError: Error in library(kohonen) : there is no package called ‘kohonen’ During handling of the above exception, another exception occurred: RInterpreterError Traceback (most recent call last) /tmp/ipykernel_2863525/1312811566.py in &lt;module&gt; -&gt; 1 get_ipython().run_cell_magic(&#39;R&#39;, &#39;-r 150 -w 2000 -h 660&#39;, &#39;source( &#39;heavysnow.R &#39;) ndat_&lt;-tibble(V) ndat_$f&lt;-as.vector(f) ndat_$divlink&lt;-0 ndat_$conlink&lt;-0 ndat_$link&lt;-0 ndat&lt;-dat_ nfor(i in 1:23){ n dat$divlink[i]&lt;-sum(W[i,]) n dat$conlink[i]&lt;-sum(W[,i]) n dat$link[i]&lt;-sum(W[i,])+sum(W[i,]) n} np1_&lt;-ggplot(dat)+geom_point(aes(x=f,y=divlink),size=3)+theme_light()+ n geom_text_repel(aes(x=f,y=divlink,label=V),col=&#34;gray40&#34;)+ n ylab(&#34;Out-degree&#34;)+xlab(&#34;Box office record&#34;)+ n geom_hline(aes(yintercept=2),col=2,lty=2,lwd=0.5)+ n geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ n ggtitle(&#34;(a)&#34;)+theme(plot.title=element_text(face=&#34;bold.italic&#34;,size=rel(2)))+ n theme(axis.title.x=element_text(face=4,size=rel(1)))+ n theme(axis.title.y=element_text(face=4,size=rel(1))) np2_&lt;-ggplot(dat)+geom_point(aes(x=f,y=conlink),size=3)+theme_light()+ n geom_text_repel(aes(x=f,y=conlink,label=V),col=&#34;gray40&#34;)+ n ylab(&#34;In-degree&#34;)+xlab(&#34;Box office record&#34;)+ n geom_hline(aes(yintercept=3.75),col=2,lty=2,lwd=0.5)+ n geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ n ggtitle(&#34;(b)&#34;)+theme(plot.title=element_text(face=&#34;bold.italic&#34;,size=rel(2)))+ n theme(axis.title.x=element_text(face=4,size=rel(1)))+ n theme(axis.title.y=element_text(face=4,size=rel(1))) n# p3_&lt;-ggplot(dat)+geom_point(aes(x=f,y=link),size=3)+theme_light()+ n# geom_text_repel(aes(x=f,y=link,label=V),col=&#34;gray40&#34;)+ n# ylab(&#34;Graph&#34;)+xlab(&#34;Box office record&#34;)+ n# geom_hline(aes(yintercept=6.25),col=2,lty=2,lwd=0.5)+ n# geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ n# ggtitle(&#34;(c)&#34;) np1&lt;-grid.arrange(p1_,p2_,ncol=2) n#ggsave(plot=p1,&#34;./fig/p1.pdf&#34;,width=9,height=4.5) n&#39;) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/IPython/core/interactiveshell.py in run_cell_magic(self, magic_name, line, cell) 2404 with self.builtin_trap: 2405 args = (magic_arg_s, cell) -&gt; 2406 result = fn(*args, **kwargs) 2407 return result 2408 ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/decorator.py in fun(*args, **kw) 230 if not kwsyntax: 231 args, kw = fix(args, kw, sig) --&gt; 232 return caller(func, *(extras + args), **kw) 233 fun.__name__ = func.__name__ 234 fun.__doc__ = func.__doc__ ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&#39;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/ipython/rmagic.py in R(self, line, cell, local_ns) 781 if not e.stdout.endswith(e.err): 782 print(e.err) --&gt; 783 raise e 784 finally: 785 if self.device in [&#39;png&#39;, &#39;svg&#39;]: ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/ipython/rmagic.py in R(self, line, cell, local_ns) 761 return_output = False 762 else: --&gt; 763 text_result, result, visible = self.eval(code) 764 text_output += text_result 765 if visible: ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/ipython/rmagic.py in eval(self, code) 270 # Otherwise next return seems to have copy of error. 271 warning_or_other_msg = self.flush() --&gt; 272 raise RInterpreterError(code, str(exception), 273 warning_or_other_msg) 274 text_output = self.flush() RInterpreterError: Failed to parse and evaluate line &#39;source( &#39;heavysnow.R &#39;) ndat_&lt;-tibble(V) ndat_$f&lt;-as.vector(f) ndat_$divlink&lt;-0 ndat_$conlink&lt;-0 ndat_$link&lt;-0 ndat&lt;-dat_ nfor(i in 1:23){ n dat$divlink[i]&lt;-sum(W[i,]) n dat$conlink[i]&lt;-sum(W[,i]) n dat$link[i]&lt;-sum(W[i,])+sum(W[i,]) n} np1_&lt;-ggplot(dat)+geom_point(aes(x=f,y=divlink),size=3)+theme_light()+ n geom_text_repel(aes(x=f,y=divlink,label=V),col=&#34;gray40&#34;)+ n ylab(&#34;Out-degree&#34;)+xlab(&#34;Box office record&#34;)+ n geom_hline(aes(yintercept=2),col=2,lty=2,lwd=0.5)+ n geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ n ggtitle(&#34;(a)&#34;)+theme(plot.title=element_text(face=&#34;bold.italic&#34;,size=rel(2)))+ n theme(axis.title.x=element_text(face=4,size=rel(1)))+ n theme(axis.title.y=element_text(face=4,size=rel(1))) np2_&lt;-ggplot(dat)+geom_point(aes(x=f,y=conlink),size=3)+theme_light()+ n geom_text_repel(aes(x=f,y=conlink,label=V),col=&#34;gray40&#34;)+ n ylab(&#34;In-degree&#34;)+xlab(&#34;Box office record&#34;)+ n geom_hline(aes(yintercept=3.75),col=2,lty=2,lwd=0.5)+ n geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ n ggtitle(&#34;(b)&#34;)+theme(plot.title=element_text(face=&#34;bold.italic&#34;,size=rel(2)))+ n theme(axis.title.x=element_text(face=4,size=rel(1)))+ n theme(axis.title.y=element_text(face=4,size=rel(1))) n# p3_&lt;-ggplot(dat)+geom_point(aes(x=f,y=link),size=3)+theme_light()+ n# geom_text_repel(aes(x=f,y=link,label=V),col=&#34;gray40&#34;)+ n# ylab(&#34;Graph&#34;)+xlab(&#34;Box office record&#34;)+ n# geom_hline(aes(yintercept=6.25),col=2,lty=2,lwd=0.5)+ n# geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ n# ggtitle(&#34;(c)&#34;) np1&lt;-grid.arrange(p1_,p2_,ncol=2) n#ggsave(plot=p1,&#34;./fig/p1.pdf&#34;,width=9,height=4.5) n&#39;. R error message: &#39;Error in library(kohonen) : there is no package called ‘kohonen’&#39; . gfft &#49688;&#54665;&#54616;&#44256; &#44208;&#44284;&#47484; &#51200;&#51109;&#54632;. . %%R g1&lt;-gfft(f,WEuclid) g2&lt;-gfft(f,Wgraph) g3&lt;-gfft(f,Whst) . &#50500;&#51060;&#44176;&#54540;&#46991; . %%R -r 150 -w 1000 -h 400 library(gridExtra) e1&lt;-eigenplot(g1)+ggtitle(&quot;(a) Euclid weights&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e2&lt;-eigenplot(g2)+ggtitle(&quot;(b) Graph weights&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e3&lt;-eigenplot(g3)+ggtitle(&quot;(c) HST weights&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) s1&lt;-specplot(g1) s2&lt;-specplot(g2) s3&lt;-specplot(g3) p2&lt;-grid.arrange(e1,e2,e3,s1,s2,s3,nrow=2) #ggsave(plot=p2,&quot;./fig/p2.pdf&quot;,width=6,height=3) . &#48516;&#54644; . %%R -r 300 -w 2500 -h 1500 d1&lt;-decompose(f,WEuclid,V=V) # 0, 35000, 60000, 80000 d2&lt;-decompose(f,Wgraph,V=V) # 0, 35000, 60000, 80000 d3&lt;-decompose(f,Whst,V=V) # 0, 35000, 60000, 80000 d1$case&lt;-&quot;Euclid&quot; d2$case&lt;-&quot;Graph&quot; d3$case&lt;-&quot;HST&quot; decomprslt&lt;-rbind(d1,d2,d3) . %%R -r 150 -w 2000 -h 4200 decomp_dat&lt;- decomprslt %&gt;% group_by(case,eigenvectorindex) %&gt;% mutate(textsize= 10*(abs(fhat)&gt;50)) p3&lt;-ggplot(data=filter(decomp_dat,eigenvectorindex %in% 1:23))+ geom_col(aes(x=Vindex,y=fhat,fill=fhat&gt;0),width=0.7)+ geom_text_repel(aes(x=Vindex,y=fhat,label=V,size=textsize),col=1,fontface=4,alpha=0.8,segment.size=0.2,segment.color=&quot;gray60&quot;,min.segment.length=5,hjust=0.1)+ scale_radius(range = c(0,1.8))+ guides(size=FALSE)+ facet_grid(eigenvectorindex~case)+ geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+ theme(axis.text.x=element_text(angle=85,hjust=1,vjust=1,face=4,size=rel(0.7),colour=&quot;gray60&quot;))+ theme_light()+ theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) show(p3) # decomp_dat&lt;- decomprslt %&gt;% # group_by(case,eigenvectorindex) %&gt;% # mutate(textsize=(fhat&gt;mean(fhat)) *(fhat&gt;240) * ((case==&quot;Euclid&quot;)*1.7+ # (case!=&quot;Euclid&quot;)*(eigenvectorindex!=1)*1.7+ # (case!=&quot;Euclid&quot;)*(eigenvectorindex==1)*1)) # p3&lt;-ggplot(data=filter(decomp_dat,eigenvectorindex %in% 1:7))+ # geom_col(aes(x=Vindex,y=fhat,fill=fhat&gt;0),width=0.7)+ # geom_text_repel(aes(x=Vindex,y=fhat,label=V,size=textsize),col=1,fontface=4,alpha=0.8,segment.size=0.2,segment.color=&quot;gray60&quot;,min.segment.length=5,hjust=0.1)+ # scale_radius(range = c(0,1.8))+ # guides(size=FALSE)+ # facet_grid(eigenvectorindex~case)+ # geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ # xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+ # theme(axis.text.x=element_text(angle=85,hjust=1,vjust=1,face=4,size=rel(0.7),colour=&quot;gray60&quot;))+ # theme_light()+ # theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ # theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ # theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) # show(p3) #ggsave(plot=p3,&quot;./fig/p3.pdf&quot;,width=6,height=6) . %%R dat3_Euclid &lt;- decomp_dat %&gt;% filter(case==&quot;Euclid&quot;,eigenvectorindex==1) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) dat3_Euclid &lt;- left_join(dat,dat3_Euclid,by=&quot;V&quot;) for(j in 2:23){ decomp_filtered_dat_&lt;- decomp_dat %&gt;% filter(case==&quot;Euclid&quot;,eigenvectorindex==j) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) decomp_filtered_dat_&lt;- left_join(dat,decomp_filtered_dat_,by=&quot;V&quot;) dat3_Euclid&lt;-rbind(dat3_Euclid,decomp_filtered_dat_) } dat3_Graph &lt;- decomp_dat %&gt;% filter(case==&quot;Graph&quot;,eigenvectorindex==1) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) dat3_Graph &lt;- left_join(dat,dat3_Graph,by=&quot;V&quot;) for(j in 2:23){ decomp_filtered_dat_&lt;- decomp_dat %&gt;% filter(case==&quot;Graph&quot;,eigenvectorindex==j) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) decomp_filtered_dat_&lt;- left_join(dat,decomp_filtered_dat_,by=&quot;V&quot;) dat3_Graph&lt;-rbind(dat3_Graph,decomp_filtered_dat_) } dat3_HST &lt;- decomp_dat %&gt;% filter(case==&quot;HST&quot;,eigenvectorindex==1) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) dat3_HST &lt;- left_join(dat,dat3_HST,by=&quot;V&quot;) for(j in 2:23){ decomp_filtered_dat_&lt;- decomp_dat %&gt;% filter(case==&quot;HST&quot;,eigenvectorindex==j) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) decomp_filtered_dat_&lt;- left_join(dat,decomp_filtered_dat_,by=&quot;V&quot;) dat3_HST&lt;-rbind(dat3_HST,decomp_filtered_dat_) } dat3&lt;-rbind(dat3_Euclid,dat3_Graph,dat3_HST) . %%R -r 300 -w 2000 -h 3000 hull_cyl &lt;- dat3 %&gt;% group_by(case,eigenvectorindex) %&gt;% filter(textsize&gt;0) %&gt;% slice(chull(f, divlink)) p4&lt;-ggplot(dat3%&gt;% filter(eigenvectorindex&lt;8))+geom_point(aes(x=f,y=divlink,col=textsize&gt;0,size=fhat*(fhat&gt;0)),alpha=0.8)+ geom_shape(data=hull_cyl%&gt;% filter(eigenvectorindex&lt;8) ,aes(x=f,y=divlink),alpha=0.05,col=&quot;gray30&quot;,radius=0.05,expand=0.05)+ facet_grid(eigenvectorindex~case)+ scale_size_continuous(range=c(2,2.5))+ scale_color_manual(values=c(&quot;gray80&quot;, &quot;gray20&quot;))+ ylim(0,8)+xlim(0,3000)+ guides(alpha=F)+ guides(col=F)+ guides(size=F)+ ylab(&quot;&quot;)+xlab(&quot;&quot;)+ geom_hline(aes(yintercept=2),col=&quot;gray30&quot;,lty=2,lwd=0.2)+ geom_vline(aes(xintercept=1000),col=&quot;gray30&quot;,lty=2,lwd=0.2)+ theme_light()+ theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) show(p4) #ggsave(plot=p4,&quot;./fig/p4.pdf&quot;,width=7,height=7) . %%R -r 300 -w 2000 -h 3000 hull_cyl &lt;- dat3 %&gt;% group_by(case,eigenvectorindex) %&gt;% filter(textsize&gt;0) %&gt;% slice(chull(f, conlink)) p5&lt;-ggplot(dat3%&gt;% filter(eigenvectorindex&lt;8))+geom_point(aes(x=f,y=conlink,col=textsize&gt;0,size=fhat*(fhat&gt;0)),alpha=0.8)+ geom_shape(data=hull_cyl%&gt;% filter(eigenvectorindex&lt;8) ,aes(x=f,y=conlink),alpha=0.05,col=&quot;gray30&quot;,radius=0.05,expand=0.05)+ facet_grid(eigenvectorindex~case)+ scale_size_continuous(range=c(2,2.5))+ scale_color_manual(values=c(&quot;gray80&quot;, &quot;gray20&quot;))+ ylim(0,10)+xlim(0,3000)+ guides(col=F)+ guides(alpha=F)+ guides(size=F)+ ylab(&quot;&quot;)+xlab(&quot;&quot;)+ geom_hline(aes(yintercept=3.75),col=&quot;gray30&quot;,lty=2,lwd=0.2)+ geom_vline(aes(xintercept=1000),col=&quot;gray30&quot;,lty=2,lwd=0.2)+ theme_light()+ theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) show(p5) #ggsave(plot=p5,&quot;./fig/p5.pdf&quot;,width=7,height=7) . %%R -r 300 -w 2000 -h 1500 p_&lt;-grid.arrange(p4,p5,ncol=2) #ggsave(plot=p6,&quot;./fig/p6.pdf&quot;,width=10,height=12) . %%R -r 200 -w 2000 -h 3000 p6&lt;-grid.arrange(p1,p_,nrow=2,heights=c(3,5)) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/10/29/(%EC%97%B0%EA%B5%AC)-HST-example-3-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/10/29/(%EC%97%B0%EA%B5%AC)-HST-example-3-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD.html",
            "date": " • Oct 29, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "(연구) hst plots",
            "content": "Import . import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=0 W[n-1,n-1]=0 . gs=GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . %run heavysnow hst=HeavySnowTransform(gs) hst.snow(tau=100000,b=0.01,maxflow=3) . HST (tau= 100000, b=0.01) 100000/100000 HST completed and all history is recorded. . plt.imshow(hst.snowdistance) . &lt;matplotlib.image.AxesImage at 0x7fef4ffe0cd0&gt; . theta=100 hst.snowweight=np.exp(-hst.snowdistance/(theta*hst.tau*hst.b**2))-np.eye(n,n) plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7fef40776310&gt; . - $ theta=10, theta=100$ 에서의 결과가 우수하다. . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.281581e+00 1.280062e+00 1.277538e+00 1.276594e+00 1.246469e+00 [6] 1.246289e+00 1.226622e+00 1.223498e+00 1.040855e+00 1.012083e+00 [11] 9.567342e-01 9.183002e-01 1.337453e-02 1.628144e-17 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -1.101322e-02 0.623405435 -0.091622721 0.0017456559 0.24806543 [2,] 1.205878e-02 -0.755269196 0.101832475 -0.0018036764 0.09749994 [3,] -2.573593e-03 0.151302392 0.013830158 -0.0006387095 -0.55300723 [4,] -3.533479e-02 0.001934776 -0.002380270 0.0010829689 -0.01418293 [5,] 5.657077e-03 0.020641957 0.146149059 -0.0047285571 0.42944573 [6,] -4.457739e-05 -0.100557489 -0.758698999 0.0208523679 -0.06840576 [7,] -1.383726e-05 0.084966266 0.618622425 -0.0161356769 -0.14706653 [8,] 6.379135e-01 0.009833070 -0.003446524 -0.0341177590 0.07952772 [9,] -7.573498e-01 -0.012587447 0.004061202 0.0444005100 0.04376935 [10,] 1.154586e-01 0.003127545 0.005845689 -0.0075676043 -0.30295320 [11,] -4.609255e-04 -0.003317048 -0.024308993 -0.0035332301 0.02583902 [12,] 4.730960e-02 0.001047695 0.004598465 0.2254533731 0.48704881 [13,] -3.047283e-02 -0.001452908 -0.021027461 -0.7829094180 -0.05509983 [14,] 3.789495e-02 0.001287373 0.015629783 0.5764486262 -0.26695761 [,6] [,7] [,8] [,9] [,10] [1,] -0.212232549 0.09881472 -0.329397556 -0.13067797 0.063725698 [2,] -0.084101745 0.05674655 -0.190831764 -0.12127549 0.054889359 [3,] 0.470671293 -0.13442332 0.421298057 -0.05974113 0.024188103 [4,] 0.002765557 0.06280393 -0.009895878 -0.63041398 -0.633874206 [5,] -0.348970037 -0.17458199 0.630033245 0.10992323 -0.052910827 [6,] 0.048584324 0.05625359 -0.188006658 0.17769490 -0.028871736 [7,] 0.119347649 0.10986267 -0.407133854 0.16776649 0.002820665 [8,] 0.089444425 -0.38001485 -0.116950543 0.23074930 0.003055157 [9,] 0.043414503 -0.20792297 -0.058773593 0.23821823 0.036484538 [10,] -0.345030868 0.70637068 0.211023700 0.13128564 0.066544116 [11,] 0.010336186 -0.05708445 0.031196235 -0.56567341 0.747888280 [12,] 0.589920338 0.30490632 0.076863167 -0.06735025 -0.057838094 [13,] -0.068030869 -0.15894641 -0.047726561 -0.13334698 -0.093017561 [14,] -0.326018829 -0.33345933 -0.092856858 -0.16089617 -0.098997802 [,11] [,12] [,13] [,14] [1,] -0.408422219 -0.18530534 -0.28175180 0.27628218 [2,] -0.382397860 -0.17397805 -0.29307694 0.28761516 [3,] -0.241322800 -0.11713506 -0.30076063 0.29568698 [4,] -0.009187363 0.43375706 -0.01686117 0.08220472 [5,] 0.217900271 0.07652214 -0.29810032 0.29572434 [6,] 0.385963701 0.13946811 -0.28977255 0.28893239 [7,] 0.437641440 0.16717721 -0.27181805 0.27314760 [8,] -0.253652135 0.40038366 0.26429363 0.26763390 [9,] -0.216705167 0.31947800 0.28793316 0.28944113 [10,] -0.105041138 0.14508110 0.29867982 0.29882229 [11,] 0.171365092 0.26759456 0.06408804 0.09987810 [12,] 0.122167373 -0.25125645 0.29861358 0.29615188 [13,] 0.182730793 -0.34935928 0.29175718 0.28892148 [14,] 0.201613365 -0.37424884 0.27730440 0.27451198 $fbar [1] 0.011809548 -0.017982211 -0.002522520 0.027032523 -0.061218282 [6] -0.017170862 0.038149625 -0.005474273 0.030229173 -1.589373396 [11] -0.258801898 0.149491686 3.372912843 -0.019579358 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 ggsave(plot=fig1,&quot;2021-08-14-EX1(0).pdf&quot;,width=15,height=10) . %%R -w 200 -h 600 -r 120 fig_= grid.arrange(fig1_4,fig1_5,fig1_6,nrow=3) ggsave(plot=fig_,&quot;2021-08-14-EX1(1).pdf&quot;,width=2,height=6) . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 ggsave(plot=fig2,&quot;2021-08-14-EX1(2).pdf&quot;,width=20,height=6) . Appendix . _, (ax1,ax2) = plt.subplots(1,2) ax1.imshow(hst.eucliddistance[:7,:7],origin=&#39;lower&#39;) ax2.imshow(hst.snowdistance[:7,:7],origin=&#39;lower&#39;) plt.show() . brk=10000 p, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(l2distance(hst.snowygrounds[:,0:brk]),origin=&#39;lower&#39;) ax2.imshow(l2distance(hst.snowygrounds[:,brk:]),origin=&#39;lower&#39;) ax3.imshow(hst.snowdistance,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) #plt.show() p.savefig(&#39;temp.pdf&#39;,transparent=True) . y=hst.snowdistance[0] plt.plot(y,&#39;o--&#39;) plt.plot([0,1,2,4,5,6,10],y[[0,1,2,4,5,6,10]],&#39;o&#39;) plt.plot([3,7,8,9,11,12,13],y[[3,7,8,9,11,12,13]],&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fef40896040&gt;] . p, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(hst.euclidweight,origin=&#39;lower&#39;) ax2.imshow(hst.snowweight,origin=&#39;lower&#39;) ax3.imshow(hst.graphweight,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) #p.show() p.savefig(&#39;temp.pdf&#39;, transparent=True) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/09/18/(%EC%97%B0%EA%B5%AC)-hst-plots.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/09/18/(%EC%97%B0%EA%B5%AC)-hst-plots.html",
            "date": " • Sep 18, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "(연구) HST example 3",
            "content": "import . !rm -rf ~/.local/share/Trash/files/* import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow plt.style.use(&#39;ggplot&#39;) . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . load data . n=23 f=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Worldwide)/1000000 V=np.array(pd.read_csv(&quot;2021-08-15-MCU-ticket.csv&quot;).Film) W=np.array(pd.read_csv(&quot;2021-08-15-MCU-weights.csv&quot;,index_col=0))-np.eye(n,n) . HST . gs=GraphSignal(V,W,f) hst=HeavysnowTransform(gs) hst.snow(tau=40000,b=1) . HST (tau= 40000, b=1) 40000/40000 HST completed and all history is recorded. . hst.adjustingtheta(140) . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f70e6db2520&gt; . R &#54872;&#44221;&#51004;&#47196;.. . import rpy2 %load_ext rpy2.ipython . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . n=hst.n V=hst.V f=hst.f WEuclid= hst.euclidweight Wgraph= (hst.graphweight+hst.graphweight.T)/2 Whst= hst.snowweight W= hst.graphweight . %R -i n %R -i V %R -i f %R -i WEuclid %R -i Wgraph %R -i Whst %R -i W . &#50976;&#53364;&#47532;&#46300;&#50752; &#44536;&#47000;&#54532;&#46020;&#47700;&#51064;&#51032; &#51221;&#48372;&#47484; &#54540;&#46991;. . %%R -r 150 -w 2000 -h 660 source(&#39;heavysnow.R&#39;) dat_&lt;-tibble(V) dat_$f&lt;-as.vector(f) dat_$divlink&lt;-0 dat_$conlink&lt;-0 dat_$link&lt;-0 dat&lt;-dat_ for(i in 1:23){ dat$divlink[i]&lt;-sum(W[i,]) dat$conlink[i]&lt;-sum(W[,i]) dat$link[i]&lt;-sum(W[i,])+sum(W[i,]) } p1_&lt;-ggplot(dat)+geom_point(aes(x=f,y=divlink),size=3)+theme_light()+ geom_text_repel(aes(x=f,y=divlink,label=V),col=&quot;gray40&quot;)+ ylab(&quot;Out-degree&quot;)+xlab(&quot;Box office record&quot;)+ geom_hline(aes(yintercept=2),col=2,lty=2,lwd=0.5)+ geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ ggtitle(&quot;(a)&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ theme(axis.title.x=element_text(face=4,size=rel(1)))+ theme(axis.title.y=element_text(face=4,size=rel(1))) p2_&lt;-ggplot(dat)+geom_point(aes(x=f,y=conlink),size=3)+theme_light()+ geom_text_repel(aes(x=f,y=conlink,label=V),col=&quot;gray40&quot;)+ ylab(&quot;In-degree&quot;)+xlab(&quot;Box office record&quot;)+ geom_hline(aes(yintercept=3.75),col=2,lty=2,lwd=0.5)+ geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ ggtitle(&quot;(b)&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(2)))+ theme(axis.title.x=element_text(face=4,size=rel(1)))+ theme(axis.title.y=element_text(face=4,size=rel(1))) # p3_&lt;-ggplot(dat)+geom_point(aes(x=f,y=link),size=3)+theme_light()+ # geom_text_repel(aes(x=f,y=link,label=V),col=&quot;gray40&quot;)+ # ylab(&quot;Graph&quot;)+xlab(&quot;Box office record&quot;)+ # geom_hline(aes(yintercept=6.25),col=2,lty=2,lwd=0.5)+ # geom_vline(aes(xintercept=1000),col=2,lty=2,lwd=0.5)+ # ggtitle(&quot;(c)&quot;) p1&lt;-grid.arrange(p1_,p2_,ncol=2) #ggsave(plot=p1,&quot;./fig/p1.pdf&quot;,width=9,height=4.5) . gfft &#49688;&#54665;&#54616;&#44256; &#44208;&#44284;&#47484; &#51200;&#51109;&#54632;. . %%R g1&lt;-gfft(f,WEuclid) g2&lt;-gfft(f,Wgraph) g3&lt;-gfft(f,Whst) . &#50500;&#51060;&#44176;&#54540;&#46991; . %%R -r 150 -w 1000 -h 400 library(gridExtra) e1&lt;-eigenplot(g1)+ggtitle(&quot;(a) Euclid weights&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e2&lt;-eigenplot(g2)+ggtitle(&quot;(b) Graph weights&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) e3&lt;-eigenplot(g3)+ggtitle(&quot;(c) HST weights&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1))) s1&lt;-specplot(g1) s2&lt;-specplot(g2) s3&lt;-specplot(g3) p2&lt;-grid.arrange(e1,e2,e3,s1,s2,s3,nrow=2) #ggsave(plot=p2,&quot;./fig/p2.pdf&quot;,width=6,height=3) . &#48516;&#54644; . %%R -r 300 -w 2500 -h 1500 d1&lt;-decompose(f,WEuclid,V=V) # 0, 35000, 60000, 80000 d2&lt;-decompose(f,Wgraph,V=V) # 0, 35000, 60000, 80000 d3&lt;-decompose(f,Whst,V=V) # 0, 35000, 60000, 80000 d1$case&lt;-&quot;Euclid&quot; d2$case&lt;-&quot;Graph&quot; d3$case&lt;-&quot;HST&quot; decomprslt&lt;-rbind(d1,d2,d3) . %%R -r 150 -w 2000 -h 4200 decomp_dat&lt;- decomprslt %&gt;% group_by(case,eigenvectorindex) %&gt;% mutate(textsize= 10*(abs(fhat)&gt;50)) p3&lt;-ggplot(data=filter(decomp_dat,eigenvectorindex %in% 1:23))+ geom_col(aes(x=Vindex,y=fhat,fill=fhat&gt;0),width=0.7)+ geom_text_repel(aes(x=Vindex,y=fhat,label=V,size=textsize),col=1,fontface=4,alpha=0.8,segment.size=0.2,segment.color=&quot;gray60&quot;,min.segment.length=5,hjust=0.1)+ scale_radius(range = c(0,1.8))+ guides(size=FALSE)+ facet_grid(eigenvectorindex~case)+ geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+ theme(axis.text.x=element_text(angle=85,hjust=1,vjust=1,face=4,size=rel(0.7),colour=&quot;gray60&quot;))+ theme_light()+ theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) show(p3) # decomp_dat&lt;- decomprslt %&gt;% # group_by(case,eigenvectorindex) %&gt;% # mutate(textsize=(fhat&gt;mean(fhat)) *(fhat&gt;240) * ((case==&quot;Euclid&quot;)*1.7+ # (case!=&quot;Euclid&quot;)*(eigenvectorindex!=1)*1.7+ # (case!=&quot;Euclid&quot;)*(eigenvectorindex==1)*1)) # p3&lt;-ggplot(data=filter(decomp_dat,eigenvectorindex %in% 1:7))+ # geom_col(aes(x=Vindex,y=fhat,fill=fhat&gt;0),width=0.7)+ # geom_text_repel(aes(x=Vindex,y=fhat,label=V,size=textsize),col=1,fontface=4,alpha=0.8,segment.size=0.2,segment.color=&quot;gray60&quot;,min.segment.length=5,hjust=0.1)+ # scale_radius(range = c(0,1.8))+ # guides(size=FALSE)+ # facet_grid(eigenvectorindex~case)+ # geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ # xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+ # theme(axis.text.x=element_text(angle=85,hjust=1,vjust=1,face=4,size=rel(0.7),colour=&quot;gray60&quot;))+ # theme_light()+ # theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ # theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ # theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) # show(p3) #ggsave(plot=p3,&quot;./fig/p3.pdf&quot;,width=6,height=6) . %%R dat3_Euclid &lt;- decomp_dat %&gt;% filter(case==&quot;Euclid&quot;,eigenvectorindex==1) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) dat3_Euclid &lt;- left_join(dat,dat3_Euclid,by=&quot;V&quot;) for(j in 2:23){ decomp_filtered_dat_&lt;- decomp_dat %&gt;% filter(case==&quot;Euclid&quot;,eigenvectorindex==j) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) decomp_filtered_dat_&lt;- left_join(dat,decomp_filtered_dat_,by=&quot;V&quot;) dat3_Euclid&lt;-rbind(dat3_Euclid,decomp_filtered_dat_) } dat3_Graph &lt;- decomp_dat %&gt;% filter(case==&quot;Graph&quot;,eigenvectorindex==1) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) dat3_Graph &lt;- left_join(dat,dat3_Graph,by=&quot;V&quot;) for(j in 2:23){ decomp_filtered_dat_&lt;- decomp_dat %&gt;% filter(case==&quot;Graph&quot;,eigenvectorindex==j) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) decomp_filtered_dat_&lt;- left_join(dat,decomp_filtered_dat_,by=&quot;V&quot;) dat3_Graph&lt;-rbind(dat3_Graph,decomp_filtered_dat_) } dat3_HST &lt;- decomp_dat %&gt;% filter(case==&quot;HST&quot;,eigenvectorindex==1) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) dat3_HST &lt;- left_join(dat,dat3_HST,by=&quot;V&quot;) for(j in 2:23){ decomp_filtered_dat_&lt;- decomp_dat %&gt;% filter(case==&quot;HST&quot;,eigenvectorindex==j) %&gt;% select(V,case,eigenvectorindex,textsize,fhat) decomp_filtered_dat_&lt;- left_join(dat,decomp_filtered_dat_,by=&quot;V&quot;) dat3_HST&lt;-rbind(dat3_HST,decomp_filtered_dat_) } dat3&lt;-rbind(dat3_Euclid,dat3_Graph,dat3_HST) . %%R -r 300 -w 2000 -h 3000 hull_cyl &lt;- dat3 %&gt;% group_by(case,eigenvectorindex) %&gt;% filter(textsize&gt;0) %&gt;% slice(chull(f, divlink)) p4&lt;-ggplot(dat3%&gt;% filter(eigenvectorindex&lt;8))+geom_point(aes(x=f,y=divlink,col=textsize&gt;0,size=fhat*(fhat&gt;0)),alpha=0.8)+ geom_shape(data=hull_cyl%&gt;% filter(eigenvectorindex&lt;8) ,aes(x=f,y=divlink),alpha=0.05,col=&quot;gray30&quot;,radius=0.05,expand=0.05)+ facet_grid(eigenvectorindex~case)+ scale_size_continuous(range=c(2,2.5))+ scale_color_manual(values=c(&quot;gray80&quot;, &quot;gray20&quot;))+ ylim(0,8)+xlim(0,3000)+ guides(alpha=F)+ guides(col=F)+ guides(size=F)+ ylab(&quot;&quot;)+xlab(&quot;&quot;)+ geom_hline(aes(yintercept=2),col=&quot;gray30&quot;,lty=2,lwd=0.2)+ geom_vline(aes(xintercept=1000),col=&quot;gray30&quot;,lty=2,lwd=0.2)+ theme_light()+ theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) show(p4) #ggsave(plot=p4,&quot;./fig/p4.pdf&quot;,width=7,height=7) . %%R -r 300 -w 2000 -h 3000 hull_cyl &lt;- dat3 %&gt;% group_by(case,eigenvectorindex) %&gt;% filter(textsize&gt;0) %&gt;% slice(chull(f, conlink)) p5&lt;-ggplot(dat3%&gt;% filter(eigenvectorindex&lt;8))+geom_point(aes(x=f,y=conlink,col=textsize&gt;0,size=fhat*(fhat&gt;0)),alpha=0.8)+ geom_shape(data=hull_cyl%&gt;% filter(eigenvectorindex&lt;8) ,aes(x=f,y=conlink),alpha=0.05,col=&quot;gray30&quot;,radius=0.05,expand=0.05)+ facet_grid(eigenvectorindex~case)+ scale_size_continuous(range=c(2,2.5))+ scale_color_manual(values=c(&quot;gray80&quot;, &quot;gray20&quot;))+ ylim(0,10)+xlim(0,3000)+ guides(col=F)+ guides(alpha=F)+ guides(size=F)+ ylab(&quot;&quot;)+xlab(&quot;&quot;)+ geom_hline(aes(yintercept=3.75),col=&quot;gray30&quot;,lty=2,lwd=0.2)+ geom_vline(aes(xintercept=1000),col=&quot;gray30&quot;,lty=2,lwd=0.2)+ theme_light()+ theme(strip.text.x = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 10, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(1.5))) show(p5) #ggsave(plot=p5,&quot;./fig/p5.pdf&quot;,width=7,height=7) . %%R -r 300 -w 2000 -h 1500 p_&lt;-grid.arrange(p4,p5,ncol=2) #ggsave(plot=p6,&quot;./fig/p6.pdf&quot;,width=10,height=12) . %%R -r 200 -w 2000 -h 3000 p6&lt;-grid.arrange(p1,p_,nrow=2,heights=c(3,5)) . %run heavysnow gs=GraphSignal(V,hst.snowweight,f) spa=SpectralAnalysis(gs) . spa.n . 23 . spa.graphFouriertransform() spa.decompose() . spa.V . array([&#39;Iron Man&#39;, &#39;The Incredible Hulk&#39;, &#39;Iron Man 2&#39;, &#39;Thor&#39;, &#39;Captain America: The First Avenger&#39;, &#39;The Avengers&#39;, &#39;Iron Man 3&#39;, &#39;Thor: The Dark World&#39;, &#39;Captain America: The Winter Soldier&#39;, &#39;Guardians of the Galaxy&#39;, &#39;Avengers: Age of Ultron&#39;, &#39;Ant-man&#39;, &#39;Captain America: Civil War&#39;, &#39;Doctor Strange&#39;, &#39;Guardians of the Galaxy Vol 2&#39;, &#39;Spider-man: Homecoming&#39;, &#39;Thor: Ragnarok&#39;, &#39;Black Panther&#39;, &#39;Avengers: Infinity War&#39;, &#39;Ant-man and the Wasp&#39;, &#39;Captain Marvel&#39;, &#39;Avengers: Endgame&#39;, &#39;Spider-man: Far From Home&#39;], dtype=object) . df=pd.DataFrame(spa.components) df . 0 1 2 3 4 5 6 7 8 9 ... 13 14 15 16 17 18 19 20 21 22 . 0 6.247290e-15 | 1.707095e+03 | -9.827837e-14 | -8.486396e-14 | 2.899762e-14 | 6.041645e-15 | -1.187456e-14 | -3.502007e-13 | -1.193541e-13 | 3.794379e-13 | ... | -1.121921e+03 | -3.548465e-14 | -1.892759e-14 | 4.544603e-13 | -1.900950e-14 | 8.032471e-14 | -8.990956e-10 | -1.633610e-13 | -7.430218e-14 | -6.028971e-15 | . 1 2.712215e-16 | 1.058137e-08 | -5.007274e-14 | 3.386473e-17 | 1.420744e-11 | -1.437544e-15 | -1.321678e-14 | 4.039994e-15 | -2.833873e-14 | -1.633926e-10 | ... | -6.954407e-09 | -4.113024e-11 | 4.516539e-14 | 5.644640e-16 | -3.435360e-04 | 9.652342e-16 | 1.450493e+02 | 6.727200e-10 | 4.158595e-16 | -1.646478e-14 | . 2 5.567872e-01 | -3.517889e-13 | 4.205928e+00 | 3.135672e-01 | 1.237232e-13 | 1.002442e+01 | 1.419019e+00 | -6.420902e-01 | -2.586033e+00 | -3.800564e-15 | ... | 4.504242e-14 | 3.881354e-15 | -7.222631e+00 | -1.270091e-01 | -3.911058e-13 | 1.458953e+03 | -6.970078e-17 | -4.258602e-14 | -7.984930e+02 | -1.051491e+00 | . 3 -1.059263e-14 | -4.888031e-13 | -2.398614e-13 | -5.563074e-14 | 4.899172e-01 | 5.509354e-14 | 3.093273e-14 | -5.194113e-13 | -5.543531e-14 | 5.360109e+02 | ... | 2.551620e-13 | -1.247248e+02 | -2.667641e-14 | 1.290511e-13 | -1.099014e-04 | -4.141358e-14 | -1.039357e-10 | 3.755068e+01 | -1.017089e-14 | 5.754851e-14 | . 4 -1.338283e-14 | 3.813154e-13 | 5.864303e-14 | 6.890875e-14 | 1.634047e+02 | -5.976314e-14 | -2.108992e-14 | 2.695599e-13 | 7.059745e-14 | -3.468382e+02 | ... | -4.555950e-13 | -6.202443e+01 | 3.944487e-13 | -2.381748e-13 | -2.477574e-03 | -3.908796e-14 | -2.329564e-09 | 6.160302e+02 | -3.849599e-14 | -2.522857e-14 | . 5 6.268624e-01 | 5.025556e-14 | 3.621003e+00 | 3.780309e+02 | -3.789023e-13 | -9.031218e-02 | -6.086432e-01 | 1.451182e+03 | -8.818405e-01 | 2.446920e-13 | ... | -4.128901e-13 | -1.945880e-14 | 1.479923e+00 | -3.154052e+02 | 2.823262e-20 | 2.283802e-02 | -1.940234e-16 | -4.831462e-14 | -4.437603e-02 | 6.842734e-01 | . 6 3.634492e+00 | 0.000000e+00 | 2.251986e+01 | 3.648403e+02 | 1.237232e-13 | -5.152353e-01 | -5.098148e+00 | -4.000544e+02 | -8.218727e+00 | -8.219362e-14 | ... | 3.071239e-13 | 4.246548e-15 | 1.439908e+01 | 1.215892e+03 | -2.276049e-20 | 1.454592e-01 | 1.091523e-16 | 2.670230e-14 | -3.092549e-01 | 4.780988e+00 | . 7 -1.469804e+00 | 2.680297e-13 | -1.084964e+01 | -2.645684e-01 | 6.263487e-13 | 1.490922e+02 | 1.817207e+00 | 1.485871e+00 | 5.348931e+00 | -2.997392e-13 | ... | 2.165643e-13 | 2.126956e-14 | 1.003275e+01 | 1.777094e+00 | 9.978330e-19 | -1.753933e+00 | 2.539023e-15 | 1.997032e-13 | 6.687601e+00 | -7.156614e-01 | . 8 -8.116393e+00 | 1.675185e-13 | -6.823096e+01 | -2.585005e+00 | -1.546540e-13 | 8.415274e+01 | 6.742951e+00 | 1.147843e+01 | 3.914723e+01 | -5.540890e-14 | ... | -1.694475e-13 | 6.807886e-16 | 7.498935e+01 | 1.348579e+01 | -3.385392e-18 | -6.612900e+00 | -3.888607e-15 | 1.516414e-13 | 2.824586e+01 | -6.751284e-01 | . 9 -1.457985e+02 | 1.340148e-13 | 9.688547e+02 | -1.627500e-01 | 3.093080e-14 | 7.405009e-01 | -1.841870e+00 | 2.753373e+00 | -5.049281e+01 | 2.737548e-14 | ... | -8.177666e-14 | -7.010920e-15 | -8.832644e+00 | 4.080923e+00 | 5.407829e-20 | -7.998628e-02 | 3.110801e-15 | -6.383287e-14 | 3.682641e-01 | 1.447229e+00 | . 10 6.907220e+01 | 2.680297e-13 | 6.433580e+02 | -6.595574e-01 | 4.021004e-13 | -4.700005e-01 | 4.265512e+00 | -3.580883e+00 | 6.750131e+02 | -3.291044e-14 | ... | -2.470088e-13 | -1.671705e-14 | 3.531860e+01 | -7.096645e+00 | -6.576134e-19 | 3.818266e-02 | 5.714582e-15 | -1.327708e-13 | -2.015752e-01 | -6.434574e+00 | . 11 1.463660e+01 | 1.340148e-13 | 1.103874e+02 | -3.273026e+00 | 4.059667e-13 | 5.031685e+00 | 1.379003e+02 | 4.407592e+00 | -5.729486e+01 | -1.630527e-13 | ... | -1.519603e-13 | 2.150495e-14 | 2.642115e+02 | -1.013413e+00 | 2.467838e-18 | -1.329087e+00 | 1.306457e-14 | -3.994124e-14 | 5.810507e+00 | 1.103411e+02 | . 12 2.042957e+01 | 6.700742e-14 | 1.604964e+02 | 1.760594e+00 | -6.031506e-13 | -4.010409e+00 | 2.059552e+01 | -4.051919e+00 | -1.275852e+02 | 6.623007e-14 | ... | 1.551758e-13 | -1.177289e-14 | 1.186266e+03 | -3.177545e+00 | 2.097188e-18 | 1.912961e-01 | -7.902333e-15 | -9.644055e-14 | -1.219998e+00 | -7.250937e+01 | . 13 6.668434e+01 | 1.340148e-13 | 4.618421e+02 | -1.859682e+01 | -6.186160e-13 | -2.507029e+01 | -1.107716e+02 | 6.813721e+00 | -2.345541e+02 | 1.556516e-14 | ... | 1.339132e-13 | 4.870343e-15 | 2.608371e+02 | -5.710231e+01 | -2.579978e-18 | 3.369735e+00 | 1.420847e-17 | 1.264037e-13 | -2.913932e+01 | 8.693155e+01 | . 14 3.422525e-14 | -8.940864e-14 | 1.037470e-13 | -3.364652e-14 | 1.082258e+03 | -4.474060e-14 | -1.322970e-13 | 5.440031e-13 | -4.988318e-13 | -3.546742e+01 | ... | 2.216706e-13 | -9.831858e+00 | 6.181378e-13 | -1.170664e-13 | 1.322688e-02 | -5.095742e-13 | 1.623088e-08 | -1.732161e+02 | 1.503337e-13 | -2.027809e-14 | . 15 -6.106282e-15 | -4.014393e-13 | -3.966886e-14 | 1.328179e-14 | -1.604103e-02 | 1.036244e-14 | -6.330841e-15 | -4.115207e-14 | 2.341767e-14 | -8.891039e-04 | ... | -3.211852e-13 | -1.551127e-04 | 4.475967e-14 | -3.631372e-14 | 8.801798e+02 | 6.468891e-13 | 1.106361e-03 | 3.872341e-03 | -3.664909e-13 | 5.779847e-15 | . 16 -6.667865e+01 | 2.680297e-13 | -4.738936e+02 | -1.007199e+02 | 1.237232e-13 | -9.769302e+01 | -6.283744e+00 | 2.978993e+02 | 2.671375e+02 | -6.366001e-15 | ... | 1.847935e-13 | -1.586313e-15 | 2.938494e+02 | 2.466987e+02 | -2.673912e-19 | -5.211991e+01 | 5.876455e-21 | -1.717282e-14 | -1.079660e+02 | 2.525438e+01 | . 17 -8.130269e+00 | 1.340148e-13 | -6.563066e+01 | -3.230602e+02 | -1.546540e-13 | 5.434013e+01 | -2.813232e+01 | 9.334007e+02 | 4.237280e+01 | 3.274076e-15 | ... | -6.704179e-14 | 8.977368e-16 | 1.263153e+02 | 7.489960e+02 | 3.979446e-20 | 1.464130e+02 | -2.815570e-21 | 9.029172e-15 | 1.173458e+02 | 1.800376e+01 | . 18 -1.187357e+01 | 1.340148e-13 | -8.462116e+01 | 5.170168e+01 | 8.179912e-63 | -1.000490e+01 | -7.699697e+00 | -1.503880e+02 | 4.833255e+01 | 1.592742e-14 | ... | 2.236371e-14 | 2.012683e-15 | 7.302472e+01 | -1.224382e+02 | -2.141600e-18 | 1.430858e+03 | -1.839765e-20 | 1.335035e-14 | 7.841594e+02 | 8.491160e+00 | . 19 5.695819e-04 | 1.092131e-02 | 4.100482e-03 | -1.356002e-03 | 1.068875e+02 | -5.208507e-04 | 5.581691e-04 | 3.978264e-03 | -2.372015e-03 | 2.308013e+02 | ... | 7.177600e-03 | 5.073098e+01 | -4.074587e-03 | 3.292610e-03 | -4.969979e-03 | 2.041970e-03 | 1.247561e+02 | 2.112912e+02 | 8.552650e-04 | -5.052201e-04 | . 20 5.899266e+01 | 1.674174e+02 | 4.246946e+02 | -1.404436e+02 | -4.895903e+01 | -5.394548e+01 | 5.781061e+01 | 4.120362e+02 | -2.456740e+02 | -1.057168e+02 | ... | 1.100285e+02 | -2.323695e+01 | -4.220126e+02 | 3.410218e+02 | -1.115816e-03 | 2.114906e+02 | 2.010064e+01 | -9.678036e+01 | 8.858139e+01 | -5.232658e+01 | . 21 8.370471e+00 | 1.155986e+03 | 6.025994e+01 | -1.992755e+01 | 1.303271e+02 | -7.654326e+00 | 8.202750e+00 | 5.846383e+01 | -3.485870e+01 | 2.814142e+02 | ... | 7.597260e+02 | 6.185588e+01 | -5.987939e+01 | 4.838760e+01 | 2.970488e-03 | 3.000842e+01 | -5.351234e+01 | 2.576257e+02 | 1.256882e+01 | -7.424621e+00 | . 22 -1.570579e+01 | 1.244926e+03 | -1.130677e+02 | 3.739071e+01 | -1.144332e+02 | 1.436206e+01 | -1.539109e+01 | -1.096976e+02 | 6.540651e+01 | -2.470946e+02 | ... | 8.181785e+02 | -5.431231e+01 | 1.123536e+02 | -9.079122e+01 | -2.608172e-03 | -5.630576e+01 | 4.698508e+01 | -2.262072e+02 | -2.358328e+01 | 1.393106e+01 | . 23 rows × 23 columns . df=df.stack().reset_index().rename(columns={&#39;level_0&#39;:&#39;vertex&#39;,&#39;level_1&#39;:&#39;comp&#39;,0:&#39;fhat&#39;}) . df . vertex comp fhat . 0 0 | 0 | 6.247290e-15 | . 1 0 | 1 | 1.707095e+03 | . 2 0 | 2 | -9.827837e-14 | . 3 0 | 3 | -8.486396e-14 | . 4 0 | 4 | 2.899762e-14 | . ... ... | ... | ... | . 524 22 | 18 | -5.630576e+01 | . 525 22 | 19 | 4.698508e+01 | . 526 22 | 20 | -2.262072e+02 | . 527 22 | 21 | -2.358328e+01 | . 528 22 | 22 | 1.393106e+01 | . 529 rows × 3 columns . df[&#39;fill&#39;]= df.fhat &gt;0 . df . vertex comp fhat fill . 0 0 | 0 | 6.247290e-15 | True | . 1 0 | 1 | 1.707095e+03 | True | . 2 0 | 2 | -9.827837e-14 | False | . 3 0 | 3 | -8.486396e-14 | False | . 4 0 | 4 | 2.899762e-14 | True | . ... ... | ... | ... | ... | . 524 22 | 18 | -5.630576e+01 | False | . 525 22 | 19 | 4.698508e+01 | True | . 526 22 | 20 | -2.262072e+02 | False | . 527 22 | 21 | -2.358328e+01 | False | . 528 22 | 22 | 1.393106e+01 | True | . 529 rows × 4 columns . n=23 fig=ggplot(df) facet=facet_wrap(&#39;comp&#39;,ncol=1) aes1=aes(x=&#39;vertex&#39;,y=&#39;fhat&#39;,fill=&#39;fill&#39;) aes3=aes(x=&#39;vertex&#39;,y=&#39;fhat&#39;,label=spa.V) geom1=geom_col(aes1,alpha=0.8) geom2=geom_hline(yintercept = 0,linetype=&#39;dashed&#39;,color=&#39;gray&#39;,size=0.3) #geom3=geom_text_repel(aes(x=Vindex,y=fhat,label=V) . fig+facet+geom1+geom2+xlab(&quot;&quot;)+ylab(&quot;&quot;)+theme(figure_size=(3, 3*n))+theme(legend_position=&quot;none&quot;) . &lt;ggplot: (8757733928385)&gt; .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/15/(%EC%97%B0%EA%B5%AC)-HST-example-3.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/15/(%EC%97%B0%EA%B5%AC)-HST-example-3.html",
            "date": " • Aug 15, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "(연구) HST example 1, Appendix 추가 (2) 이거로하자.",
            "content": "Import . import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=0 W[n-1,n-1]=0 . gs=GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . %run heavysnow hst=HeavysnowTransform(gs) hst.snow(tau=100000,b=0.01,maxflow=3) . HST (tau= 100000, b=0.01) 100000/100000 HST completed and all history is recorded. . plt.imshow(hst.snowdistance) . &lt;matplotlib.image.AxesImage at 0x7f534083b910&gt; . theta=100 hst.snowweight=np.exp(-hst.snowdistance/(theta*hst.tau*hst.b**2))-np.eye(n,n) plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f533fff6370&gt; . - $ theta=10, theta=100$ 에서의 결과가 우수하다. . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.6 ✔ dplyr 1.0.7 ✔ tidyr 1.1.4 ✔ stringr 1.4.0 ✔ readr 2.1.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.301268e+00 1.300349e+00 1.296342e+00 1.294881e+00 1.268095e+00 [6] 1.263938e+00 1.248920e+00 1.245402e+00 1.041698e+00 1.013745e+00 [11] 8.729394e-01 8.348748e-01 1.754709e-02 4.376914e-17 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -0.001398168 -0.0056587283 0.5863527466 -0.0583647058 -0.4789974789 [2,] 0.001333821 0.0058593930 -0.7772333034 0.0605105060 -0.1559201804 [3,] -0.001481331 -0.0048257420 0.2153138063 0.0350251898 0.7716065161 [4,] -0.019171975 -0.0586391874 0.0018308013 -0.0003184093 0.0154007570 [5,] 0.003608568 0.0117026553 0.0143839962 0.1421498264 -0.3576207907 [6,] 0.005903810 0.0103448701 -0.0641206386 -0.7642649846 0.0889577567 [7,] -0.005751817 -0.0095239510 0.0361955955 0.6218712682 0.1172683092 [8,] 0.204626013 0.5997077056 0.0057698700 0.0066005825 -0.0081481386 [9,] -0.254973435 -0.7133477664 -0.0082090498 -0.0107517923 -0.0128666447 [10,] 0.055333846 0.1275796574 0.0023226635 0.0081125749 0.0250312316 [11,] 0.005159201 0.0007135897 -0.0004707414 -0.0208954484 -0.0042146665 [12,] -0.219549886 0.1114176595 0.0005972330 0.0005503738 -0.0125745479 [13,] 0.741986866 -0.2553431158 -0.0005080753 0.0026057124 0.0003471925 [14,] -0.539283947 0.1836618697 0.0002713586 -0.0022506421 0.0066359865 [,6] [,7] [,8] [,9] [,10] [,11] [1,] -0.020607627 -0.26179707 -0.08260651 0.07619599 -0.003725175 0.37426011 [2,] -0.008187545 -0.12136573 -0.03812955 0.07719789 -0.001076464 0.37011022 [3,] 0.028703882 0.24268803 0.07126066 0.04979453 0.001436657 0.29444681 [4,] -0.031602849 -0.06155511 0.07313441 0.76108645 0.517402552 -0.06083332 [5,] 0.010376566 0.72149373 0.25130784 -0.08940355 0.012918082 -0.26253514 [6,] -0.003604496 -0.19974648 -0.07114434 -0.15108818 -0.020037649 -0.37420304 [7,] -0.004017217 -0.43258366 -0.16215638 -0.15109853 -0.056014296 -0.41935454 [8,] 0.215616049 0.12139218 -0.39305611 -0.12685030 0.058571253 0.24591713 [9,] 0.114768042 0.07760414 -0.19883685 -0.19750668 -0.002238876 0.22544484 [10,] -0.546277417 -0.19545727 0.61063310 -0.16620215 -0.048329952 0.14710183 [11,] 0.015046485 0.03767505 -0.02901718 0.50073385 -0.841674742 -0.04573754 [12,] 0.686275639 -0.16071864 0.40711397 0.03612832 0.041182458 -0.14792485 [13,] -0.070824399 0.05010760 -0.14817612 0.08355150 0.077297959 -0.20515971 [14,] -0.404043423 0.13320281 -0.36241112 0.10539277 0.081931584 -0.22075686 [,12] [,13] [,14] [1,] 0.2032766 0.28582051 0.2803928 [2,] 0.2008863 0.29281115 0.2874251 [3,] 0.1642522 0.29915001 0.2942136 [4,] -0.3530485 0.01894120 0.1007775 [5,] -0.1202381 0.29621078 0.2973967 [6,] -0.1698507 0.28757832 0.2897438 [7,] -0.1949741 0.26682973 0.2713141 [8,] -0.4003735 -0.26460535 0.2688948 [9,] -0.3344536 -0.28735426 0.2877044 [10,] -0.1990403 -0.30038207 0.2983692 [11,] -0.1340044 -0.07841327 0.1080831 [12,] 0.2751681 -0.30002000 0.2933704 [13,] 0.3636494 -0.29292101 0.2857888 [14,] 0.3843035 -0.27621973 0.2692871 $fbar [1] -0.03840660 -0.01357526 -0.00834666 -0.01148325 0.03274637 -0.05379841 [7] -0.02178817 0.04888674 0.18326789 1.63399056 0.04680218 -0.21314278 [13] -3.35254844 -0.02437688 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 ggsave(plot=fig1,&quot;2021-08-14-EX1(0).pdf&quot;,width=15,height=10) . %%R -w 200 -h 600 -r 120 fig_= grid.arrange(fig1_4,fig1_5,fig1_6,nrow=3) ggsave(plot=fig_,&quot;2021-08-14-EX1(1).pdf&quot;,width=2,height=6) . %%R gfftrslt_HST[[1]] %&gt;% sum #print(n) . [1] 14 . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 ggsave(plot=fig2,&quot;2021-08-14-EX1(2).pdf&quot;,width=20,height=6) . Appendix . _, (ax1,ax2) = plt.subplots(1,2) ax1.imshow(hst.eucliddistance[:7,:7],origin=&#39;lower&#39;) ax2.imshow(hst.snowdistance[:7,:7],origin=&#39;lower&#39;) plt.show() . brk=10000 p, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(l2distance(hst.snowygrounds[:,0:brk]),origin=&#39;lower&#39;) ax2.imshow(l2distance(hst.snowygrounds[:,brk:]),origin=&#39;lower&#39;) ax3.imshow(hst.snowdistance,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) #plt.show() p.savefig(&#39;temp.pdf&#39;,transparent=True) . y=hst.snowdistance[0] plt.plot(y,&#39;o--&#39;) plt.plot([0,1,2,4,5,6,10],y[[0,1,2,4,5,6,10]],&#39;o&#39;) plt.plot([3,7,8,9,11,12,13],y[[3,7,8,9,11,12,13]],&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fef40896040&gt;] . p, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(hst.euclidweight,origin=&#39;lower&#39;) ax2.imshow(hst.snowweight,origin=&#39;lower&#39;) ax3.imshow(hst.graphweight,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) #p.show() p.savefig(&#39;temp.pdf&#39;, transparent=True) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/14/(%EC%97%B0%EA%B5%AC)-HST-example-1,-Appendix-%EC%B6%94%EA%B0%80-(2)-%EC%9D%B4%EA%B1%B0%EB%A1%9C%ED%95%98%EC%9E%90.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/14/(%EC%97%B0%EA%B5%AC)-HST-example-1,-Appendix-%EC%B6%94%EA%B0%80-(2)-%EC%9D%B4%EA%B1%B0%EB%A1%9C%ED%95%98%EC%9E%90.html",
            "date": " • Aug 14, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "(연구) HST example 1, Appendix 추가 (1)",
            "content": "Import . import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=0 W[n-1,n-1]=0 . gs=GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . %run heavysnow hst=HeavysnowTransform(gs) hst.snow(tau=1000000,b=0.001,maxflow=2) . HST (tau= 1000000, b=0.001) 1000000/1000000 HST completed and all history is recorded. . plt.imshow(hst.snowdistance) . NameError Traceback (most recent call last) /tmp/ipykernel_1906/1599524499.py in &lt;module&gt; -&gt; 1 plt.imshow(hst.snowdistance) NameError: name &#39;hst&#39; is not defined . hst.snowdistance/(hst.b**2*hst.tau) . array([[ 0. , 6.62729, 21.09601, 513.21229, 144.99293, 174.78548, 229.86424, 1367.48288, 1469.01427, 1541.47081, 1104.37238, 1939.21254, 2003.70522, 1972.38438], [ 6.62729, 0. , 8.70526, 478.68804, 114.41082, 140.73199, 190.27027, 1290.38981, 1388.36882, 1458.73142, 1027.58343, 1847.46733, 1911.12211, 1884.55171], [ 21.09601, 8.70526, 0. , 450.58642, 88.31524, 111.50557, 156.10131, 1223.00711, 1319.36988, 1388.02978, 961.47749, 1769.22195, 1832.48321, 1808.77811], [ 513.21229, 478.68804, 450.58642, 0. , 327.31126, 348.63769, 384.03813, 429.56457, 503.89864, 568.92602, 801.50731, 780.10205, 830.37839, 815.65883], [ 144.99293, 114.41082, 88.31524, 327.31126, 0. , 11.23731, 35.08409, 789.55023, 865.05526, 922.90664, 549.19535, 1224.63325, 1280.31923, 1264.28261], [ 174.78548, 140.73199, 111.50557, 348.63769, 11.23731, 0. , 15.40954, 751.0249 , 822.78351, 876.66509, 497.98752, 1176.15764, 1231.98094, 1218.47054], [ 229.86424, 190.27027, 156.10131, 384.03813, 35.08409, 15.40954, 0. , 687.59144, 753.09867, 802.81247, 418.45038, 1095.83864, 1150.6394 , 1140.63196], [1367.48288, 1290.38981, 1223.00711, 429.56457, 789.55023, 751.0249 , 687.59144, 0. , 10.94633, 30.68243, 331.93456, 90.56094, 114.65644, 120.8578 ], [1469.01427, 1388.36882, 1319.36988, 503.89864, 865.05526, 822.78351, 753.09867, 10.94633, 0. , 12.82752, 318.12425, 64.99807, 86.80923, 94.62813], [1541.47081, 1458.73142, 1388.02978, 568.92602, 922.90664, 876.66509, 802.81247, 30.68243, 12.82752, 0. , 298.63121, 46.70485, 65.23165, 72.66127], [1104.37238, 1027.58343, 961.47749, 801.50731, 549.19535, 497.98752, 418.45038, 331.93456, 318.12425, 298.63121, 0. , 411.02768, 433.02044, 437.0482 ], [1939.21254, 1847.46733, 1769.22195, 780.10205, 1224.63325, 1176.15764, 1095.83864, 90.56094, 64.99807, 46.70485, 411.02768, 0. , 9.11974, 18.80406], [2003.70522, 1911.12211, 1832.48321, 830.37839, 1280.31923, 1231.98094, 1150.6394 , 114.65644, 86.80923, 65.23165, 433.02044, 9.11974, 0. , 6.17182], [1972.38438, 1884.55171, 1808.77811, 815.65883, 1264.28261, 1218.47054, 1140.63196, 120.8578 , 94.62813, 72.66127, 437.0482 , 18.80406, 6.17182, 0. ]]) . theta=10 hst.snowweight=np.exp(-hst.snowdistance/(theta*hst.tau*hst.b**2))-np.eye(n,n) plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7fb9b4cd0e80&gt; . np.std(W), np.std(hst.snowweight) . (0.3391993905835645, 0.40491892481254094) . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.239762e+00 1.235845e+00 1.234708e+00 1.224906e+00 1.218730e+00 [6] 1.218183e+00 1.217879e+00 1.216651e+00 1.127025e+00 1.064638e+00 [11] 1.002672e+00 9.980700e-01 9.304995e-04 1.450065e-16 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] 0.0001751968 -1.874198e-06 8.688271e-06 -0.0003894479 7.218527e-01 [2,] 0.0001675820 -1.769072e-06 8.327460e-06 -0.0003577999 -6.886049e-01 [3,] 0.0001705841 -1.806950e-06 8.622934e-06 -0.0003981254 -3.919519e-02 [4,] 0.0033579460 -4.149941e-05 1.431600e-04 -0.0065447260 1.120350e-04 [5,] -0.0003877013 5.201596e-06 -1.764374e-05 0.0011478880 -1.511037e-02 [6,] -0.0003146498 3.621689e-06 -1.448185e-05 0.0006741380 -2.570620e-02 [7,] -0.0002767749 1.996564e-06 -1.421575e-05 0.0002168011 4.823331e-02 [8,] -0.7003908056 -3.035159e-04 -4.275780e-03 0.3526586564 2.074735e-05 [9,] 0.7130429771 4.696132e-03 -2.668838e-03 0.3725322326 1.392201e-05 [10,] 0.0193130597 -1.647804e-03 -5.409646e-03 -0.8541110478 -3.705826e-05 [11,] -0.0026756321 2.034397e-04 2.152887e-04 0.0153985420 -2.972710e-05 [12,] -0.0145963589 -1.206721e-01 8.109795e-01 0.0467146386 2.461515e-06 [13,] -0.0167962080 7.585750e-01 -2.966192e-01 0.0470234716 2.785654e-06 [14,] -0.0116371385 -6.402948e-01 -5.042564e-01 0.0516745150 2.789755e-06 [,6] [,7] [,8] [,9] [,10] [1,] 1.477770e-02 -3.710372e-01 1.296249e-02 0.406366874 0.012539630 [2,] 9.836523e-02 -4.266795e-01 -8.148809e-03 0.397563086 0.012308231 [3,] -8.954434e-02 8.150322e-01 -3.912226e-02 0.385474053 0.012031186 [4,] 9.263468e-04 3.061411e-04 -2.502940e-03 0.177426484 -0.055612410 [5,] -8.393012e-02 1.174890e-02 8.226179e-01 -0.383537331 -0.008327158 [6,] -6.657007e-01 -1.029900e-01 -4.610312e-01 -0.406055668 -0.008831733 [7,] 7.293044e-01 7.248038e-02 -3.301185e-01 -0.429530203 -0.009617061 [8,] 1.986048e-04 2.980291e-05 -2.784778e-04 -0.005358784 0.453576824 [9,] 1.378324e-04 1.534449e-05 -1.531722e-04 -0.006422529 0.414665547 [10,] -3.273898e-04 -6.168711e-05 5.097510e-04 -0.006853290 0.300908148 [11,] -3.717634e-04 -1.569977e-05 3.658232e-04 0.008361464 -0.382783300 [12,] 1.966381e-05 5.408451e-06 -4.164378e-05 0.004813031 -0.349545727 [13,] 2.201436e-05 6.311993e-06 -4.828417e-05 0.005052496 -0.360651427 [14,] 2.172082e-05 6.394810e-06 -4.823945e-05 0.005032854 -0.359463572 [,11] [,12] [,13] [,14] [1,] 0.07901983 0.06493090 -0.28202999 0.29254246 [2,] 0.07779727 0.06393416 -0.28250301 0.29303537 [3,] 0.07642389 0.06281714 -0.28287512 0.29342350 [4,] -0.76670668 -0.61029518 -0.04582622 0.05446431 [5,] -0.03238393 -0.02602054 -0.28352826 0.29428443 [6,] -0.03330112 -0.02715152 -0.28286723 0.29360735 [7,] -0.03555637 -0.02958278 -0.28167310 0.29238523 [8,] 0.06384719 -0.12759690 0.28704413 0.27668335 [9,] 0.06084135 -0.11297776 0.29189710 0.28125061 [10,] 0.05175621 -0.08194683 0.29707696 0.28609016 [11,] 0.59036840 -0.70364218 0.06943132 0.06851660 [12,] -0.10117517 0.16314267 0.29385003 0.28275430 [13,] -0.10360119 0.16692827 0.29305198 0.28198418 [14,] -0.10315258 0.16627589 0.29306978 0.28200174 $fbar [1] -4.565133e-03 1.026278e-04 -2.301774e-03 -6.344255e-03 -1.321925e-03 [6] -1.901611e-03 1.768618e-03 -8.854919e-05 1.950480e-01 4.165576e-01 [11] -1.620559e+00 1.582450e-01 3.336209e+00 -8.256629e-02 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 ggsave(plot=fig1,&quot;temp.pdf&quot;,width=15,height=10) . %%R -w 200 -h 600 -r 120 fig_= grid.arrange(fig1_4,fig1_5,fig1_6,nrow=3) ggsave(plot=fig_,&quot;spectrum.pdf&quot;,width=2,height=6) . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) . Appendix . _, (ax1,ax2) = plt.subplots(1,2) ax1.imshow(hst.eucliddistance[:7,:7],origin=&#39;lower&#39;) ax2.imshow(hst.snowdistance[:7,:7],origin=&#39;lower&#39;) plt.show() . brk=500 _, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(l2distance(hst.snowygrounds[:,0:brk]),origin=&#39;lower&#39;) ax2.imshow(l2distance(hst.snowygrounds[:,brk:]),origin=&#39;lower&#39;) ax3.imshow(hst.snowdistance,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) plt.show() . y=hst.snowdistance[0] plt.plot(y,&#39;o--&#39;) plt.plot([0,1,2,4,5,6,10],y[[0,1,2,4,5,6,10]],&#39;o&#39;) plt.plot([3,7,8,9,11,12,13],y[[3,7,8,9,11,12,13]],&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fb9b65eb610&gt;] . p, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(hst.euclidweight,origin=&#39;lower&#39;) ax2.imshow(hst.snowweight,origin=&#39;lower&#39;) ax3.imshow(hst.graphweight,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) #p.show() p.savefig(&#39;temp.pdf&#39;, transparent=True) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/14/(%EC%97%B0%EA%B5%AC)-HST-example-1,-Appendix-%EC%B6%94%EA%B0%80-(1).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/14/(%EC%97%B0%EA%B5%AC)-HST-example-1,-Appendix-%EC%B6%94%EA%B0%80-(1).html",
            "date": " • Aug 14, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "(연구) HST example 2 이거로하자",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.35 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . gs1=GraphSignal(V,W,f1) gs2=GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0. 0.08727822 0.08664285 ... 0.08397182 0.08664285 0.08727822] [0.08727822 0. 0.08727822 ... 0.07728965 0.08397182 0.08664285] [0.08664285 0.08727822 0. ... 0.06514026 0.07728965 0.08397182] ... [0.08397182 0.07728965 0.06514026 ... 0. 0.08727822 0.08664285] [0.08664285 0.08397182 0.07728965 ... 0.08727822 0. 0.08727822] [0.08727822 0.08664285 0.08397182 ... 0.08664285 0.08727822 0. ]] . &lt;matplotlib.image.AxesImage at 0x7f229c6c4430&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f229c637a00&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f2298d8dcd0&gt; . Snow distance . hs1=HeavySnowTransform(gs1) hs2=HeavySnowTransform(gs2) . NameError Traceback (most recent call last) &lt;ipython-input-9-fc82c780236d&gt; in &lt;module&gt; -&gt; 1 hs1=HeavySnowTransform(gs1) 2 hs2=HeavySnowTransform(gs2) NameError: name &#39;HeavySnowTransform&#39; is not defined . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . NameError Traceback (most recent call last) &lt;ipython-input-10-39042dfdcf92&gt; in &lt;module&gt; -&gt; 1 hs1.snow(tau=100000,b=0.05) 2 hs2.snow(tau=100000,b=0.05) NameError: name &#39;hs1&#39; is not defined . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb3/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=500) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) #p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional p.savefig(&#39;temp.pdf&#39;,transparent=True) . NameError Traceback (most recent call last) &lt;ipython-input-1-7c3a440699b1&gt; in &lt;module&gt; 1 # 1. -&gt; 2 p=plt.figure(figsize=(12,4), dpi=500) # Make figure object 3 4 # 2. 5 ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) NameError: name &#39;plt&#39; is not defined . brk=15000 p, ((ax1,ax2,ax3,ax4),(ax5,ax6,ax7,ax8)) = plt.subplots(2,4) ax1.imshow(hs1.eucliddistance,origin=&#39;lower&#39;) ax2.imshow(diffusion_distance,origin=&#39;lower&#39;) ax3.imshow(l2distance(hs1.snowygrounds[:,0:brk]),origin=&#39;lower&#39;) ax4.imshow(l2distance(hs1.snowygrounds[:,brk:]),origin=&#39;lower&#39;) ax5.imshow(hs2.eucliddistance,origin=&#39;lower&#39;) ax6.imshow(diffusion_distance,origin=&#39;lower&#39;) ax7.imshow(l2distance(hs2.snowygrounds[:,0:brk]),origin=&#39;lower&#39;) ax8.imshow(l2distance(hs2.snowygrounds[:,brk:]),origin=&#39;lower&#39;) p.tight_layout() #rect : tuple (left, bottom, right, top), optional p.savefig(&quot;temp.pdf&quot;,tranparent=True) . /tmp/ipykernel_25956/1733975175.py:12: MatplotlibDeprecationWarning: savefig() got unexpected keyword argument &#34;tranparent&#34; which is no longer supported as of 3.3 and will become an error two minor releases later p.savefig(&#34;temp.pdf&#34;,tranparent=True) . hs1_eucliddistance=hs1.eucliddistance diffusion_distance=diffusion_distance hs1_sigma1=l2distance(hs1.snowygrounds[:,:brk]) hs1_sigma2=l2distance(hs1.snowygrounds[:,brk:]) hs2_eucliddistance=hs2.eucliddistance diffusion_distance=diffusion_distance hs2_sigma1=l2distance(hs2.snowygrounds[:,:brk]) hs2_sigma2=l2distance(hs2.snowygrounds[:,brk:]) . %R -i hs1_eucliddistance,diffusion_distance,hs1_sigma1,hs1_sigma2,hs2_eucliddistance,hs2_sigma1,hs2_sigma2 . %%R library(tidyverse) library(gridExtra) library(latex2exp) n=60 grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long_caseA&lt;-as_tibble(cbind(grid,as.vector(diffusion_distance)));names(W_Graph_long_caseA)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long_caseA&lt;-as_tibble(cbind(grid,as.vector(hs1_eucliddistance)));names(W_Euclid_long_caseA)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST1_long_caseA&lt;-as_tibble(cbind(grid,as.vector(hs1_sigma1)));names(W_HST1_long_caseA)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST2_long_caseA&lt;-as_tibble(cbind(grid,as.vector(hs1_sigma2)));names(W_HST2_long_caseA)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Graph_long_caseB&lt;-as_tibble(cbind(grid,as.vector(diffusion_distance)));names(W_Graph_long_caseB)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long_caseB&lt;-as_tibble(cbind(grid,as.vector(hs2_eucliddistance)));names(W_Euclid_long_caseB)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST1_long_caseB&lt;-as_tibble(cbind(grid,as.vector(hs2_sigma1)));names(W_HST1_long_caseB)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST2_long_caseB&lt;-as_tibble(cbind(grid,as.vector(hs2_sigma2)));names(W_HST2_long_caseB)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . %%R -w 2000 -h 1000 -r 250 fig1&lt;-ggplot()+geom_tile(data=W_Euclid_long_caseA,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig2&lt;-ggplot()+geom_tile(data=W_Graph_long_caseA,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig3&lt;-ggplot()+geom_tile(data=W_HST1_long_caseA,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig4&lt;-ggplot()+geom_tile(data=W_HST2_long_caseA,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig5&lt;-ggplot()+geom_tile(data=W_Euclid_long_caseB,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig6&lt;-ggplot()+geom_tile(data=W_Graph_long_caseB,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig7&lt;-ggplot()+geom_tile(data=W_HST1_long_caseB,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) fig8&lt;-ggplot()+geom_tile(data=W_HST2_long_caseB,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank()) # fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() # fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() # fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig=grid.arrange(fig1,fig2,fig3,fig4,fig5,fig6,fig7,fig8,ncol=4,nrow=2) fig ggsave(plot=fig,&quot;temp.pdf&quot;,width=10,height=5) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-%EC%9D%B4%EA%B1%B0%EB%A1%9C%ED%95%98%EC%9E%90.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-%EC%9D%B4%EA%B1%B0%EB%A1%9C%ED%95%98%EC%9E%90.html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "(연구) HST example 2 (7)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.3 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0. 0.09526533 0.09432263 ... 0.09038699 0.09432263 0.09526533] [0.09526533 0. 0.09526533 ... 0.0807401 0.09038699 0.09432263] [0.09432263 0.09526533 0. ... 0.06397305 0.0807401 0.09038699] ... [0.09038699 0.0807401 0.06397305 ... 0. 0.09526533 0.09432263] [0.09432263 0.09038699 0.0807401 ... 0.09526533 0. 0.09526533] [0.09526533 0.09432263 0.09038699 ... 0.09432263 0.09526533 0. ]] . &lt;matplotlib.image.AxesImage at 0x7f4ffdbb9250&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f4ffc320d60&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f4ffc28e460&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(7).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(7).html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "(연구) HST example 2 (6)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.25 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0. 0.10569617 0.10419332 ... 0.09799084 0.10419332 0.10569617] [0.10569617 0. 0.10569617 ... 0.08329167 0.09799084 0.10419332] [0.10419332 0.10569617 0. ... 0.05957016 0.08329167 0.09799084] ... [0.09799084 0.08329167 0.05957016 ... 0. 0.10569617 0.10419332] [0.10419332 0.09799084 0.08329167 ... 0.10569617 0. 0.10569617] [0.10569617 0.10419332 0.09799084 ... 0.10419332 0.10569617 0. ]] . &lt;matplotlib.image.AxesImage at 0x7f8a5900f280&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f8a54769d60&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f8a546da460&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(6).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(6).html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "(연구) HST example 2 (5)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.2 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0. 0.1200121 0.11735654 ... 0.10662519 0.11735654 0.1200121 ] [0.1200121 0. 0.1200121 ... 0.08271274 0.10662519 0.11735654] [0.11735654 0.1200121 0. ... 0.04899084 0.08271274 0.10662519] ... [0.10662519 0.08271274 0.04899084 ... 0. 0.1200121 0.11735654] [0.11735654 0.10662519 0.08271274 ... 0.1200121 0. 0.1200121 ] [0.1200121 0.11735654 0.10662519 ... 0.11735654 0.1200121 0. ]] . &lt;matplotlib.image.AxesImage at 0x7efff80a22e0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7effd57d7d60&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7effd5747460&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(5).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(5).html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "(연구) HST example 2 (4)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.15 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0. 0.14154641 0.13602631 ... 0.11470516 0.13602631 0.14154641] [0.14154641 0. 0.14154641 ... 0.07303255 0.11470516 0.13602631] [0.13602631 0.14154641 0. ... 0.02878376 0.07303255 0.11470516] ... [0.11470516 0.07303255 0.02878376 ... 0. 0.14154641 0.13602631] [0.13602631 0.11470516 0.07303255 ... 0.14154641 0. 0.14154641] [0.14154641 0.13602631 0.11470516 ... 0.13602631 0.14154641 0. ]] . &lt;matplotlib.image.AxesImage at 0x7f7c1b3d3280&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f7c15b29d30&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f7c15a97460&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(4).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(4).html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
        ,"post18": {
            "title": "(연구) HST example 2 (3)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.1 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0. 0.17910199 0.16376818 ... 0.11159368 0.16376818 0.17910199] [0.17910199 0. 0.17910199 ... 0.0404101 0.11159368 0.16376818] [0.16376818 0.17910199 0. ... 0.00497348 0.0404101 0.11159368] ... [0.11159368 0.0404101 0.00497348 ... 0. 0.17910199 0.16376818] [0.16376818 0.11159368 0.0404101 ... 0.17910199 0. 0.17910199] [0.17910199 0.16376818 0.11159368 ... 0.16376818 0.17910199 0. ]] . &lt;matplotlib.image.AxesImage at 0x7fa0a4876250&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7fa0a07d1d90&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7fa0a073f490&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(3).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(3).html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
        ,"post19": {
            "title": "(연구) HST example 2 (2)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0.00000000e+00 2.69988437e-01 1.88738971e-01 ... 4.06913345e-02 1.88738971e-01 2.69988437e-01] [2.69988437e-01 0.00000000e+00 2.69988437e-01 ... 6.99686096e-04 4.06913345e-02 1.88738971e-01] [1.88738971e-01 2.69988437e-01 0.00000000e+00 ... 1.60540051e-07 6.99686096e-04 4.06913345e-02] ... [4.06913345e-02 6.99686096e-04 1.60540051e-07 ... 0.00000000e+00 2.69988437e-01 1.88738971e-01] [1.88738971e-01 4.06913345e-02 6.99686096e-04 ... 2.69988437e-01 0.00000000e+00 2.69988437e-01] [2.69988437e-01 1.88738971e-01 4.06913345e-02 ... 1.88738971e-01 2.69988437e-01 0.00000000e+00]] . &lt;matplotlib.image.AxesImage at 0x7f318cfad280&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f3187703d60&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f3187673460&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(2).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(2).html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
        ,"post20": {
            "title": "(연구) HST example 2 (1)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;=0]= -3+np.random.normal(size=sum(vy&gt;=0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.2 W=np.exp(-Σ**2/(2*θ**2))-np.eye(n,n) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[0. 0.1200121 0.11735654 ... 0.10662519 0.11735654 0.1200121 ] [0.1200121 0. 0.1200121 ... 0.08271274 0.10662519 0.11735654] [0.11735654 0.1200121 0. ... 0.04899084 0.08271274 0.10662519] ... [0.10662519 0.08271274 0.04899084 ... 0. 0.1200121 0.11735654] [0.11735654 0.10662519 0.08271274 ... 0.1200121 0. 0.1200121 ] [0.1200121 0.11735654 0.10662519 ... 0.11735654 0.1200121 0. ]] . &lt;matplotlib.image.AxesImage at 0x7f83c437c790&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f83a75fbdc0&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f83c4720af0&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=100000,b=0.05) hs2.snow(tau=100000,b=0.05) . HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. HST (tau= 100000, b=0.05) 100000/100000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=10,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=10,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=10,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=10,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=10,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=10,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(1).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/09/(%EC%97%B0%EA%B5%AC)-HST-example-2-(1).html",
            "date": " • Aug 9, 2021"
        }
        
    
  
    
        ,"post21": {
            "title": "(연구) heavysnow distance",
            "content": "snow distance &#51032; &#48516;&#54644; . - 제안하는 snow-distance의 분해결과를 $ tau$로 나누면 아래와 같다. . $ frac{1}{ tau} Sigma_{ij}^{( tau)}=[f(v_i)-f(v_j)]^2+ frac{1}{ tau} sum_{ ell=1}^{ tau} left { sum_{k=1}^{ ell} xi(v_i,k)- sum_{k=1}^{ ell} xi(v_j,k) right }^2+ frac{2}{ tau}(f(v_i)-f(v_j)) sum_{ ell=1}^{ tau} left { sum_{k=1}^{ ell} xi(v_i,k)- sum_{k=1}^{ ell} xi(v_j,k) right }$ . - 따라서 $ frac{1}{ tau} sum_{ij}^{( tau)}$는 아래와 같은 3가지의 term으로 구분할 수 있다. . (유클리드 차이)$^2$ | ($1 sim tau$의 적재량 차이)$^2$의 합 $ times$ $ frac{1}{ tau}$ | ($1 sim tau$의 적재량 차이)의 합 $ times$ 유클리드 차이 $ times$ $ frac{2}{ tau}$ | . - 편의상 유클리드텀, 그래프텀, 크로스텀이라고 부르자. . &#44536;&#47000;&#54532;&#53568; . $graphterm(i,j):= sum_{ ell=1}^{ tau} Delta( ell,i,j)$ where $ Delta( ell,i,j)$는 . $ Delta( ell,i,j)= left( sum_{k=1}^{ ell} xi(v_i,k)- sum_{k=1}^{ ell} xi(v_j,k) right)^2 approx |f(v_i)-f(v_j)|^2$ . $= left(h(v_i, ell)-f(v_i)-h(v_j, ell)+f(v_j) right)^2$ . $= left(h(v_i, ell)-h(v_j, ell) right)^2+ left(f(v_i)-f(v_j) right)^2+2 left(f(v_j)-f(v_i) right) left(h(v_i, ell)-h(v_j, ell) right)$ . $= big( sum_{k=1}^{ ell} big[ xi(v_i,k)- xi(v_j,k) big] big)^2$ . $= big( xi(v_i,1)- xi(v_j,1) big)^2+ dots+ big( xi(v_i, ell)- xi(v_j, ell) big)^2+gd$ . $= big( xi(v_i,1)+ xi(v_j,1) big)+ dots+ big( xi(v_i, ell)+ xi(v_j, ell) big)+gd$ . $= sum_{k=1}^{ ell} xi(v_i,k)+ sum_{k=1}^{ ell} xi(v_j,k)+gd$ . - gd 아래와 같이 쓸 수 있다. . $gd=2 big( xi(v_i,1)- xi(v_j,1) big) big( xi(v_i,2)- xi(v_j,2) big)+ dots+2 big( xi(v_i, ell-1)- xi(v_j, ell-1) big) big( xi(v_i, ell)- xi(v_j, ell) big)$ . $:=d(1,2)+d(1,3)+ dots+d(1, ell)+d(2,3)+ dots+d(2, ell)+ dots+2d( ell-1, ell)$ . 여기에서 $d(1,2)$의 값을 해석하여 보자. . $d(1,2)=0$: 시점1에서의 차이=0 OR 시점2에서의 차이=0 | $d(1,2)=2$: 시점1에서 $i$에 눈이 내림 &amp; 시점2에서도 $i$에 눈이 내림 | . - regular graph + ergodicity를 이용하면 예제2의 CASE-A와 CASE-B의 그래프텀이 같은 극한값을 가짐을 보일 수 있다. . &#53356;&#47196;&#49828;&#53568; . - 크로스텀을 계산하자. . $ frac{2}{ tau}(f(v_i)-f(v_j)) sum_{ ell=1}^{ tau} left { sum_{k=1}^{ ell} xi(v_i,k)- sum_{k=1}^{ ell} xi(v_j,k) right }$ . - (직관) $ xi(v_i,k)- xi(v_j,k)$가 1 혹은 -1을 가질 확률은 같다. . 이제 $ Delta_{ij}( ell):= sum_{k=1}^{ ell} xi(v_i,k)- xi(v_j,k)$ 을 정의하자. . 분명히 $ Delta_{ij}( ell)$는 평균이 0인 확률변수이다. (분산은??) . $ sum_{k=1}^{ ell} Delta_{ij}(k)= # big(A_i( ell) big) - # big(A_j( ell) big)$, where $A_i( ell)= { }$ . Snow distance&#51032; order . – $ frac{1}{ tau b^2} Sigma_{ij}^{( tau)}=O_p(1)$ 임을 보이자. . - $ Sigma_{ij}^{( tau)}= big[f(v_i,0)-f(v_j,0) big]^2+ big[f(v_i,0)+ xi(v_i,1)-f(v_j)- xi(v_j,1) big]^2+ dots+ big[f(v_i,0)+ xi(v_i,1)+ dots+ xi(v_i, tau)-f(v_j)- xi(v_j,1)- dots- xi(v_j, tau) big]^2$ . - 편의성 아래와 같이 정의하자. . $ Delta_{ij}^{(0)}= big[f(v_i,0)-f(v_j,0) big]^2$ | $ dots$ | $ Delta_{ij}^{( tau)}= big[f(v_i,0)+ xi(v_i,1)+ dots+ xi(v_i, tau)-f(v_j)- xi(v_j,1)- dots- xi(v_j, tau) big]^2$ | . - 그러면 $ Sigma_{ij}^{( tau)}= sum_{ ell=0}^{ tau} Delta_{ij}^{( ell)}$ . – WLOG, $b=1$ then, $ xi(v_i,1)=0~ or~ 1$ . – 아래를 살펴보자. . $ frac{1}{ tau^2} Delta_{ij}^{(0)}=O( frac{1}{ tau^2})$ | $ frac{1}{ tau^2} Delta_{ij}^{(1)}= frac{1}{ tau^2}o_p(1)+(p_i-p_j)$ | $ frac{1}{ tau^2} Delta_{ij}^{(2)}= frac{2^2}{ tau^2}o_p(1)+(p_i-p_j)$ | $ dots$ | $ frac{1}{ tau^2} Delta_{ij}^{( tau-1)}= frac{( tau-1)^2}{ tau^2}o_p(1)+(p_i-p_j)$ | $ frac{1}{ tau^2} Delta_{ij}^{( tau)}= frac{ tau^2}{ tau^2}o_p(1)+(p_i-p_j)$ | . - 따라서 $ frac{1}{ tau^2} Sigma_{ij}^{( tau)}= frac{1}{ tau^2} frac{ tau( tau+1)(2 tau+1)}{6}(o_p(1)+ tau(p_i-p_j)) $ . - $p_i=p_j$라고 하면 $ frac{1}{ tau^2} sum_{ij}^{( tau)}=o_p( tau)$ . &#45800;&#49692;&#54620;&#50696;&#51228; . - 2개의 노드가 있고 $i$,$j$에서 반복된다고 하자. . - $ Sigma^{( tau)}_{ij}= Delta_{ij}^{(0)}=0$ .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/05/(%EC%97%B0%EA%B5%AC)-HST-%EC%9D%B4%EB%A1%A0%EA%B0%9C%EB%B0%9C.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/05/(%EC%97%B0%EA%B5%AC)-HST-%EC%9D%B4%EB%A1%A0%EA%B0%9C%EB%B0%9C.html",
            "date": " • Aug 5, 2021"
        }
        
    
  
    
        ,"post22": {
            "title": "(연구) HST example 2, Appendix 추가",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7f02d41b07f0&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7f02d43654c0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f02dc09ffa0&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f02dc55b4f0&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=50000,b=0.1) hs2.snow(tau=50000,b=0.1) . HST (tau= 50000, b=0.1) 50000/50000 HST completed and all history is recorded. HST (tau= 50000, b=0.1) 50000/50000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) #p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional p.savefig(&#39;temp.pdf&#39;, transparent=True) . Appendix . ex2, case A: . _, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(hs1.eucliddistance) ax2.imshow(hs1.snowdistance) ax3.imshow(diffusion_distance) plt.show() . 그림1: 유클리드거리, snow distance, diffusion distance의 비교 . left: 유클리드 distance | middle: snow distance | right: diffusion distance. | . _, (ax1,ax2,ax3,ax4) = plt.subplots(1,4) ax1.imshow(hs1.snowdistance1) ax2.imshow(hs1.snowdistance3) ax3.imshow(hs1.snowdistance2) ax4.imshow(hs1.snowdistance) plt.show()#### ex2, case B: . ex2, case B: . _, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(hs2.eucliddistance) ax2.imshow(hs2.snowdistance) ax3.imshow(diffusion_distance) plt.show() . _, (ax1,ax2,ax3,ax4) = plt.subplots(1,4) ax1.imshow(hs2.snowdistance1) ax2.imshow(hs2.snowdistance3) ax3.imshow(hs2.snowdistance2) ax4.imshow(hs2.snowdistance) plt.show() . _, (ax1,ax2,ax3,ax4) = plt.subplots(1,4) ax1.imshow(hs2.snowdistance1[30:,30:]) ax2.imshow(hs2.snowdistance3[30:,30:]) ax3.imshow(hs2.snowdistance2[30:,30:]) ax4.imshow(hs2.snowdistance[30:,30:]) plt.show() . brk=5000 _, (ax1,ax2,ax3,ax4) = plt.subplots(1,4) ax1.imshow(l2distance(hs2.snowygrounds.iloc[:,0:brk])) ax2.imshow(l2distance(hs2.snowygrounds.iloc[:,brk:])) ax3.imshow(hs2.eucliddistance) ax4.imshow(diffusion_distance) plt.show() . _, ((ax1,ax2,ax3,ax4),(ax5,ax6,ax7,ax8)) = plt.subplots(2,4) _d1=l2distance(hs2.snowygrounds.iloc[:,:brk]) _d2=l2distance(hs2.snowygrounds_f.iloc[:,:brk]) _d3=l2distance(hs2.snowygrounds_sumxi.iloc[:,:brk]) _d4=_d1-_d2-_d3 _d5=l2distance(hs2.snowygrounds.iloc[:,brk:]) _d6=l2distance(np.matrix(hs2.snowygrounds.iloc[:,brk]).T) _d7=l2distance(hs2.snowygrounds_sumxi.iloc[:,brk:]-np.matrix(hs2.snowygrounds_sumxi.iloc[:,brk]).T) _d8=_d5-_d6-_d7 ax1.imshow(_d1) ax2.imshow(_d2) ax3.imshow(_d3) ax4.imshow(_d4) ax5.imshow(_d5) ax6.imshow(_d6) ax7.imshow(_d7) ax8.imshow(_d8) plt.show() .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/05/(%EC%97%B0%EA%B5%AC)-HST-example-2,-Appendix-%EC%B6%94%EA%B0%80.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/05/(%EC%97%B0%EA%B5%AC)-HST-example-2,-Appendix-%EC%B6%94%EA%B0%80.html",
            "date": " • Aug 5, 2021"
        }
        
    
  
    
        ,"post23": {
            "title": "(연구) HST example 1, Appendix 추가",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) import rpy2 %load_ext rpy2.ipython %run pybase . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=0.5 W[n-1,n-1]=0.5 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavysnowTransform(gs) hst.snow(tau=80000,b=0.03) . HST (tau= 80000, b=0.03) 80000/80000 HST completed and all history is recorded. . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.6 ✔ dplyr 1.0.7 ✔ tidyr 1.1.4 ✔ stringr 1.4.0 ✔ readr 2.1.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.999991e+00 1.999988e+00 1.179504e-05 9.433843e-06 2.057256e-08 [6] 1.189502e-09 6.113285e-10 1.271715e-10 8.477435e-18 2.773296e-20 [11] 4.677282e-22 7.028769e-25 3.668074e-29 2.165628e-35 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -1.827015e-22 -7.071068e-01 -7.071068e-01 1.027058e-22 -2.325954e-24 [2,] -1.827036e-22 7.071068e-01 -7.071068e-01 1.027070e-22 -2.325981e-24 [3,] -3.406747e-16 -4.376313e-12 7.584372e-07 1.915106e-16 -4.336809e-18 [4,] 4.359500e-16 -3.689145e-35 6.290663e-30 1.522836e-16 -3.055713e-17 [5,] -4.449791e-17 -2.038900e-30 -3.654239e-26 2.501451e-17 5.932736e-03 [6,] -5.014530e-18 -4.654099e-39 4.315678e-31 2.818920e-18 -7.707117e-01 [7,] -5.651301e-18 8.392638e-45 3.999876e-33 3.176881e-18 6.371564e-01 [8,] 6.203854e-25 -5.675841e-56 -1.193257e-48 -3.551102e-17 -1.161342e-18 [9,] -1.654361e-24 -2.473327e-59 -3.101807e-52 -2.002249e-17 2.016595e-20 [10,] 1.550964e-25 -4.872013e-59 -1.152669e-52 -4.697072e-17 -1.875646e-22 [11,] -2.869858e-41 -1.117074e-61 3.268168e-57 1.242475e-31 2.080144e-38 [12,] 4.403777e-12 -1.951181e-94 3.312133e-89 -9.568934e-07 2.874223e-40 [13,] -7.071068e-01 -5.705312e-103 1.111441e-87 7.071068e-01 -3.860874e-29 [14,] 7.071068e-01 3.425243e-103 -1.111441e-87 7.071068e-01 3.860886e-29 [,6] [,7] [,8] [,9] [,10] [1,] -4.724212e-21 9.526521e-22 -4.170609e-18 1.236166e-11 2.242063e-10 [2,] -4.724266e-21 9.526631e-22 -4.170658e-18 1.236181e-11 2.242089e-10 [3,] -8.809013e-15 1.776357e-15 -7.776737e-12 2.305021e-05 4.180669e-04 [4,] -3.234416e-15 5.288299e-16 -2.866455e-12 4.161419e-05 -8.112710e-04 [5,] -1.132276e-15 -1.672893e-01 -1.015808e-12 3.010469e-06 9.858896e-01 [6,] -1.932897e-16 6.274233e-01 -1.144451e-13 3.392539e-07 1.111012e-01 [7,] -2.238716e-16 7.604961e-01 -1.289742e-13 3.823341e-07 1.252095e-01 [8,] -3.182459e-01 -8.071185e-17 7.588063e-01 5.682716e-01 -1.721538e-06 [9,] 9.341269e-01 8.033498e-17 1.487958e-01 3.244485e-01 -9.828937e-07 [10,] -1.616371e-01 -8.535521e-18 -6.340921e-01 7.561750e-01 -2.290780e-06 [11,] 3.633300e-16 1.013793e-33 1.333179e-14 -2.384974e-07 8.997720e-13 [12,] -1.986371e-21 8.752250e-37 -1.747885e-18 -3.767346e-11 -1.366920e-12 [13,] -1.948188e-19 2.025484e-25 6.935082e-21 -4.112684e-17 1.387779e-17 [14,] -1.948163e-19 -2.025429e-25 6.935082e-21 -4.112853e-17 6.938894e-18 [,11] [,12] [,13] [,14] [1,] 2.439763e-07 -4.775832e-07 8.005577e-15 4.160020e-17 [2,] 2.439791e-07 -4.775887e-07 8.005669e-15 4.160068e-17 [3,] 4.549309e-01 -8.905266e-01 1.492762e-08 7.756991e-11 [4,] -8.905263e-01 -4.549311e-01 9.570759e-08 1.292605e-08 [5,] -8.997725e-04 3.181868e-06 6.904881e-11 1.013183e-11 [6,] -1.013966e-04 3.585691e-07 7.781205e-12 1.141770e-12 [7,] -1.142725e-04 4.041021e-07 8.769303e-12 1.286758e-12 [8,] 1.510186e-05 2.242308e-05 -2.382478e-11 1.355310e-07 [9,] 8.622241e-06 1.280222e-05 -1.360250e-11 7.737993e-08 [10,] 2.009540e-05 2.983746e-05 -3.170263e-11 1.803454e-07 [11,] 1.146939e-08 5.940146e-09 3.168254e-07 1.000000e+00 [12,] -7.843915e-08 -5.683380e-08 -1.000000e+00 3.168254e-07 [13,] -5.306866e-14 -3.846923e-14 -6.766289e-07 2.143732e-13 [14,] -5.295764e-14 -3.849698e-14 -6.766227e-07 2.143712e-13 $fbar [1] 4.404588e-12 4.376424e-12 1.414213e+00 1.414213e+00 1.276226e-01 [6] 4.542439e-01 -1.220630e+00 2.735100e-01 1.648910e+00 -1.223435e+00 [11] -1.344298e+00 4.356576e-01 -1.000002e+00 -9.999993e-01 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;white&quot;,high=&quot;black&quot;)+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=fig1,&quot;asdf2.pdf&quot;,width=15,height=10) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . %%R -w 200 -h 600 -r 120 fig_= grid.arrange(fig1_4,fig1_5,fig1_6,nrow=3) ggsave(plot=fig_,&quot;spectrum.pdf&quot;,width=2,height=6) . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . Note: Using an external vector in selections is ambiguous. ℹ Use `all_of(n)` instead of `n` to silence this message. ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. This message is displayed once per session. . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 x 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 8.02e-18 4.04e-18 2 2 2 1 2.04e-16 4.04e-18 3 3 3 1 -1.94e-16 4.04e-18 4 4 4 1 1.00e+ 0 4.04e-18 5 5 5 1 -3.67e-17 4.04e-18 6 6 6 1 1.20e-16 4.04e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;asdf.pdf&quot;,width=20,height=6) . Appendix . _, (ax1,ax2) = plt.subplots(1,2) ax1.imshow(hst.eucliddistance[:7,:7],origin=&#39;lower&#39;) ax2.imshow(hst.snowdistance[:7,:7],origin=&#39;lower&#39;) plt.show() . brk=5000 _, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(l2distance(hst.snowygrounds.iloc[:,0:brk]),origin=&#39;lower&#39;) ax2.imshow(l2distance(hst.snowygrounds.iloc[:,brk:]),origin=&#39;lower&#39;) ax3.imshow(hst.snowdistance,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) plt.show() . _, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(hst.snowdistance1[:3,:3],origin=&#39;lower&#39;) ax2.imshow(hst.snowdistance2[:3,:3],origin=&#39;lower&#39;) ax3.imshow(hst.snowdistance3[:3,:3],origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) plt.show() . hst.snowdistance1[:3,:3] . array([[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]) . hst.snowdistance2[:3,:3] . array([[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]) . hst.snowdistance3[:3,:3] . array([[ 0. , 260.0478, 625.2048], [260.0478, 0. , 248.562 ], [625.2048, 248.562 , 0. ]]) . hst.snowdistance1[2:5,2:5] . array([[ 0., 320004., 0.], [320004., 0., 320004.], [ 0., 320004., 0.]]) . hst.snowdistance2[2:5,2:5] . array([[ 0. , -635244.4800001, 0. ], [-635244.4800001, 0. , -638790.3600001], [ 0. , -638790.3600001, 0. ]]) . hst.snowdistance3[2:5,2:5] . array([[0.00000000e+00, 3.16268692e+05, 3.04125300e+02], [3.16268692e+05, 0.00000000e+00, 3.19767008e+05], [3.04125300e+02, 3.19767008e+05, 0.00000000e+00]]) . hst.snowdistance1[1:6,1:6]+hst.snowdistance2[1:6,1:6]+hst.snowdistance3[1:6,1:6] . array([[ 0. , 248.562 , 1222.13219978, 535.0581 , 747.8532 ], [ 248.562 , 0. , 1028.21219997, 304.1253 , 516.9042 ], [1222.13219978, 1028.21219997, 0. , 980.64749998, 1109.91119971], [ 535.0581 , 304.1253 , 980.64749998, 0. , 207.9441 ], [ 747.8532 , 516.9042 , 1109.91119971, 207.9441 , 0. ]]) . plt.plot((hst.snowdistance1[:,:])[0],&#39;--o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f22e837dfd0&gt;] . plt.plot((hst.snowdistance2[:,:])[0],&#39;--o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f22e81aa610&gt;] . plt.plot((hst.snowdistance3[:,:])[0],&#39;--o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f22db753b50&gt;] . y[[1,2]] . array([260.0478, 625.2048]) . y=hst.snowdistance[0] plt.plot(y,&#39;o--&#39;) plt.plot([0,1,2,4,5,6,10],y[[0,1,2,4,5,6,10]],&#39;o&#39;) plt.plot([3,7,8,9,11,12,13],y[[3,7,8,9,11,12,13]],&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f22d3933a90&gt;] . p, (ax1,ax2,ax3) = plt.subplots(1,3) ax1.imshow(hst.euclidweight,origin=&#39;lower&#39;) ax2.imshow(hst.snowweight,origin=&#39;lower&#39;) ax3.imshow(hst.graphweight,origin=&#39;lower&#39;) #ax4.imshow(diffusion_distance) #p.show() p.savefig(&#39;temp.pdf&#39;, transparent=True) . print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:100])/(100*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:1000])/(1000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:10000])/(10000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:15000])/(15000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:20000])/(20000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:25000])/(25000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:30000])/(30000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:35000])/(35000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:40000])/(40000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:45000])/(45000*hst.b**2))) print(np.max(l2distance(hst.snowygrounds_sumxi.iloc[:,0:50000])/(50000*hst.b**2))) . 51.44000000000009 3054.51 4508.643399999829 4503.149666666355 4528.726600000274 4561.012840000717 4577.699633334383 4562.227885715406 4572.30602500118 4596.212111112275 4587.6461600011835 .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/05/(%EC%97%B0%EA%B5%AC)-HST-example-1,-Appendix-%EC%B6%94%EA%B0%80.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/05/(%EC%97%B0%EA%B5%AC)-HST-example-1,-Appendix-%EC%B6%94%EA%B0%80.html",
            "date": " • Aug 5, 2021"
        }
        
    
  
    
        ,"post24": {
            "title": "(연구) HST example 2 (8)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=60 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7f99fc3f75e0&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7f99fc369cd0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f99fc34e880&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f9a03648ee0&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=90000,b=0.1) hs2.snow(tau=90000,b=0.1) . HST (tau= 90000, b=0.1) 90000/90000 HST completed and all history is recorded. HST (tau= 90000, b=0.1) 90000/90000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(8).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(8).html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post25": {
            "title": "(연구) HST example 2 (7)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=59 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7fd454cd65e0&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7fd454c4bc10&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7fd454c2e880&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7fd45bf26ac0&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=80000,b=0.1) hs2.snow(tau=80000,b=0.1) . HST (tau= 80000, b=0.1) 80000/80000 HST completed and all history is recorded. HST (tau= 80000, b=0.1) 80000/80000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(7).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(7).html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post26": {
            "title": "(연구) HST example 2 (6)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=59 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7f6c7048e700&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7f6c70401df0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f6c703e6880&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f6c7773e820&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=70000,b=0.1) hs2.snow(tau=70000,b=0.1) . HST (tau= 70000, b=0.1) 70000/70000 HST completed and all history is recorded. HST (tau= 70000, b=0.1) 70000/70000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(6).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(6).html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post27": {
            "title": "(연구) HST example 2 (5)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=59 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7f740817f640&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7f74080f1cd0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f74080d6850&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f7449b42100&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=60000,b=0.1) hs2.snow(tau=60000,b=0.1) . HST (tau= 60000, b=0.1) 60000/60000 HST completed and all history is recorded. HST (tau= 60000, b=0.1) 60000/60000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(5).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(5).html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post28": {
            "title": "(연구) HST example 2 (4), 결과좋다",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=59 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7fce3e49b310&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7fce3e40f370&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7fce3c3e1eb0&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7fce456ba400&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=50000,b=0.1) hs2.snow(tau=50000,b=0.1) . HST (tau= 50000, b=0.1) 50000/50000 HST completed and all history is recorded. HST (tau= 50000, b=0.1) 50000/50000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(4),-%EA%B2%B0%EA%B3%BC%EC%A2%8B%EB%8B%A4.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(4),-%EA%B2%B0%EA%B3%BC%EC%A2%8B%EB%8B%A4.html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post29": {
            "title": "(연구) HST example 2 (3)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=59 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7fe63d36c5e0&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7fe63d2e1cd0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7fe63c2c0880&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7fe6445bc8e0&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=40000,b=0.1) hs2.snow(tau=40000,b=0.1) . HST (tau= 40000, b=0.1) 40000/40000 HST completed and all history is recorded. HST (tau= 40000, b=0.1) 40000/40000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(3).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(3).html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post30": {
            "title": "(연구) HST example 2 (2)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=59 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7f068d628760&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7f068d59beb0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f068c57c880&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f0694975640&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=30000,b=0.1) hs2.snow(tau=30000,b=0.1) . HST (tau= 30000, b=0.1) 30000/30000 HST completed and all history is recorded. HST (tau= 30000, b=0.1) 30000/30000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(2).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(2).html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post31": {
            "title": "(연구) HST example 2 (1)",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython %run pybase . np.random.seed(777) import math pi=math.pi n=59 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang,vx,vy,n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . plt.imshow(W) . &lt;matplotlib.image.AxesImage at 0x7f5f3d7e1700&gt; . Diffusion distance . P=W/W.round(3).sum(axis=0)[0] print(P) plt.imshow(P) . [[2.20167327e-01 2.14586355e-01 1.46335569e-01 ... 2.83862880e-02 1.46335569e-01 2.14586355e-01] [2.14586355e-01 2.20167327e-01 2.14586355e-01 ... 3.69898283e-04 2.83862880e-02 1.46335569e-01] [1.46335569e-01 2.14586355e-01 2.20167327e-01 ... 4.82347874e-08 3.69898283e-04 2.83862880e-02] ... [2.83862880e-02 3.69898283e-04 4.82347874e-08 ... 2.20167327e-01 2.14586355e-01 1.46335569e-01] [1.46335569e-01 2.83862880e-02 3.69898283e-04 ... 2.14586355e-01 2.20167327e-01 2.14586355e-01] [2.14586355e-01 1.46335569e-01 2.83862880e-02 ... 1.46335569e-01 2.14586355e-01 2.20167327e-01]] . &lt;matplotlib.image.AxesImage at 0x7f5f3d755ee0&gt; . plt.imshow(P@P@P@P) . &lt;matplotlib.image.AxesImage at 0x7f5f3c7278e0&gt; . P4=P@P@P@P diffusion_distance=l2distance(P4) plt.imshow(diffusion_distance) . &lt;matplotlib.image.AxesImage at 0x7f5f44a32820&gt; . Snow distance . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=20000,b=0.1) hs2.snow(tau=20000,b=0.1) . HST (tau= 20000, b=0.1) 20000/20000 HST completed and all history is recorded. HST (tau= 20000, b=0.1) 20000/20000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p4=PCA(n_components=3) p5=PCA(n_components=3) p6=PCA(n_components=3) p1.fit(hs1.eucliddistance) p2.fit(diffusion_distance) p3.fit(hs1.snowdistance) p4.fit(hs2.eucliddistance) p5.fit(diffusion_distance) p6.fit(hs2.snowdistance) r1=p1.transform(hs1.eucliddistance) r2=p2.transform(diffusion_distance) r3=p3.transform(hs1.snowdistance) r4=p4.transform(hs2.eucliddistance) r5=p5.transform(diffusion_distance) r6=p6.transform(hs2.snowdistance) . /home/cgb4/anaconda3/envs/py38r40/lib/python3.8/site-packages/sklearn/decomposition/_pca.py:470: RuntimeWarning: invalid value encountered in true_divide explained_variance_ratio_ = explained_variance_ / total_var . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=20,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=20,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r3[:,0],r3[:,1],r3[:,2],s=20,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r4[:,0],r4[:,1],r4[:,2],s=20,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r5[:,0],r5[:,1],r5[:,2],s=20,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r6[:,0],r6[:,1],r6[:,2],s=20,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(1).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/03/(%EC%97%B0%EA%B5%AC)-HST-example-2-(1).html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post32": {
            "title": "(연구) HST example 1 (8), 결과좋음",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=1 W[n-1,n-1]=1 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavySnowTransform(gs) hst.snow(tau=80000,b=0.03) . HST (tau= 80000, b=0.03) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f5a7e3ab520&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 2.0.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘kohonen’ R[write to console]: The following object is masked from ‘package:purrr’: map R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.976572e+00 1.000000e+00 2.342780e-02 1.432865e-07 1.026724e-07 [6] 3.694392e-08 3.448249e-12 9.558971e-14 2.384023e-14 2.397474e-15 [11] 3.126664e-19 9.910616e-21 6.612328e-22 1.402843e-28 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -8.288239e-17 -8.760573e-21 -1.704367e-17 -4.579204e-20 1.294809e-21 [2,] 4.363068e-17 8.769455e-21 1.704252e-17 -4.404141e-20 1.294790e-21 [3,] 4.064626e-22 4.206794e-19 -6.073661e-17 -1.009986e-14 2.790055e-17 [4,] 2.220446e-16 2.812850e-23 -2.164935e-15 -1.194558e-11 -9.066508e-17 [5,] 5.409523e-22 3.450918e-04 2.778478e-18 7.957005e-01 1.865129e-17 [6,] -4.684363e-18 -9.999999e-01 -4.564765e-18 1.534924e-04 1.133523e-20 [7,] -7.362288e-18 1.999328e-04 6.165919e-16 -6.056903e-01 2.450236e-17 [8,] -1.310175e-06 7.603181e-17 1.108020e-04 4.378767e-10 8.003580e-17 [9,] 7.071068e-01 1.034760e-20 -7.071068e-01 3.439075e-14 2.677548e-20 [10,] -7.071068e-01 6.632814e-18 -7.071068e-01 3.358573e-14 2.711664e-20 [11,] 1.532237e-17 1.108475e-24 1.298609e-15 8.012394e-18 -3.187528e-24 [12,] 8.741002e-14 -1.624184e-30 7.406868e-12 -5.759162e-20 -7.046696e-09 [13,] 1.360404e-21 -2.526427e-38 1.151522e-19 -9.884008e-28 7.071780e-01 [14,] 1.603078e-28 -2.339964e-45 -2.357279e-25 5.052233e-28 -7.070355e-01 [,6] [,7] [,8] [,9] [,10] [1,] 7.071013e-01 6.063217e-21 -7.071123e-01 4.767118e-15 3.774676e-12 [2,] -7.071123e-01 6.063154e-21 -7.071013e-01 4.767048e-15 3.774632e-12 [3,] 3.789325e-11 5.734372e-16 1.464501e-05 6.953212e-11 2.702643e-07 [4,] 2.743167e-27 -1.938665e-15 -1.129610e-15 4.452632e-07 5.433880e-04 [5,] -7.868839e-18 -1.648851e-14 -8.359464e-13 -2.329466e-03 -6.056856e-01 [6,] -1.352821e-20 -1.002064e-17 -5.080425e-16 -1.415722e-06 -3.681026e-04 [7,] 5.989800e-18 -2.166025e-14 -1.098190e-12 -3.060238e-03 -7.956945e-01 [8,] 3.536443e-21 1.163908e-09 4.153456e-16 9.999923e-01 -3.845945e-03 [9,] 3.961819e-17 9.118353e-14 -7.090095e-18 7.927470e-05 -3.048885e-07 [10,] -8.624363e-17 8.900103e-14 7.155285e-18 7.742184e-05 -2.977624e-07 [11,] 4.409508e-32 -1.412408e-16 -4.012165e-23 -1.397337e-07 5.973322e-09 [12,] 2.519775e-28 -2.097766e-04 -2.406708e-19 -7.969978e-04 3.048049e-05 [13,] 3.917546e-36 7.070355e-01 1.094801e-21 -1.190372e-07 4.524148e-09 [14,] -7.757457e-42 7.071780e-01 -9.169239e-22 -1.190532e-07 4.524756e-09 [,11] [,12] [,13] [,14] [1,] -3.476553e-10 -1.035564e-05 2.597141e-10 -1.085114e-12 [2,] -3.476517e-10 -1.035553e-05 2.597115e-10 -1.085103e-12 [3,] -3.357172e-05 -1.000000e+00 2.507949e-05 -1.047848e-07 [4,] -9.999999e-01 3.357179e-05 -2.887349e-06 1.308209e-08 [5,] -3.291235e-04 -1.522297e-07 1.660393e-05 -6.999686e-08 [6,] -2.000232e-07 -9.251733e-11 1.009096e-08 -4.254026e-11 [7,] -4.323724e-04 -1.999855e-07 2.181273e-05 -9.195548e-08 [8,] -1.646882e-06 1.907666e-08 7.971021e-04 -3.342045e-06 [9,] -1.305556e-10 1.511987e-12 6.319569e-08 -2.649634e-10 [10,] -1.275041e-10 1.476644e-12 6.171889e-08 -2.587715e-10 [11,] -1.479083e-09 4.030197e-09 -4.017381e-03 -9.999919e-01 [12,] -2.870328e-06 2.507980e-05 9.999916e-01 -4.017379e-03 [13,] -4.257394e-10 3.719949e-09 1.483232e-04 -5.958757e-07 [14,] -4.257975e-10 3.720449e-09 1.483431e-04 -5.959557e-07 $fbar [1] -1.310173e-06 9.994549e-01 -1.414103e+00 -1.901637e-01 1.424902e-04 [6] 1.097747e-05 1.414004e+00 1.414199e+00 1.004743e+00 1.398475e+00 [11] -9.992091e-01 1.000080e+00 1.005036e+00 9.959703e-01 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . Note: Using an external vector in selections is ambiguous. ℹ Use `all_of(n)` instead of `n` to silence this message. ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. This message is displayed once per session. . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;asdf.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(8),-%EA%B2%B0%EA%B3%BC%EC%A2%8B%EC%9D%8C.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(8),-%EA%B2%B0%EA%B3%BC%EC%A2%8B%EC%9D%8C.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post33": {
            "title": "(연구) HST example 1 (7)",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=1 W[n-1,n-1]=1 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavySnowTransform(gs) hst.snow(tau=80000,b=0.03) . HST (tau= 80000, b=0.03) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7fdd61c7d2e0&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 2.0.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘kohonen’ R[write to console]: The following object is masked from ‘package:purrr’: map R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.000000e+00 4.105614e-07 2.709080e-07 5.104859e-08 3.770892e-08 [6] 3.316426e-09 5.516926e-13 2.800406e-13 1.826920e-15 3.896899e-17 [11] 4.026254e-22 3.136459e-28 9.621581e-31 8.205729e-41 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -4.872398e-21 -2.277947e-23 1.217956e-17 -7.070951e-01 1.591941e-20 [2,] -4.872291e-21 -2.277897e-23 1.217945e-17 7.071184e-01 1.591858e-20 [3,] -2.220446e-16 -1.038104e-18 1.084613e-13 -1.702405e-10 -4.878917e-19 [4,] 3.239842e-22 -2.071665e-16 1.500257e-17 -2.539346e-33 -3.705267e-16 [5,] -1.355253e-20 -7.005055e-17 -1.603870e-12 1.429643e-32 -7.891712e-02 [6,] 1.626303e-19 -2.278466e-17 1.341385e-10 -1.428760e-33 8.945444e-01 [7,] 9.583941e-16 -3.376154e-17 -2.317701e-09 2.397739e-34 -4.399573e-01 [8,] 4.648033e-04 -5.301741e-21 7.887639e-01 2.435898e-33 2.480182e-09 [9,] -9.999999e-01 -4.451367e-24 1.931258e-04 -5.240705e-30 2.573975e-12 [10,] 2.822440e-04 -7.083369e-21 -6.146962e-01 1.479158e-33 5.036776e-09 [11,] 5.926393e-19 1.522706e-22 9.765278e-12 2.828446e-48 1.117961e-16 [12,] 1.184712e-33 1.120097e-16 1.187607e-27 6.208720e-63 -7.004156e-35 [13,] 1.270666e-50 -7.071068e-01 1.500706e-30 -3.962613e-74 -6.108070e-35 [14,] -2.604954e-57 7.071068e-01 -1.500706e-30 3.949298e-74 6.108070e-35 [,6] [,7] [,8] [,9] [,10] [1,] 1.228684e-17 -7.485555e-13 7.071184e-01 -2.304566e-15 -5.485654e-12 [2,] 1.228653e-17 -7.485391e-13 7.070951e-01 -2.304516e-15 -5.485534e-12 [3,] -2.114733e-18 -3.411312e-08 -3.103222e-05 -1.050235e-10 -2.499919e-07 [4,] 1.043364e-15 -8.608235e-13 -9.036792e-24 -2.134150e-08 -5.709179e-08 [5,] 4.964222e-01 -3.077535e-04 -1.319654e-17 -7.382555e-09 8.644865e-01 [6,] -3.474563e-01 -1.000479e-04 7.451451e-18 -2.401260e-09 2.811841e-01 [7,] -7.955119e-01 -1.482069e-04 2.231338e-17 -3.558126e-09 4.166514e-01 [8,] 6.807945e-08 6.146960e-01 -4.815712e-17 -1.868431e-12 2.187902e-04 [9,] 5.712388e-11 5.083367e-04 -1.191193e-20 -1.545137e-15 1.809330e-07 [10,] 9.028034e-08 7.887639e-01 3.752961e-17 -2.397514e-12 2.807450e-04 [11,] 2.198639e-15 -6.153941e-06 -5.859021e-28 1.176328e-15 -3.111288e-05 [12,] -1.427874e-32 -7.499323e-22 -7.127268e-44 -2.517192e-08 -2.149603e-16 [13,] -2.918848e-30 -3.747748e-19 1.184696e-39 7.071068e-01 6.038560e-09 [14,] 2.918848e-30 -3.329404e-19 -1.184696e-39 7.071068e-01 6.038561e-09 [,11] [,12] [,13] [,14] [1,] 2.194333e-05 -4.280149e-09 2.446234e-09 4.755196e-18 [2,] 2.194285e-05 -4.280055e-09 2.446181e-09 4.755092e-18 [3,] 1.000000e+00 -1.950547e-04 1.114796e-04 2.167035e-13 [4,] 7.012320e-05 -2.004276e-01 -9.797085e-01 -8.634163e-09 [5,] 2.218480e-07 2.633910e-05 -5.438784e-06 -5.731230e-14 [6,] 7.215858e-08 8.567094e-06 -1.769026e-06 -1.864148e-14 [7,] 1.069228e-07 1.269450e-05 -2.621298e-06 -2.762247e-14 [8,] 2.183267e-08 3.712699e-06 -7.595512e-07 -8.015646e-15 [9,] 1.805511e-11 3.070304e-09 -6.281288e-10 -6.628728e-18 [10,] 2.801536e-08 4.764066e-06 -9.746419e-07 -1.028553e-14 [11,] 2.134403e-04 9.797085e-01 -2.004276e-01 -2.115140e-09 [12,] 8.402050e-13 3.416960e-10 -8.882894e-09 1.000000e+00 [13,] 7.532262e-11 -3.024428e-09 -1.478454e-08 1.779923e-08 [14,] 7.532262e-11 -3.024428e-09 -1.478454e-08 1.779923e-08 $fbar [1] -9.992528e-01 -1.887886e-08 1.742609e-01 -2.327415e-05 -3.756699e-01 [6] 6.465461e-01 1.404530e+00 -1.414183e+00 1.414214e+00 -1.561791e+00 [11] -1.000188e+00 -1.179980e+00 -7.793844e-01 1.000000e+00 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . Note: Using an external vector in selections is ambiguous. ℹ Use `all_of(n)` instead of `n` to silence this message. ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. This message is displayed once per session. . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(7).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(7).html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post34": {
            "title": "(연구) HST example 1 (6)",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=1 W[n-1,n-1]=1 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavySnowTransform(gs) hst.snow(tau=80000,b=0.03) . HST (tau= 80000, b=0.03) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f32923aa0a0&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 2.0.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘kohonen’ R[write to console]: The following object is masked from ‘package:purrr’: map R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.999761e+00 1.000000e+00 2.394143e-04 2.490505e-07 7.763995e-08 [6] 3.897684e-10 3.862066e-11 4.759240e-12 1.338101e-14 8.565422e-18 [11] 7.262993e-21 2.984554e-23 1.699135e-25 2.186514e-33 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -7.071068e-01 3.399790e-20 7.071068e-01 4.714158e-17 2.187466e-23 [2,] 7.071068e-01 3.388904e-20 7.071068e-01 4.715285e-17 2.187989e-23 [3,] -1.055615e-10 -4.440892e-16 -8.818865e-07 8.187692e-11 3.508290e-17 [4,] -6.343903e-28 4.798396e-22 -5.298713e-24 1.998401e-15 1.188037e-16 [5,] -7.953475e-22 5.260171e-04 -6.559183e-18 -8.428319e-01 3.294244e-19 [6,] -7.836455e-23 -9.999998e-01 -9.264757e-21 -3.279650e-04 1.441352e-22 [7,] 7.824325e-27 2.143886e-04 3.028994e-21 5.381768e-01 -1.359700e-19 [8,] -5.511857e-42 2.582706e-21 -2.203172e-37 -3.546299e-14 -2.029920e-16 [9,] -2.074409e-45 6.152347e-27 -1.934975e-41 6.369274e-18 -2.392213e-17 [10,] -1.334284e-50 1.693165e-34 -1.024350e-46 -3.247787e-21 5.363326e-17 [11,] -9.501223e-57 1.068480e-43 -7.939094e-53 -3.071872e-35 1.303965e-26 [12,] -4.146264e-69 -1.777885e-55 9.867995e-65 -6.154673e-37 2.126462e-08 [13,] -1.558172e-74 -2.927346e-64 -1.314831e-70 -3.373967e-45 -7.072368e-01 [14,] -5.571384e-80 -2.941127e-72 2.083306e-74 -1.710405e-47 7.069767e-01 [,6] [,7] [,8] [,9] [,10] [1,] 1.280611e-22 -2.171164e-22 4.165500e-22 6.039770e-10 -7.952977e-13 [2,] 1.280918e-22 -2.171684e-22 4.166497e-22 6.041216e-10 -7.954881e-13 [3,] 2.053864e-16 -3.482153e-16 6.680691e-16 9.686674e-04 -1.275510e-06 [4,] 3.149384e-17 1.548678e-16 -3.684978e-13 1.752008e-08 5.991793e-07 [5,] -2.227570e-12 1.098780e-10 -2.534759e-19 -5.381764e-01 4.522589e-07 [6,] -1.918002e-15 9.468134e-14 -3.272566e-22 -4.637835e-04 3.897425e-10 [7,] -3.480886e-12 1.720410e-10 -9.045363e-19 -8.428315e-01 7.082772e-07 [8,] 1.164463e-01 -5.697213e-01 3.785104e-13 6.845551e-07 8.135465e-01 [9,] -9.178945e-01 2.511331e-01 1.418959e-13 2.586324e-07 3.072489e-01 [10,] 3.793547e-01 7.825279e-01 2.268687e-13 4.156512e-07 4.937005e-01 [11,] -1.828483e-14 -3.806576e-13 -4.970924e-17 -5.835723e-16 -1.082853e-06 [12,] -3.011466e-13 -6.269305e-12 -3.467768e-04 -9.611235e-15 -1.783449e-05 [13,] 2.259863e-18 3.332198e-16 7.069767e-01 -4.012326e-18 -4.372955e-09 [14,] -4.353335e-19 9.890725e-17 7.072368e-01 -3.623546e-18 -4.374028e-09 [,11] [,12] [,13] [,14] [1,] 6.235130e-07 -1.623268e-14 -2.775098e-11 -1.078127e-15 [2,] 6.236623e-07 -1.623657e-14 -2.775762e-11 -1.078385e-15 [3,] 9.999995e-01 -2.603422e-08 -4.450743e-05 -1.729116e-09 [4,] -4.450747e-05 2.355265e-05 -1.000000e+00 -1.889325e-06 [5,] 5.213142e-04 -2.142230e-11 -3.263100e-08 -1.411610e-12 [6,] 4.492522e-07 -1.846107e-14 -2.812037e-11 -1.216482e-15 [7,] 8.164238e-04 -3.354920e-11 -5.110301e-08 -2.210706e-12 [8,] 1.037046e-06 -1.450895e-05 4.870740e-07 -8.849903e-07 [9,] 3.916568e-07 -5.479539e-06 1.839513e-07 -3.342309e-07 [10,] 6.293307e-07 -8.804759e-06 2.955808e-07 -5.370566e-07 [11,] -1.638867e-09 2.784688e-04 1.895883e-06 -1.000000e+00 [12,] -2.710570e-08 -9.999999e-01 -2.355213e-05 -2.784688e-04 [13,] -6.646211e-12 -2.451781e-04 -5.774730e-09 -6.827447e-08 [14,] -6.647841e-12 -2.452383e-04 -5.776146e-09 -6.829122e-08 $fbar [1] 1.055614e-10 9.992594e-01 -1.414213e+00 3.049831e-01 -2.600770e-04 [6] -4.220936e-01 4.639397e-01 1.413867e+00 1.380504e+00 1.614480e+00 [11] -1.001381e+00 -1.000774e+00 -9.999799e-01 9.997177e-01 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . Note: Using an external vector in selections is ambiguous. ℹ Use `all_of(n)` instead of `n` to silence this message. ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. This message is displayed once per session. . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(6).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(6).html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post35": {
            "title": "(연구) HST example 1 (5), 이것도 좋아",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=1 W[n-1,n-1]=1 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavySnowTransform(gs) hst.snow(tau=80000,b=0.03) . HST (tau= 80000, b=0.03) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f3bea717100&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 2.0.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘kohonen’ R[write to console]: The following object is masked from ‘package:purrr’: map R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.000000e+00 1.000000e+00 1.464949e-06 8.895530e-07 2.262007e-07 [6] 1.598314e-07 3.665785e-11 2.563940e-11 2.593852e-13 2.827377e-15 [11] 2.360321e-20 1.349273e-20 3.095710e-24 3.148489e-31 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] 1.647932e-20 3.137845e-19 4.670955e-17 7.070194e-01 -2.110975e-17 [2,] -1.640639e-20 -2.995340e-19 4.669956e-17 -7.071942e-01 -2.176539e-17 [3,] -4.315376e-20 4.378573e-17 -8.617348e-21 9.612956e-09 1.565717e-11 [4,] -8.909868e-36 9.812867e-19 -6.559834e-18 1.267163e-24 1.193625e-10 [5,] -1.110259e-16 4.010600e-04 9.818989e-19 7.188842e-19 -7.695629e-01 [6,] 7.209903e-17 -9.999999e-01 7.204954e-22 1.292970e-19 -1.323671e-04 [7,] -2.506421e-21 2.760443e-04 1.183488e-18 -1.001968e-19 6.385710e-01 [8,] -6.284982e-04 3.823373e-17 1.220879e-19 1.461574e-23 -9.348682e-10 [9,] 9.999998e-01 7.216759e-17 2.397844e-22 -2.325499e-20 -5.690448e-13 [10,] -8.067624e-05 -5.453771e-21 3.406269e-19 1.876125e-24 2.280197e-10 [11,] -7.887563e-23 3.532282e-29 2.224878e-29 8.074159e-42 -6.851679e-23 [12,] -3.112061e-22 -2.104480e-38 1.732937e-09 7.249261e-42 -1.467225e-23 [13,] -1.636686e-32 -1.110983e-48 -7.071439e-01 3.623240e-52 1.371193e-22 [14,] 1.135212e-38 7.156130e-55 7.070697e-01 -7.610043e-54 -1.371049e-22 [,6] [,7] [,8] [,9] [,10] [1,] -7.676414e-18 7.071942e-01 -1.380086e-18 1.882027e-09 -1.866699e-11 [2,] -7.674412e-18 7.070193e-01 -1.379858e-18 1.881715e-09 -1.866391e-11 [3,] -1.642364e-16 -2.332220e-04 -8.367883e-15 1.133051e-05 -1.131751e-07 [4,] -8.637074e-14 -4.408770e-17 8.525762e-13 8.637512e-05 -2.719773e-06 [5,] -1.042256e-09 1.202972e-11 4.370350e-17 -6.385709e-01 6.823261e-05 [6,] -3.510080e-13 8.828157e-15 3.206654e-20 -4.685387e-04 5.006437e-08 [7,] 2.425813e-10 1.450316e-11 5.266838e-17 -7.695629e-01 8.222954e-05 [8,] 9.413752e-01 4.176500e-18 1.875379e-15 3.604738e-05 3.373609e-01 [9,] 5.644357e-04 1.075991e-17 1.600136e-18 3.077081e-08 2.879774e-04 [10,] -3.373611e-01 -1.652459e-17 5.224063e-15 1.005884e-04 9.413753e-01 [11,] 8.227223e-16 1.316464e-28 9.611076e-17 -1.512357e-13 -1.298295e-07 [12,] 3.070801e-14 -1.094309e-25 -9.900698e-05 -5.645508e-12 -4.844137e-06 [13,] -2.914076e-22 4.680526e-17 7.070696e-01 -3.983731e-16 -3.391229e-10 [14,] -3.727726e-22 -4.680034e-17 7.071439e-01 -4.003261e-16 -3.391466e-10 [,11] [,12] [,13] [,14] [1,] -1.649079e-04 2.474159e-06 8.676449e-12 2.888636e-13 [2,] -1.648807e-04 2.473751e-06 8.675019e-12 2.888160e-13 [3,] -9.998874e-01 1.500158e-02 5.260798e-08 1.751469e-09 [4,] -1.500158e-02 -9.998875e-01 1.062026e-06 -3.904474e-10 [5,] -8.061979e-06 -5.504216e-05 -2.679600e-10 -8.959269e-12 [6,] -5.915310e-09 -4.038604e-08 -1.966107e-13 -6.573692e-15 [7,] -9.715731e-06 -6.633294e-05 -3.229285e-10 -1.079713e-11 [8,] -5.148622e-08 -9.137639e-07 -1.634196e-06 -4.474095e-08 [9,] -4.394957e-11 -7.800053e-10 -1.394980e-09 -3.819168e-11 [10,] -1.436676e-07 -2.549775e-06 -4.560078e-06 -1.248456e-07 [11,] -1.705909e-09 1.028381e-09 5.761379e-04 -9.999998e-01 [12,] -6.853438e-08 -1.061103e-06 -9.999998e-01 -5.761379e-04 [13,] -4.794693e-12 -7.368076e-11 -7.000604e-05 -4.033314e-08 [14,] -4.795030e-12 -7.368608e-11 -7.001094e-05 -4.033596e-08 $fbar [1] 9.992906e-01 9.993228e-01 -7.425277e-05 1.748349e-04 1.311243e-01 [6] 6.045785e-01 -1.413980e+00 1.414115e+00 1.408814e+00 1.278866e+00 [11] 9.852332e-01 -1.014777e+00 -1.000721e+00 9.994234e-01 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . Note: Using an external vector in selections is ambiguous. ℹ Use `all_of(n)` instead of `n` to silence this message. ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. This message is displayed once per session. . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(5),-%EC%9D%B4%EA%B2%83%EB%8F%84-%EC%A2%8B%EC%95%84.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(5),-%EC%9D%B4%EA%B2%83%EB%8F%84-%EC%A2%8B%EC%95%84.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post36": {
            "title": "(연구) HST example 1 (4)",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=1 W[n-1,n-1]=1 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavySnowTransform(gs) hst.snow(tau=80000,b=0.03) . HST (tau= 80000, b=0.03) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7ff12f950520&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 2.0.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘kohonen’ R[write to console]: The following object is masked from ‘package:purrr’: map R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.000001e+00 1.787345e-06 1.470615e-07 1.416525e-07 1.302853e-07 [6] 1.388941e-08 2.177604e-11 3.320085e-12 1.973246e-14 1.533766e-16 [11] 1.384959e-18 5.606658e-26 3.974896e-26 1.761591e-30 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -1.403931e-22 7.070809e-01 -7.947551e-24 7.591779e-19 1.348505e-22 [2,] -1.403863e-22 -7.071326e-01 -7.947164e-24 7.591420e-19 1.348439e-22 [3,] -2.876394e-18 8.408882e-10 -1.628472e-19 -3.577911e-14 2.763119e-18 [4,] 4.207339e-24 9.954128e-26 -6.214184e-16 -5.551115e-16 -2.371401e-17 [5,] 2.829643e-05 2.304122e-22 4.996446e-18 1.773058e-01 -7.321149e-13 [6,] -9.999996e-01 -4.428097e-23 9.268412e-22 -8.536656e-04 3.230721e-15 [7,] 8.725068e-04 -3.411385e-24 9.002328e-19 -9.841554e-01 3.726534e-12 [8,] 6.118374e-20 5.889401e-37 1.237469e-16 2.556936e-12 1.587786e-01 [9,] 7.925032e-25 -5.915170e-39 5.273557e-17 -3.280217e-12 -9.333698e-01 [10,] 1.012965e-28 3.646515e-40 9.187549e-17 1.024146e-12 3.218855e-01 [11,] 1.322669e-32 2.619586e-41 3.848226e-23 -1.207074e-24 -4.415323e-13 [12,] -4.630337e-50 -2.142860e-56 -2.883533e-09 -2.756118e-27 -9.418240e-16 [13,] -5.770641e-61 8.981613e-64 7.071547e-01 5.168948e-35 2.680300e-23 [14,] -1.079175e-67 -3.845164e-65 -7.070589e-01 -4.005637e-35 -2.247864e-23 [,6] [,7] [,8] [,9] [,10] [1,] -3.967316e-22 -7.071326e-01 3.178394e-20 1.447203e-16 -9.322824e-09 [2,] -3.967123e-22 -7.070809e-01 3.178239e-20 1.447132e-16 -9.322370e-09 [3,] -8.129125e-18 6.901722e-05 6.512603e-16 2.961542e-12 -1.910249e-04 [4,] 1.250698e-16 -5.886527e-19 2.570340e-12 6.797431e-11 -1.262960e-07 [5,] 2.426851e-12 -1.360822e-13 -2.037860e-14 -1.870672e-06 9.841558e-01 [6,] -7.395544e-16 -2.524444e-17 -3.780105e-18 -3.469849e-10 1.825486e-04 [7,] -9.262813e-13 -2.451991e-14 -3.671561e-15 -3.370191e-07 1.773057e-01 [8,] -6.305704e-01 1.212638e-22 -4.995542e-13 7.597173e-01 1.444063e-06 [9,] 1.549996e-01 5.181013e-23 -2.128634e-13 3.237221e-01 6.153267e-07 [10,] 7.604973e-01 9.039134e-23 -3.708201e-13 5.639447e-01 1.071938e-06 [11,] -9.787922e-12 -1.096101e-30 8.754796e-17 -5.109122e-06 -1.249408e-09 [12,] -2.087413e-14 -2.337556e-33 1.277102e-04 -1.089566e-08 -2.664472e-12 [13,] -9.436410e-21 -4.772343e-37 -7.070589e-01 -1.448832e-12 -1.473685e-14 [14,] 1.033617e-20 5.206962e-37 -7.071547e-01 -1.448947e-12 -1.473665e-14 [,11] [,12] [,13] [,14] [1,] -4.880373e-05 2.670627e-13 6.824687e-12 1.830580e-15 [2,] -4.880135e-05 2.670496e-13 6.824354e-12 1.830490e-15 [3,] -1.000000e+00 5.472177e-09 1.398394e-07 3.750901e-11 [4,] -1.399223e-07 -3.909661e-02 -9.992354e-01 1.101266e-05 [5,] -1.879982e-04 -4.881712e-09 -1.241728e-07 -1.218460e-09 [6,] -3.487132e-08 -9.054965e-13 -2.303250e-11 -2.260091e-13 [7,] -3.386980e-05 -8.794901e-10 -2.237099e-08 -2.195180e-10 [8,] -2.736021e-10 -7.389240e-08 2.899881e-09 -3.880787e-06 [9,] -1.165841e-10 -3.148626e-08 1.235667e-09 -1.653641e-06 [10,] -2.030967e-10 -5.485120e-08 2.152616e-09 -2.880753e-06 [11,] -3.881854e-11 -2.116816e-02 8.172180e-04 -9.997756e-01 [12,] -8.278411e-14 9.990112e-01 -3.908807e-02 -2.118393e-02 [13,] -4.630662e-16 9.021138e-05 -3.529681e-06 -1.912923e-06 [14,] -4.630902e-16 9.021953e-05 -3.530000e-06 -1.913095e-06 $fbar [1] 9.990988e-01 5.168789e-05 9.578186e-05 8.077033e-01 -4.527057e-01 [6] 2.849265e-01 1.414145e+00 -1.414086e+00 1.647391e+00 -1.161450e+00 [11] 1.000319e+00 9.812630e-01 -1.039148e+00 9.785904e-01 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . Note: Using an external vector in selections is ambiguous. ℹ Use `all_of(n)` instead of `n` to silence this message. ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. This message is displayed once per session. . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(4).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(4).html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post37": {
            "title": "(연구) HST example 1 (3)",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=1 W[n-1,n-1]=1 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavySnowTransform(gs) hst.snow(tau=80000,b=0.03) . HST (tau= 80000, b=0.03) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f9144d36070&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 2.0.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘kohonen’ R[write to console]: The following object is masked from ‘package:purrr’: map R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.193925e-06 2.092204e-07 9.580557e-08 5.455557e-08 1.064895e-08 [6] 6.060082e-09 4.294887e-10 1.064746e-14 3.364764e-16 3.235964e-18 [11] 6.618887e-21 2.770527e-24 8.040989e-30 5.752486e-36 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -7.063428e-01 -6.053749e-22 1.869147e-19 7.626175e-22 2.679111e-19 [2,] 7.078700e-01 -6.045045e-22 1.868795e-19 7.615210e-22 2.616164e-19 [3,] -7.335644e-07 -4.204124e-19 3.330671e-16 5.296120e-19 -5.467861e-15 [4,] 1.065757e-27 1.220969e-16 1.464965e-17 -1.784350e-16 7.351012e-17 [5,] 5.023002e-23 -3.388788e-17 -2.408081e-01 -3.058298e-14 7.110555e-01 [6,] -9.820624e-25 -1.709990e-17 9.427587e-01 6.163647e-14 9.585785e-03 [7,] 1.727671e-26 -3.450357e-17 -2.306893e-01 1.219716e-13 -7.030706e-01 [8,] -3.292670e-40 -1.634073e-18 7.331731e-14 -2.440900e-01 2.886819e-12 [9,] 3.043749e-42 -3.277651e-19 -1.999038e-14 9.427074e-01 5.432442e-13 [10,] 7.337701e-45 3.951862e-19 2.612372e-15 -2.274266e-01 -1.316616e-12 [11,] -1.024163e-47 1.477549e-22 5.040934e-26 3.891927e-13 1.299756e-23 [12,] -2.504526e-62 1.470243e-17 -1.925844e-34 2.944241e-20 8.732261e-31 [13,] -1.184385e-66 -7.071068e-01 3.074302e-40 -1.069214e-24 -1.049724e-31 [14,] 1.136956e-67 7.071068e-01 -3.074303e-40 1.069214e-24 1.049724e-31 [,6] [,7] [,8] [,9] [,10] [1,] -3.688129e-22 -7.078685e-01 8.811501e-16 -9.614111e-14 2.315469e-08 [2,] -3.682826e-22 -7.063413e-01 8.798831e-16 -9.600288e-14 2.312140e-08 [3,] -2.561281e-19 2.034936e-03 6.119287e-13 -6.676675e-11 1.608015e-05 [4,] 2.062995e-17 -1.204826e-19 -2.948330e-11 1.638106e-08 -2.088525e-06 [5,] 3.545791e-12 -1.596836e-16 -7.499280e-07 -5.446001e-09 -6.606146e-01 [6,] 7.982009e-13 -8.504093e-17 -3.784040e-07 -2.747985e-09 -3.333379e-01 [7,] -6.567954e-13 -1.790135e-16 -7.636026e-07 -5.545319e-09 -6.726620e-01 [8,] -7.135637e-01 4.469097e-27 6.566939e-01 4.348222e-13 -7.454780e-07 [9,] -1.578573e-02 2.506379e-27 3.332471e-01 2.206557e-13 -3.783008e-07 [10,] 7.004125e-01 5.495560e-27 6.765349e-01 4.479597e-13 -7.679983e-07 [11,] -1.079305e-11 -1.185759e-36 -5.933708e-06 1.886461e-14 2.216327e-08 [12,] -8.163006e-19 -9.037231e-44 -4.487655e-13 -9.142051e-09 1.751612e-15 [13,] 1.023878e-18 5.625541e-40 -4.747859e-13 7.071068e-01 -5.829251e-09 [14,] -1.023878e-18 -5.625541e-40 -4.748538e-13 7.071068e-01 -5.829251e-09 [,11] [,12] [,13] [,14] [1,] 1.439952e-03 -6.653658e-09 -2.766438e-13 1.119196e-15 [2,] 1.437882e-03 -6.644092e-09 -2.762461e-13 1.117587e-15 [3,] 9.999979e-01 -4.620740e-06 -1.921198e-10 7.772436e-13 [4,] -4.620716e-06 -1.000000e+00 -3.264321e-06 1.311061e-08 [5,] 1.062281e-05 1.379661e-06 -1.463231e-08 5.922670e-11 [6,] 5.360137e-06 6.961598e-07 -7.383283e-09 2.988506e-11 [7,] 1.081653e-05 1.404821e-06 -1.489916e-08 6.030680e-11 [8,] 1.158480e-11 -5.084759e-12 -3.896591e-06 1.577206e-08 [9,] 5.878831e-12 -2.580111e-12 -1.977374e-06 8.003731e-09 [10,] 1.193477e-11 -5.238249e-12 -4.014335e-06 1.624865e-08 [11,] -1.773944e-10 3.264348e-06 -9.999918e-01 4.047547e-03 [12,] -9.525445e-17 -1.019884e-10 4.047547e-03 9.999918e-01 [13,] 4.735857e-11 1.158317e-08 2.621626e-11 6.464353e-09 [14,] 4.735857e-11 1.158317e-08 2.621626e-11 6.464353e-09 $fbar [1] -1.526477e-03 -6.823100e-09 -4.712613e-01 4.711907e-01 -1.757068e-02 [6] -2.893692e-02 1.412175e+00 1.666484e+00 1.414214e+00 1.666594e+00 [11] -1.002907e+00 -1.000002e+00 1.004026e+00 9.959443e-01 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . Note: Using an external vector in selections is ambiguous. ℹ Use `all_of(n)` instead of `n` to silence this message. ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. This message is displayed once per session. . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(3).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(3).html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post38": {
            "title": "(연구) HST example 1 (2)",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=1 W[n-1,n-1]=1 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavySnowTransform(gs) hst.snow(tau=80000,b=0.03) . HST (tau= 80000, b=0.03) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f209bf05070&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 2.0.1 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Attaching package: ‘gridExtra’ R[write to console]: The following object is masked from ‘package:dplyr’: combine R[write to console]: Attaching package: ‘lubridate’ R[write to console]: The following objects are masked from ‘package:base’: date, intersect, setdiff, union . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . R[write to console]: Attaching package: ‘kohonen’ R[write to console]: The following object is masked from ‘package:purrr’: map R[write to console]: Attaching package: ‘igraph’ R[write to console]: The following objects are masked from ‘package:lubridate’: %--%, union R[write to console]: The following objects are masked from ‘package:dplyr’: as_data_frame, groups, union R[write to console]: The following objects are masked from ‘package:purrr’: compose, simplify R[write to console]: The following object is masked from ‘package:tidyr’: crossing R[write to console]: The following object is masked from ‘package:tibble’: as_data_frame R[write to console]: The following objects are masked from ‘package:stats’: decompose, spectrum R[write to console]: The following object is masked from ‘package:base’: union . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 1.000000e+00 1.748909e-07 1.248978e-07 9.982953e-08 1.180269e-08 [6] 9.249661e-10 6.508030e-12 8.123462e-13 1.916909e-14 1.071529e-14 [11] 4.857968e-18 5.283643e-26 3.722524e-29 4.830679e-33 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] 7.005723e-20 3.729395e-18 -1.469697e-23 7.069685e-01 1.786276e-17 [2,] -8.327039e-20 3.785475e-18 -1.469314e-23 -7.072451e-01 1.785560e-17 [3,] -2.529741e-17 1.589505e-13 -5.635188e-20 2.405103e-08 1.182894e-18 [4,] 2.251861e-21 3.075318e-14 1.378141e-16 -6.352581e-28 -6.216104e-17 [5,] 9.561935e-05 -3.651936e-01 -4.255448e-21 -2.869805e-20 1.026081e-11 [6,] -9.999998e-01 5.436463e-04 -1.475276e-24 5.679467e-20 2.216905e-15 [7,] 6.214913e-04 9.309315e-01 -1.719046e-21 2.823516e-20 1.988807e-12 [8,] 5.269063e-19 -3.744835e-12 -7.596066e-20 -7.007619e-32 -4.816496e-01 [9,] 3.391557e-23 1.052189e-13 -5.359558e-20 -6.631717e-35 8.745009e-01 [10,] 2.027237e-28 -4.552571e-16 -1.800477e-19 -1.075604e-39 -5.711270e-02 [11,] 1.123853e-30 -4.200738e-25 -6.213816e-21 -8.046281e-45 3.960782e-12 [12,] -4.766959e-58 6.088889e-39 2.393049e-10 -6.949691e-66 1.132032e-23 [13,] -3.323294e-72 -2.189008e-48 -7.071206e-01 -6.845625e-79 -8.282761e-28 [14,] 3.125900e-80 7.202257e-49 7.070930e-01 -3.136336e-83 8.282033e-28 [,6] [,7] [,8] [,9] [,10] [1,] -1.455507e-18 -7.072450e-01 -7.324367e-22 9.407628e-10 1.808390e-14 [2,] -1.454307e-18 -7.069684e-01 -7.322457e-22 9.405173e-10 1.807918e-14 [3,] -1.414896e-18 3.687888e-04 -2.808338e-18 3.601453e-06 6.927739e-11 [4,] 2.587258e-16 -2.468864e-19 -5.151717e-15 7.164045e-07 1.843432e-11 [5,] 2.035470e-10 -1.945681e-12 -3.428740e-20 -9.309316e-01 -1.001220e-05 [6,] 6.712061e-14 -6.604440e-16 -1.282538e-23 -3.159797e-04 -3.398372e-09 [7,] 7.668328e-11 -7.633239e-13 -1.536118e-20 -3.651934e-01 -3.927668e-06 [8,] -7.985893e-01 -3.591407e-17 -3.167965e-16 3.881610e-06 -3.609277e-01 [9,] -4.111315e-01 8.288213e-17 -2.258664e-16 2.767518e-06 -2.573306e-01 [10,] 4.395747e-01 -9.271388e-18 -7.867859e-16 9.640781e-06 -8.963884e-01 [11,] -3.890376e-10 6.905949e-28 -2.217508e-16 -4.117182e-10 6.848286e-05 [12,] -1.111767e-21 1.931337e-39 3.679268e-05 -1.176006e-21 1.952327e-16 [13,] 2.500402e-21 1.252402e-31 -7.070930e-01 -8.986560e-21 6.146342e-16 [14,] -2.500304e-21 -1.252353e-31 -7.071206e-01 5.033057e-21 6.147426e-16 [,11] [,12] [,13] [,14] [1,] 2.608071e-04 -1.652406e-12 5.162787e-16 1.633612e-15 [2,] 2.607391e-04 -1.651975e-12 5.161441e-16 1.633186e-15 [3,] 9.999999e-01 -6.335744e-09 1.979544e-12 6.263684e-12 [4,] -6.338327e-09 -9.999995e-01 -7.462122e-05 9.886606e-04 [5,] 3.352707e-06 -6.669233e-07 2.526160e-10 6.593340e-10 [6,] 1.137986e-09 -2.263691e-10 8.574375e-14 2.237932e-13 [7,] 1.315227e-06 -2.616261e-07 9.909835e-11 2.586489e-10 [8,] 1.102464e-11 -1.850481e-09 2.471705e-05 -2.215486e-09 [9,] 7.860068e-12 -1.319341e-09 1.762257e-05 -1.579580e-09 [10,] 2.737851e-11 -4.595864e-09 6.138742e-05 -5.502394e-09 [11,] -2.455587e-12 -7.470987e-05 1.000000e+00 -8.963406e-05 [12,] 1.200893e-19 -9.886539e-04 -8.970788e-05 -9.999995e-01 [13,] -6.699708e-18 -2.572083e-08 -2.333842e-09 -2.601600e-05 [14,] -6.589052e-18 -2.572150e-08 -2.333902e-09 -2.601668e-05 $fbar [1] 9.992827e-01 -5.662815e-01 -2.759379e-05 2.765932e-04 3.357386e-01 [6] -7.701461e-01 1.413845e+00 -1.414177e+00 1.296454e+00 -1.514701e+00 [11] -1.000526e+00 -1.000913e+00 -1.000061e+00 -9.989733e-01 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . Note: Using an external vector in selections is ambiguous. ℹ Use `all_of(n)` instead of `n` to silence this message. ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. This message is displayed once per session. . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 × 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(2).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(2).html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post39": {
            "title": "(연구) HST example 1 (1)",
            "content": "Import . import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase %run heavysnow . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=0 W[n-1,n-1]=0 . gs=GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . %run heavysnow hst=HeavySnowTransform(gs) hst.snow(tau=80000,b=0.015,maxflow=2) . HST (tau= 80000, b=0.015) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowdistance) . &lt;matplotlib.image.AxesImage at 0x7f5bac1a0490&gt; . hst.snowweight=np.exp(-hst.snowdistance/(hst.tau*hst.b**1.5))-np.eye(n,n) plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7f5bab7ed970&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.3 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() R[write to console]: Error in library(gridExtra) : there is no package called ‘gridExtra’ . Error in library(gridExtra) : there is no package called ‘gridExtra’ . RRuntimeError Traceback (most recent call last) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/ipython/rmagic.py in eval(self, code) 267 # Need the newline in case the last line in code is a comment. --&gt; 268 value, visible = ro.r(&#34;withVisible({%s n})&#34; % code) 269 except (ri.embedded.RRuntimeError, ValueError) as exception: ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/robjects/__init__.py in __call__(self, string) 437 p = rinterface.parse(string) --&gt; 438 res = self.eval(p) 439 return conversion.rpy2py(res) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/robjects/functions.py in __call__(self, *args, **kwargs) 197 kwargs[r_k] = v --&gt; 198 return (super(SignatureTranslatedFunction, self) 199 .__call__(*args, **kwargs)) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/robjects/functions.py in __call__(self, *args, **kwargs) 124 new_kwargs[k] = conversion.py2rpy(v) --&gt; 125 res = super(Function, self).__call__(*new_args, **new_kwargs) 126 res = conversion.rpy2py(res) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/rinterface_lib/conversion.py in _(*args, **kwargs) 44 def _(*args, **kwargs): &gt; 45 cdata = function(*args, **kwargs) 46 # TODO: test cdata is of the expected CType ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/rinterface.py in __call__(self, *args, **kwargs) 679 if error_occured[0]: --&gt; 680 raise embedded.RRuntimeError(_rinterface._geterrmessage()) 681 return res RRuntimeError: Error in library(gridExtra) : there is no package called ‘gridExtra’ During handling of the above exception, another exception occurred: RInterpreterError Traceback (most recent call last) /tmp/ipykernel_37481/2086553443.py in &lt;module&gt; -&gt; 1 get_ipython().run_cell_magic(&#39;R&#39;, &#39;-w 2000 -h 800 -r 100&#39;, &#39;library(tidyverse) nlibrary(latex2exp) nlibrary(gridExtra) nsource( &#39;rbase.R &#39;) nVtext=str_c( &#39;node &#39;,V+1) nfig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ ngeom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&#34;gray60&#34;,lty=2)+ ngeom_text(fontface = 4,size=8)+ nxlab(&#34;&#34;)+ylab(&#34;&#34;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&#34;bold.italic&#34;))+theme_bw()+ ntheme(strip.text.x = element_text(size = 20, color = &#34;black&#34;, face = &#34;bold.italic&#34;))+ ntheme(strip.text.y = element_text(size = 15, color = &#34;black&#34;, face = &#34;bold.italic&#34;))+ nylim(-1.2,1.2)+ ntheme(plot.title=element_text(face=&#34;bold.italic&#34;)) n#ggsave(plot=p0,&#34;./fig/2021-0217_fig0.pdf&#34;,width=20,height=6) nfig0 n&#39;) ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/IPython/core/interactiveshell.py in run_cell_magic(self, magic_name, line, cell) 2401 with self.builtin_trap: 2402 args = (magic_arg_s, cell) -&gt; 2403 result = fn(*args, **kwargs) 2404 return result 2405 ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/decorator.py in fun(*args, **kw) 230 if not kwsyntax: 231 args, kw = fix(args, kw, sig) --&gt; 232 return caller(func, *(extras + args), **kw) 233 fun.__name__ = func.__name__ 234 fun.__doc__ = func.__doc__ ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&#39;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/ipython/rmagic.py in R(self, line, cell, local_ns) 781 if not e.stdout.endswith(e.err): 782 print(e.err) --&gt; 783 raise e 784 finally: 785 if self.device in [&#39;png&#39;, &#39;svg&#39;]: ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/ipython/rmagic.py in R(self, line, cell, local_ns) 761 return_output = False 762 else: --&gt; 763 text_result, result, visible = self.eval(code) 764 text_output += text_result 765 if visible: ~/anaconda3/envs/py38r40/lib/python3.8/site-packages/rpy2/ipython/rmagic.py in eval(self, code) 270 # Otherwise next return seems to have copy of error. 271 warning_or_other_msg = self.flush() --&gt; 272 raise RInterpreterError(code, str(exception), 273 warning_or_other_msg) 274 text_output = self.flush() RInterpreterError: Failed to parse and evaluate line &#39;library(tidyverse) nlibrary(latex2exp) nlibrary(gridExtra) nsource( &#39;rbase.R &#39;) nVtext=str_c( &#39;node &#39;,V+1) nfig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ ngeom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&#34;gray60&#34;,lty=2)+ ngeom_text(fontface = 4,size=8)+ nxlab(&#34;&#34;)+ylab(&#34;&#34;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&#34;bold.italic&#34;))+theme_bw()+ ntheme(strip.text.x = element_text(size = 20, color = &#34;black&#34;, face = &#34;bold.italic&#34;))+ ntheme(strip.text.y = element_text(size = 15, color = &#34;black&#34;, face = &#34;bold.italic&#34;))+ nylim(-1.2,1.2)+ ntheme(plot.title=element_text(face=&#34;bold.italic&#34;)) n#ggsave(plot=p0,&#34;./fig/2021-0217_fig0.pdf&#34;,width=20,height=6) nfig0 n&#39;. R error message: &#39;Error in library(gridExtra) : there is no package called ‘gridExtra’&#39; . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(1).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/08/02/(%EC%97%B0%EA%B5%AC)-HST-example-1-(1).html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post40": {
            "title": "(연구) HST example 2",
            "content": "import heavysnow as hs import numpy as np import pandas as pd import pybase as pb import matplotlib.pyplot as plt from sklearn.decomposition import PCA import rpy2 %load_ext rpy2.ipython . np.random.seed(777) import math pi=math.pi n=59 ang=np.linspace(-pi,pi-2*pi/n,n) V=np.arange(n)+1 r=1 vx=r*np.cos(ang) vy=r*np.sin(ang) f1=vx*0 f2=vx*0 f2[vy&lt;0]=3+np.random.normal(size=sum(vy&lt;0),scale=0.1) f2[vy&gt;0]= -3+np.random.normal(size=sum(vy&gt;0),scale=0.1) . Σ=pb.l2distance(np.matrix([vx,vy]).T) θ=0.05 W=np.exp(-Σ**2/(2*θ**2)) E=W&gt;0 plt.plot(W[0,:].T) # color import matplotlib.cm as cm col=list(np.array(cm.rainbow((ang+pi)/2/pi))) . %R -i ang %R -i vx %R -i vy %R -i n . %%R library(latex2exp) library(gridExtra) library(tidyverse) . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.2 ✔ dplyr 1.0.7 ✔ tidyr 1.1.3 ✔ stringr 1.4.0 ✔ readr 1.4.0 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::combine() masks gridExtra::combine() ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . %%R -w 450 -h 300 -r 100 ex2df&lt;-data.frame(cbind(ang,vx,vy)) names(ex2df)&lt;-c(&quot;ang&quot;,&quot;vx&quot;,&quot;vy&quot;) ex2plt &lt;- ggplot(data=ex2df,aes(x=vx,y=vy))+ geom_point(col=&quot;gray60&quot;,cex=1.5,alpha=0.7)+ geom_point(data=ex2df[1:n,],aes(x=vx,y=vy,col=ang),cex=1.5,alpha=0.7)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+scale_colour_gradientn(colours=rainbow(7))+labs(col=TeX(&quot;$ phi$&quot;))+theme_classic()+ theme(legend.key.width = unit(2,&quot;mm&quot;)) show(ex2plt) . gs1=hs.GraphSignal(V,W,f1) gs2=hs.GraphSignal(V,W,f2) . hs1=hs.HeavySnowTransform(gs1) hs2=hs.HeavySnowTransform(gs2) . hs1.snow(tau=40000,b=0.3) hs2.snow(tau=40000,b=0.3) . HST (tau= 40000, b=0.3) 40000/40000 HST completed and all history is recorded. HST (tau= 40000, b=0.3) 40000/40000 HST completed and all history is recorded. . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p1.fit(hs1.snowdistance) p2.fit(hs2.snowdistance) r1=p1.transform(hs1.snowdistance) r2=p2.transform(hs2.snowdistance) . p=plt.figure(figsize=(12,4), dpi=70) # Make figure object # 2. ax1=p.add_subplot(2,4,1, projection=&#39;3d&#39;) ax2=p.add_subplot(2,4,2, projection=&#39;3d&#39;) ax3=p.add_subplot(2,4,3, projection=&#39;3d&#39;) ax4=p.add_subplot(2,4,4, projection=&#39;3d&#39;) ax5=p.add_subplot(2,4,5, projection=&#39;3d&#39;) ax6=p.add_subplot(2,4,6, projection=&#39;3d&#39;) ax7=p.add_subplot(2,4,7, projection=&#39;3d&#39;) ax8=p.add_subplot(2,4,8, projection=&#39;3d&#39;) # 3. ax1.grid(False) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax1.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax1.scatter3D(vx, vy, f1, c=col,alpha=1) ax1.set_xlim(-1,1) ax1.set_ylim(-1,1) ax1.set_zlim(-5,5) ax2.grid(False) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax2.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax2.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=50,c=col,alpha=1) ax3.grid(False) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax3.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax3.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=50,c=col,alpha=1) ax4.grid(False) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax4.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax4.scatter3D(r1[:,0],r1[:,1],r1[:,2],s=50,c=col,alpha=1) ax5.grid(False) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax5.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) top = -f2 bottom = np.zeros_like(top) width=depth=0.05 ax5.bar3d(vx, vy, bottom, width, depth, top, shade=False,color=col) ax5.set_xlim(-1,1) ax5.set_ylim(-1,1) ax5.set_zlim(-5,5) ax6.grid(False) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax6.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax6.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=50,c=col,alpha=1) ax7.grid(False) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax7.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax7.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=50,c=col,alpha=1) ax8.grid(False) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;x&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;y&#39;,scilimits=(0,0)) ax8.ticklabel_format(style=&#39;sci&#39;, axis=&#39;z&#39;,scilimits=(0,0)) ax8.scatter3D(r2[:,0],r2[:,1],r2[:,2],s=50,c=col,alpha=1) p.tight_layout(h_pad=2.6) #rect : tuple (left, bottom, right, top), optional .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/27/(%EC%97%B0%EA%B5%AC)-HST-example-2.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/27/(%EC%97%B0%EA%B5%AC)-HST-example-2.html",
            "date": " • Jul 27, 2021"
        }
        
    
  
    
        ,"post41": {
            "title": "(연구) HST example 1",
            "content": "Import . import heavysnow as hs import numpy as np import pandas as pd import matplotlib.pyplot as plt import rpy2 %load_ext rpy2.ipython %run pybase . The rpy2.ipython extension is already loaded. To reload it, use: %reload_ext rpy2.ipython . Data . f=np.array([-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,1,1])*1.0 n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)==1: W[i,j]=1 W[0,0]=0.5 W[n-1,n-1]=0.5 . gs=hs.GraphSignal(V,W,f) . gs.initdist=np.array([1/n]*n) . HST . hst=hs.HeavySnowTransform(gsobj) hst.snow(tau=80000,b=0.005) . HST (tau= 80000, b=0.005) 80000/80000 HST completed and all history is recorded. . plt.imshow(hst.snowweight) . &lt;matplotlib.image.AxesImage at 0x7fc0482fd940&gt; . &#49884;&#44033;&#54868;&#47484; &#50948;&#54644;&#49436; R&#47196; &#51088;&#47308;&#47484; &#50734;&#44608; . maxtau=hst.tau W_Graph=hst.graphweight W_Euclid=hst.euclidweight W_HST=hst.snowweight V=np.array(hst.V) f=hst.f n=hst.n %R -i maxtau,W_Graph,W_Euclid,W_HST,V,f,n . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (1): &#50896;&#47000;&#51088;&#47308; . %%R -w 2000 -h 800 -r 100 library(tidyverse) library(latex2exp) library(gridExtra) source(&#39;rbase.R&#39;) Vtext=str_c(&#39;node &#39;,V+1) fig0&lt;-ggplot(data=tibble(V=V,f=f,Vtext=Vtext),aes(x=V,y=f,label=Vtext))+ geom_col(aes(fill=(f&gt;0)),width=0.1)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ geom_text(fontface = 4,size=8)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.2,1.2)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) #ggsave(plot=p0,&quot;./fig/2021-0217_fig0.pdf&quot;,width=20,height=6) fig0 . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (2): Weight matrix &#50752; Eigen plot . - ggplot에서 geom_tile을 사용하기 위해서 매트릭스 형태인 W_Graph, W_Euclid, W_HST를 길게 펼친다. 결과를 각각 W_Graph_long, W_Euclid_long, W_HST_long에 저장한다. . %%R grid&lt;-expand.grid(x=1:n,y=1:n) W_Graph_long&lt;-as_tibble(cbind(grid,as.vector(W_Graph)));names(W_Graph_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_Euclid_long&lt;-as_tibble(cbind(grid,as.vector(W_Euclid)));names(W_Euclid_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) W_HST_long&lt;-as_tibble(cbind(grid,as.vector(W_HST)));names(W_HST_long)&lt;-c(&quot;x&quot;,&quot;y&quot;,&quot;W&quot;) . - 그래프퓨리에 변환: $( bf{f}, bf{W})$에 그래프 퓨리에 변환을 수행함. . %%R source(&#39;heavysnow.R&#39;) gfftrslt_Euclid&lt;-gfft(f,W_Euclid) gfftrslt_Graph&lt;-gfft(f,W_Graph) gfftrslt_HST&lt;-gfft(f,W_HST) . - 그래프 퓨리에 변환의 결과 고유치, 고유벡터, $ bf{ bar{f}}$가 반환됨. . %%R head(gfftrslt_HST) . $λ [1] 2.000000e+00 1.998065e+00 1.973146e+00 1.904274e+00 1.026854e+00 [6] 1.001935e+00 9.572661e-02 7.354423e-10 3.613526e-17 2.448950e-17 [11] 1.417075e-23 1.752496e-24 9.860761e-32 1.867904e-40 $Ψ [,1] [,2] [,3] [,4] [,5] [1,] -9.071768e-51 1.720543e-96 -1.005578e-106 -7.141429e-05 5.188853e-107 [2,] -9.736659e-54 1.846654e-99 -1.079284e-109 7.071068e-01 5.569184e-110 [3,] -8.824039e-54 1.672315e-99 -9.773907e-110 -7.071068e-01 5.043406e-110 [4,] 2.570198e-48 1.336382e-51 -4.078315e-56 0.000000e+00 -2.039158e-56 [5,] -2.570182e-48 -3.036427e-99 1.774651e-109 9.860357e-10 -9.157328e-110 [6,] -7.071068e-01 8.270257e-36 2.800625e-40 -1.144252e-91 -1.445143e-40 [7,] 7.071068e-01 8.270257e-36 2.800625e-40 8.033315e-92 -1.445143e-40 [8,] 0.000000e+00 4.189199e-44 -5.736707e-01 0.000000e+00 -5.843557e-01 [9,] 0.000000e+00 4.819483e-45 7.118721e-01 0.000000e+00 -9.098010e-03 [10,] 0.000000e+00 -3.687915e-44 -4.051420e-01 0.000000e+00 8.114466e-01 [11,] -8.873316e-41 8.902806e-33 -5.203278e-43 -4.552864e-71 2.684929e-43 [12,] 0.000000e+00 -3.670984e-01 -5.168880e-45 0.000000e+00 -2.237545e-44 [13,] 0.000000e+00 7.074488e-01 3.510106e-45 0.000000e+00 3.854087e-44 [14,] 0.000000e+00 -6.039495e-01 -2.118307e-45 0.000000e+00 -3.140900e-44 [,6] [,7] [,8] [,9] [,10] [1,] 1.072799e-80 -1.441122e-03 -9.999927e-01 7.013316e-65 -3.032449e-55 [2,] 1.151433e-83 7.071060e-01 -1.069518e-03 7.527375e-68 -3.254704e-58 [3,] 1.042728e-83 7.071061e-01 -9.685234e-04 6.816728e-68 -2.949640e-58 [4,] -6.018531e-36 0.000000e+00 0.000000e+00 5.421011e-20 2.653689e-41 [5,] -1.893284e-83 -1.978819e-08 3.529603e-03 -1.237715e-67 -8.591427e-53 [6,] 5.156701e-20 4.832789e-87 -1.528581e-65 3.371141e-04 -2.778154e-04 [7,] 5.156701e-20 -4.833468e-87 1.528581e-65 3.371141e-04 -2.778154e-04 [8,] 3.112827e-31 0.000000e+00 0.000000e+00 -5.299286e-01 -1.396810e-01 [9,] 3.808597e-31 0.000000e+00 0.000000e+00 -6.483767e-01 -1.709021e-01 [10,] 2.284375e-31 0.000000e+00 0.000000e+00 -3.888928e-01 -1.025062e-01 [11,] 5.551110e-17 -9.853888e-70 1.932563e-64 3.628982e-01 -2.990640e-01 [12,] -8.540064e-01 0.000000e+00 0.000000e+00 -4.641406e-02 3.401566e-01 [13,] 9.998842e-04 0.000000e+00 0.000000e+00 -8.898056e-02 6.521155e-01 [14,] 5.202616e-01 0.000000e+00 0.000000e+00 -7.601740e-02 5.571118e-01 [,11] [,12] [,13] [,14] [1,] 1.705569e-64 3.529599e-03 -1.374121e-88 1.332083e-57 [2,] 1.830583e-67 3.788292e-06 -1.474841e-91 1.429715e-60 [3,] 1.657761e-67 3.433214e-06 -1.335603e-91 1.295707e-60 [4,] 1.084202e-19 0.000000e+00 1.000000e+00 -1.165716e-43 [5,] -3.010002e-67 9.999938e-01 2.425059e-91 3.774011e-55 [6,] 8.198283e-04 -1.817404e-48 -1.110223e-16 -7.071062e-01 [7,] 8.198283e-04 1.817404e-48 1.110223e-16 -7.071062e-01 [8,] 1.705733e-01 0.000000e+00 2.440335e-62 -1.077857e-40 [9,] 2.086994e-01 0.000000e+00 -6.425625e-62 2.838095e-40 [10,] 1.251768e-01 0.000000e+00 7.387698e-62 -3.263028e-40 [11,] 8.825327e-01 -2.872718e-52 -7.110274e-25 1.313732e-03 [12,] 1.343544e-01 0.000000e+00 1.718592e-106 -7.590746e-85 [13,] 2.575714e-01 0.000000e+00 1.320093e-108 -5.830637e-87 [14,] 2.200470e-01 0.000000e+00 5.531522e-111 -2.443184e-89 $fbar [1] 8.873316e-41 -2.635991e-01 -2.669406e-01 7.140560e-05 2.179929e-01 [6] -3.327449e-01 -1.412771e+00 9.985012e-01 -2.142182e+00 1.435914e+00 [11] 2.322500e-01 -1.003531e+00 1.000000e+00 1.412899e+00 . - 시각화코드 . %%R -w 1000 -h 800 -r 100 library(gridExtra) fig1_1&lt;-ggplot()+geom_tile(data=W_Euclid_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.25,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$W$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(a) Euclid&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_2&lt;-ggplot()+geom_tile(data=W_Graph_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(b) Graph&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_3&lt;-ggplot()+geom_tile(data=W_HST_long,aes(x=x,y=y,fill=W))+theme_bw()+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ scale_fill_gradient2(low=&quot;red&quot;,high=&quot;blue&quot;,mid=&quot;purple&quot;,midpoint=0.5,breaks=c(0,0.5,0.99))+ labs(fill=TeX(&#39;$ hat{W}( tau)$&#39;))+ theme(legend.position=&quot;none&quot;)+theme(legend.key=element_blank())+ ggtitle(&quot;(c) HST&quot;)+theme(plot.title=element_text(face=&quot;bold.italic&quot;,size=rel(3))) fig1_4&lt;-eigenplot(gfftrslt_Euclid)+ylim(0,2)+theme_light() fig1_5&lt;-eigenplot(gfftrslt_Graph)+ylim(0,2)+theme_light() fig1_6&lt;-eigenplot(gfftrslt_HST)+ylim(0,2)+theme_light() fig1=grid.arrange(fig1_1,fig1_2,fig1_3,fig1_4,fig1_5,fig1_6,ncol=3,nrow=2) fig1 #ggsave(plot=grid.arrange(p1_a,p1_b,p1_c,ncol=3),&quot;2021-07-22_fig1.png&quot;,width=20,height=4) . TableGrob (2 x 3) &#34;arrange&#34;: 6 grobs z cells name grob 1 1 (1-1,1-1) arrange gtable[layout] 2 2 (1-1,2-2) arrange gtable[layout] 3 3 (1-1,3-3) arrange gtable[layout] 4 4 (2-2,1-1) arrange gtable[layout] 5 5 (2-2,2-2) arrange gtable[layout] 6 6 (2-2,3-3) arrange gtable[layout] . R&#51012; &#54876;&#50857;&#54620; &#49884;&#44033;&#54868; (3): Decomposition . - 디콤포지션을 수행하고 결과를 저장: $( bf{f}, bf{W})$에 decomposition을 수행하고 그 결과를 각각 decomprslt_Euclid, decomprslt_Graph, decomprslt_HST에 저장한다. . %%R decomprslt_Euclid&lt;-decompose(f,W_Euclid,V=1:n) # 0, 35000, 60000, 80000 decomprslt_Graph&lt;-decompose(f,W_Graph,V=1:n) # 0, 35000, 60000, 80000 decomprslt_HST&lt;-decompose(f,W_HST,V=1:n) # 0, 35000, 60000, 80000 . - 디콤포지션 결과는 아래와 같은 형태임 . %%R head(decomprslt_Euclid) . # A tibble: 6 x 5 V Vindex eigenvectorindex fhat eigenvalue &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 1 1.45e-32 3.28e-18 2 2 2 1 2.48e-17 3.28e-18 3 3 3 1 -2.02e-16 3.28e-18 4 4 4 1 1 e+ 0 3.28e-18 5 5 5 1 8.73e-17 3.28e-18 6 6 6 1 -6.32e-17 3.28e-18 . %%R decomprslt_Euclid$method=&quot;Euclid&quot; decomprslt_Graph$method=&quot;Graph&quot; decomprslt_HST$method=&quot;HST&quot; decomprslt&lt;-rbind(decomprslt_Euclid,decomprslt_Graph,decomprslt_HST) . - 디콤포지션결과를 시각화한다. geom_col과 facet_grid를 이용. . %%R -w 2000 -h 500 -r 100 fig2&lt;-ggplot(data=decomprslt,aes(x=V,y=fhat))+ geom_col(aes(fill=fhat&gt;0),width=0.7)+facet_grid(method~eigenvectorindex)+geom_hline(aes(yintercept=0),col=&quot;gray60&quot;,lty=2)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+guides(fill=FALSE)+theme(plot.title=element_text(face=&quot;bold.italic&quot;))+theme_bw()+ theme(strip.text.x = element_text(size = 20, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ theme(strip.text.y = element_text(size = 15, color = &quot;black&quot;, face = &quot;bold.italic&quot;))+ ylim(-1.5,1.5)+ theme(plot.title=element_text(face=&quot;bold.italic&quot;)) fig2 #ggsave(plot=fig2,&quot;./fig/2021-0514_fig2.pdf&quot;,width=20,height=6) .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/22/(%EC%97%B0%EA%B5%AC)-HST-example-1.html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/22/(%EC%97%B0%EA%B5%AC)-HST-example-1.html",
            "date": " • Jul 22, 2021"
        }
        
    
  
    
        ,"post42": {
            "title": "(연구) HST old example (Python)",
            "content": "About this doc . - 앞선 R예제보다 좀더 노이지한 자료 . data . import pandas as pd . testdata=pd.read_csv(&#39;2021-07-14-hstex.csv&#39;) # data is in https://github.com/miruetoto/yechan/tree/master/_notebooks . import matplotlib.pyplot as plt import seaborn as sns . sns.relplot(data=testdata,x=testdata.index,y=&#39;f&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7fac62052160&gt; . Local view . - local view에서의 structure가 뚜렷하게 구별되는것은 아님 . sns.relplot(data=testdata,x=testdata.index,y=&#39;f&#39;,hue=&#39;localstr&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7fac61e7b160&gt; . global view . sns.relplot(data=testdata,x=testdata.index,y=&#39;f&#39;,hue=&#39;globalstr&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7fac61dd18b0&gt; . hst . class GraphSignal: def __init__(self,V,W,f): self.f=np.array(f) self.V=V self.W=np.array(W) self.n=len(self.f) self.degree=np.sum(np.array(self.W),0) self.initdist=self.degree/np.sum(self.degree) class HeavySnowTransform: #hst(f,W,V,τ=τ,b=0.03,γ=1) def __init__(self,graphsignal): self.n=graphsignal.n self.f=graphsignal.f self.V=graphsignal.V self.graphweight=graphsignal.W #self.degree=graphsignal.degree self.initdist=graphsignal.initdist self._initialize() def _initialize(self): self.tau=0 self.b=0 self.trajectory=[0] self.flowcount=[0] self.snowygrounds=pd.DataFrame(data={&#39;h0&#39;:self.f}) self.eucliddistance=(np.array(self.f)[:,np.newaxis]-np.array(self.f)[np.newaxis,:])**2 self.snowdistance=np.zeros((self.n,self.n)) self.euclidweight=np.zeros((self.n,self.n)) self.snowweight=np.zeros((self.n,self.n)) def _snowonce(self,ell,b,maxflow): W=self.graphweight&gt;np.asmatrix(np.random.random((self.n,self.n))) hnext=np.array(self.snowygrounds.iloc[:,-1]) currentnode=self.trajectory[-1] flowcount=self.flowcount[-1] # 1. h(u) &lt;- h(u)+b : update current node when flowcound &gt; 0 hnext[currentnode]=hnext[currentnode]+b # 2. check that: are there any nodes to which snow can flow from u. neighbor=np.where(W[currentnode,:]&gt;0)[1] ## Nu is np.array if len(neighbor)==0: downstream=np.array([]) else: downstream=neighbor[list((np.where(hnext[neighbor]&lt;=hnext[currentnode]))[0])] # 3. check flowable flowable = len(downstream)&gt;0 and flowcount &lt; maxflow # 4. determine flow or block if flowable==0: # block! node0=np.random.choice(self.n,1,p=self.initdist).item() neighbor=np.where(W[node0,:]&gt;0)[1] downstream=neighbor[list((np.where(hnext[neighbor]&lt;=hnext[node0]))[0])] if len(downstream)==0: nextnode=node0 else: nextnode=np.random.choice(list(downstream),1).item() flowcount=0 else: #flow nextnode=np.random.choice(list(downstream),1).item() flowcount=flowcount+1 self.snowygrounds[&#39;h%s&#39; % ell]=hnext self.flowcount=self.flowcount+[flowcount] self.trajectory=self.trajectory+[nextnode] self.snowygrounds_f[&#39;h%s&#39; % ell]=self.f self.snowygrounds_sumxi[&#39;h%s&#39; % ell]=hnext-self.f def _getdegreematrix(self,matrix): return np.diag(np.sum(matrix,1)) def _normalize(self,matrix): return np.sqrt(self._getdegreematrix(matrix))@matrix@np.sqrt(self._getdegreematrix(matrix)) def _updateeuclidweight(self): self.euclidweight=np.exp(-self.eucliddistance/(self.b**2))-np.eye(self.n) def _updatesnowdistance(self): self.snowdistance=np.sum((np.array(self.snowygrounds)[:,np.newaxis,:]-np.array(self.snowygrounds)[np.newaxis,:,:])**2,axis=-1) def _updatesnowweight(self): self.snowweight=np.exp(-self.snowdistance/(self.tau*self.b**2))-np.eye(self.n) def snow(self,tau,b=1,maxflow=100): self._initialize() self.b=b self.tau=tau print(&#39;HST (τ= %s, b=%s)&#39; % (tau,b)) for ell in np.arange(1,tau+1): print(&#39; r&#39;+str(ell)+&#39;/&#39;+str(tau),sep=&#39;&#39;,end=&#39;&#39;) self._snowonce(ell,b,maxflow) print(&#39; n&#39;+&#39;HST completed and all history is recorded.&#39;) self._updatesnowdistance() self._updatesnowweight() self._updateeuclidweight() . - define graph signal . import numpy as np f=testdata.f n=len(f) V=list(range(n)) W=np.zeros([n,n]) for i in range(n): for j in range(n): if abs(i-j)&lt;=1: W[i,j]=1 W[0,0]=1 W[n-1,n-1]=1 gs1=GraphSignal(V,W,f) . - hst with $ tau=10000$ . hst1=HeavySnowTransform(gs1) hst1.snow(tau=10000,b=0.005,maxflow=1) plt.imshow(hst1.snowdistance) . HST (τ= 10000, b=0.005) 10000/10000 HST completed and all history is recorded. . &lt;matplotlib.image.AxesImage at 0x7fac47704520&gt; . - hst with $ tau=50000$ . hst2=HeavySnowTransform(gs1) hst2.snow(tau=50000,b=0.003,maxflow=1) plt.imshow(hst2.snowdistance) . HST (τ= 50000, b=0.003) 50000/50000 HST completed and all history is recorded. . &lt;matplotlib.image.AxesImage at 0x7fac46f602b0&gt; . - hst with $ tau=100000$ . hst3=HeavySnowTransform(gs1) hst3.snow(tau=100000,b=0.003,maxflow=1) plt.imshow(hst3.snowdistance) . HST (τ= 100000, b=0.003) 100000/100000 HST completed and all history is recorded. . &lt;matplotlib.image.AxesImage at 0x7fac45bfe730&gt; . PCA . from sklearn.decomposition import PCA p1=PCA(n_components=3) p2=PCA(n_components=3) p3=PCA(n_components=3) p1.fit(hst1.snowygrounds) p2.fit(hst2.snowygrounds) p3.fit(hst3.snowygrounds) r1=p1.transform(hst1.snowygrounds) r2=p2.transform(hst2.snowygrounds) r3=p3.transform(hst3.snowygrounds) . Plot . - $ tau=10000$: local view를 반영 . sns.relplot(x=r1[:,0],y=r1[:,1],hue=testdata.localstr) . &lt;seaborn.axisgrid.FacetGrid at 0x7fac4c96ca60&gt; . - $ tau=100000$: global view를 반영 . sns.relplot(x=r3[:,0],y=r3[:,1],hue=testdata.globalstr) . &lt;seaborn.axisgrid.FacetGrid at 0x7fac459b9730&gt; .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/14/(%EC%97%B0%EA%B5%AC)-HST-old-example-(Python).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/14/(%EC%97%B0%EA%B5%AC)-HST-old-example-(Python).html",
            "date": " • Jul 14, 2021"
        }
        
    
  
    
        ,"post43": {
            "title": "(연구) HST old example (R)",
            "content": "Response . 1 &#52395;&#48264;&#51704; &#51656;&#47928; . 논문에서 Definition 6을 보면 Xi와 Xj 사이의 dissimilarity를 기댓값의 형태로 정의하게 되는데요. 정의에 의해 importance를 계산할 때도 기댓값을 구해야 가능하게 된다고 생각됩니다. 그런데 기댓값을 직접 계산하기 어려워 보이는 형태라서, 뒤에 simulated example이나 지하철 example에서 importance plot을 그릴 때에 importance를 어떻게 구하셨는지 궁금합니다. . 원래 목적은 아날래틱하게 평균을 계산하려 하였으나 그렇게 하지 못하고 sample mean으로 대체하였습니다. 즉 hst를 여러번 독립적으로 수행하여 $ rho( {Y_{i, tau} }_{ tau=0}^{T}, {Y_{j, tau} }_{ tau=0}^{T})$ 를 구하고, 그것들의 sample mean으로 대체하였습니다. . 사실 대부분 $ rho( {Y_{i, tau} }_{ tau=0}^{T}, {Y_{j, tau} }_{ tau=0}^{T})$의 값이 비슷하게 나와서 dissimilarity의 정의에서 기대값을 제외하여도 상관없을 것입니다. (저는 나중에 제외했어요) . 2 &#46160;&#48264;&#51704; &#51656;&#47928; . 4.3.1에서의 simulated example을 다루실 때 b = 0.02*sqrt(V{Xi})로 정의하셨는데, 이렇게 정하신 특별한 이유가 있을까요? . 없습니다. . 현재는 제가 임의로 정한 고정값을 사용중입니다. b=0.06 이런식으로요. b의 값은 너무 크게 설정하지만 않으면 결과에 크게 민감하지 않습니다. . 또한, definition5에서 tau가 1씩 증가하면서 Y값을 얻어낼 때, snowdrift를 더함으로써 얻게 되는데, 이 과정에서 epsilon을 generate할 때 사용되는 b가 위에서의 값으로 고정인지, 아니면 tau-1일 때 얻은 Y들을 대상으로 0.02*sqrt(V{Yi})로 다시 update 하는 것인지 궁금합니다. . 고정입니다. . (제가 example 4.1을 재현해보고 있는데 figure 4.4의 두번째 row에서 tau=10인 경우의 특징이었던 three straight lines가 보이지 않아서 b의 설정을 혹시 잘못한 것인지 궁금하여 여쭤봅니다.) . 참고하시라고 제가 예전에 구현했었던 코드를 뒤져서 복원해봤습니다. (포스트 뒤쪽에 확인할 수 있습니다) figure 4.4에 해당하는 코드는 아니고 다른 예제입니다. 아마 TEST DATA만 바꿔서 돌리시면 3개의 straight line이 비슷하게 나올겁니다. . 3 &#49464;&#48264;&#51704; &#51656;&#47928; . 4.3.2에서 지하철 데이터로 분석을 하실 때에 특정 시간, 특정 역에서 승차하는 사람 수를 Xi로 이해하였는데, 해당시간을 t, 해당 역을 서울대입구역이라고 한다면, (서울대입구역, t-1), (서울대입구역, t+1), (낙성대역, t), (봉천역, t) 이렇게 4 point들이 Xi와 linked 되어있다고 하고 HST를 진행하신 결과인가요? . 맞습니다. . 그 외에 Epsilon의 generation을 설정하기 위한 b값이나 pij 값이 지하철 예시의 경우에는 논문에서 찾기 어려워 어떻게 setting하고 분석을 진행하셨는지 궁금합니다. . $p_{ij}$는 linked 된 노드들은 동일한 확률로 이동가능하다고 설정했습니다. 즉 4개의 point를 1/4의 확률로요. . $b$는 자세히 기억나지 않는데 $b=2$ 였던 것 같습니다. (즉 평균이 1이 되도록요) 제 생각에서는 $ epsilon_k$를 굳이 유니폼에서 뽑지 않고 고정값 1로 사용하여도 거의 똑같은 결과가 나올것 같습니다. (실제로 요즘은 이렇게 하고 있어요) . &#44592;&#53440; . 논문을 읽고 HST라는 multiscale method가 굉장히 재밌게 느껴져서 열심히 공부해보려고 합니다. 답변 주시면 정말 감사하겠습니다 교수님. . 재미있게 관심가져주셔서 감사합니다. 사실 제가 학위논문 작성할 당시에는 원시적인 아이디어 정도만 간단하게 서술하였습니다. 현재는 조금 다른 형태로 제가 나름대로 연구하고 있습니다. 최근에 작업중인 드래프트를 보내드릴 생각도 있어서 오희석교수님께 지금 작업중인 버전을 보여주는게 어떻겠냐고 여쭤봤었는데 교수님께서는 저와는 완전히 다른 학생만의 방식으로 논문을 다시 발전시키기를 원하시는것 같습니다. 그래서 일부러 원시형태의 논문을 읽어보라고 하셨던 것 같아요. $ newline$ 논문에 자세하게 서술하지는 못했지만 오희석 교수님께서는 눈이 쌓이는 모양이 재미있다고 생각하신 것 같습니다. 그 이유는 눈이 쌓인 정도에 따라서 우리가 보는 지형의 모양이 달라질 텐데 이것이 다양한 다중척도 방법과 관련이 있다고 여기신 것 같습니다. HST는 오희석 교수님의 직관을 제 나름대로 해석하여 구체화한 것이지 이러한 방식이 정답은 아닙니다. 학위논문 그대로의 방식보다 학생만의 방식으로 좀 더 색다르게 바꿔보는 것도 좋을것 같아요. . &#44036;&#45800;&#54620; &#44396;&#54788;&#50696;&#51228; . &#54596;&#50836;&#54620; &#54056;&#53412;&#51648; &#48143; &#54632;&#49688; &#51221;&#51032; . library(gridExtra) hst1d&lt;-function(f,tau,b=sd(f)*0.01,prob=c(1/3,1/3,1/3)) # prob=c(l,c,r) { lprob&lt;-prob[1] cprob&lt;-prob[2] rprob&lt;-prob[3] len&lt;-length(f) hstresult&lt;-rep(0,len*tau); dim(hstresult)&lt;-c(len,tau) hlen&lt;-round(len/2) oldf&lt;-f f&lt;-c(f[hlen:1],f,f[len:(len-hlen+1)]) ls&lt;-landshape(f) f_before&lt;-f f_after&lt;-f*0 L&lt;-length(f) for(i in 1:tau) { minindex&lt;-which(ls==&quot;minimum&quot;) maxindex&lt;-which(ls==&quot;maximum&quot;) incindex&lt;-which(ls==&quot;increasing&quot;) decindex&lt;-which(ls==&quot;decreasing&quot;) flatindex&lt;-which(ls==&quot;flat&quot;) epsilon&lt;-runif(1)*b f_after[minindex]&lt;-f_before[minindex]+epsilon+epsilon*lprob+epsilon*rprob f_after[maxindex]&lt;-f_before[maxindex]+epsilon*cprob f_after[incindex]&lt;-f_before[incindex]+epsilon*(cprob+rprob)+epsilon*(lprob) f_after[decindex]&lt;-f_before[decindex]+epsilon*(cprob+lprob)+epsilon*(rprob) f_after[flatindex]&lt;-f_before[flatindex]+epsilon*cprob+epsilon*rprob*0.5+epsilon*lprob*0.5 ls&lt;-landshape(f_after) f_before&lt;-f_after hstresult[,i]&lt;-f_after[(hlen+1):(L-hlen)] } cbind(oldf,hstresult) } landshape&lt;-function(f) { len&lt;-length(f) ls&lt;-f*0 ls[c(1,len)]&lt;-&quot;flat&quot; for(i in 2:(len-1)) { if((f[i]&gt;f[i-1])&amp;(f[i]&lt;f[i+1])) ls[i]&lt;-&quot;increasing&quot; else if((f[i]&lt;f[i-1])&amp;(f[i]&gt;f[i+1])) ls[i]&lt;-&quot;decreasing&quot; else if(mean(c(f[i-1],f[i+1]))&lt;f[i]) ls[i]&lt;-&quot;maximum&quot; else if(mean(c(f[i-1],f[i+1]))&gt;f[i]) ls[i]&lt;-&quot;minimum&quot; else ls[i]&lt;-&quot;flat&quot; } ls } g_legend&lt;-function(a.gplot){ tmp &lt;- ggplot_gtable(ggplot_build(a.gplot)) leg &lt;- which(sapply(tmp$grobs, function(x) x$name) == &quot;guide-box&quot;) legend &lt;- tmp$grobs[[leg]] return(legend)} . TEST DATA . - 분석에 사용할 test data 입니다. . seq1&lt;-c(1,2,3,2); f1&lt;-c(rep(seq1,33),1); localstr&lt;-landshape(f1) localstr[1]&lt;-&quot;minimum&quot; localstr[133]&lt;-&quot;minimum&quot; f2&lt;-c(1:23,22:2,1:23,22:2,1:23,22:2,1)/2 # trend globalstr&lt;-landshape(f2) globalstr[1]&lt;-&quot;minimum&quot; globalstr[133]&lt;-&quot;minimum&quot; f&lt;-f1+f2 f&lt;-f+rnorm(length(f),0,sd=0.1) data_multiscalegrouping&lt;-data.frame(localstr=localstr,globalstr=globalstr,f=f) library(ggplot2) ggplot(data_multiscalegrouping, aes(x=1:length(f), y=f,label=1:133))+ geom_text(size=3)+geom_line() . . - 그림을 보면 아시겠지만 톱니모양으로 되어있습니다. . Global view . - 1,45,89,133 의 관측치가 minimum 23,67,111번 관측치가 maximum 입니다. . - 2,3,...,22 는 우상향 트렌드에 있고 24,25,...,44 는 우하향 트렌드에 있습니다. . - 정리하면 아래그림과 같음 . ggplot(data_multiscalegrouping, aes(x=1:length(f), y=f,label=1:133))+ geom_text(size=3) + geom_line()+ geom_point(aes(x=1:length(f), y=f, colour=globalstr),size=10,alpha=0.2,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Global Structure&quot;) . . Local view . - 3,7, 과 같은 관측치도 maximum으로 분류할 수 있습니다. . - 정리해보면 아래와 같음 . ggplot(data_multiscalegrouping, aes(x=1:length(f), y=f,label=1:133))+ geom_text(size=3)+geom_line()+ geom_point(aes(x=1:length(f), y=f, colour=localstr),size=5,alpha=0.5,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Local Structure&quot;) . . HST &#49688;&#54665; . HST&#47484; &#54616;&#45716; &#47785;&#51201; . - 특정자료는 좀더 미시적인 관점에서 보느냐, 아니면 거시적인 관점에서 보느냐에 따라서 해석이 달라짐 . - 예를들어 3,7,11 등과 같은 자료는 적은 연결 (극단적으로 본인자신과 좌우1개씩) 만을 고려하면 극대점으로 해석할 수 있으나 좀더 많은 연결을 고려하면 그렇지 않음 . - $ tau$가 작을때는 local 한 관점에서의 structure가, $ tau$가 클때는 global한 structure가 보였으면 좋겠음 . HST &#49688;&#54665; . hst1d_rslt&lt;-hst1d(f,b=sd(f)*0.05,tau=130,prob=c(1/3,1/3,1/3)) . HST $ to$ PCA . - $ tau=5,15,30,60,120$ . PC5&lt;-princomp(hst1d_rslt[,1:5]) PC5plotdf&lt;-data.frame(PC1=PC5$score[,1],PC2=PC5$score[,2], localstr=localstr,globalstr=globalstr) PC15&lt;-princomp(hst1d_rslt[,1:15]) PC15plotdf&lt;-data.frame(PC1=PC15$score[,1],PC2=PC15$score[,2], localstr=localstr,globalstr=globalstr) PC30&lt;-princomp(hst1d_rslt[,1:30]) PC30plotdf&lt;-data.frame(PC1=PC30$score[,1],PC2=PC30$score[,2], localstr=localstr,globalstr=globalstr) PC60&lt;-princomp(hst1d_rslt[,1:60]) PC60plotdf&lt;-data.frame(PC1=PC60$score[,1],PC2=PC60$score[,2], localstr=localstr,globalstr=globalstr) PC90&lt;-princomp(hst1d_rslt[,1:90]) PC90plotdf&lt;-data.frame(PC1=PC90$score[,1],PC2=PC90$score[,2], localstr=localstr,globalstr=globalstr) PC120&lt;-princomp(hst1d_rslt[,1:120]) PC120plotdf&lt;-data.frame(PC1=PC120$score[,1],PC2=PC120$score[,2], localstr=localstr,globalstr=globalstr) . &#44208;&#44284; &#49884;&#44033;&#54868; &#48143; &#54644;&#49437; . global view . ggplot(data_multiscalegrouping, aes(x=1:length(f), y=f,label=1:133))+ geom_text(size=3) + geom_line()+ geom_point(aes(x=1:length(f), y=f, colour=globalstr),size=10,alpha=0.2,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Global Structure&quot;) . . global5&lt;-ggplot(PC5plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=globalstr),size=10,alpha=0.2,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Global Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,5)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) global15&lt;-ggplot(PC15plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=globalstr),size=10,alpha=0.2,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Global Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,15)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) global30&lt;-ggplot(PC30plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=globalstr),size=10,alpha=0.2,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Global Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,30)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) global60&lt;-ggplot(PC60plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=globalstr),size=10,alpha=0.2,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Global Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,60)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) global90&lt;-ggplot(PC90plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=globalstr),size=10,alpha=0.2,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Global Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,90)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) global120&lt;-ggplot(PC120plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=globalstr),size=10,alpha=0.2,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Global Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,120)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) globallegend&lt;-g_legend(global5+ theme(legend.position=&quot;bottom&quot;)) global&lt;-grid.arrange(arrangeGrob(global5 + theme(legend.position=&quot;none&quot;), global15 + theme(legend.position=&quot;none&quot;), global30 + theme(legend.position=&quot;none&quot;), global60 + theme(legend.position=&quot;none&quot;), global90 + theme(legend.position=&quot;none&quot;), global120 + theme(legend.position=&quot;none&quot;), nrow=2,ncol=3), globallegend, nrow=2,heights=c(10, 1)) . . - $ tau=120$에서의 결과가 global view에서의 자료구조를 잘 파악함. . 1,45,89,133이 거시적인 관점에서 보면 valley 인데 이러한 점들이 잘 구분되어 있음 (보라색) | 23,67,111과 같은 peaks 역시 잘 드러남 (파란색) | . local view . - 동일한 자료를 local view로 본다면 작은 $ tau$가 해석에 용이함 . library(gridExtra) local5&lt;-ggplot(PC5plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=localstr),size=5,alpha=0.5,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Local Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,5)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) local15&lt;-ggplot(PC15plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=localstr),size=5,alpha=0.5,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Local Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,15)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) local30&lt;-ggplot(PC30plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=localstr),size=5,alpha=0.5,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Local Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,30)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) local60&lt;-ggplot(PC60plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=localstr),size=5,alpha=0.5,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Local Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,60)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) local90&lt;-ggplot(PC90plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=localstr),size=5,alpha=0.5,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Local Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,90)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) local120&lt;-ggplot(PC120plotdf, aes(x=PC1, y=PC2,label=1:133))+ geom_text(size=3)+ geom_point(aes(x=PC1, y=PC2, colour=localstr),size=5,alpha=0.5,shape=16)+ xlab(&quot;&quot;)+ylab(&quot;&quot;)+ theme_bw()+theme(panel.border=element_blank(),axis.line=element_line(colour=&quot;Black&quot;))+ theme(panel.grid.major=element_blank())+ labs(colour=&quot;Local Structure&quot;)+ ggtitle(expression(paste(tau,&quot;=&quot;,120)))+ theme(plot.title=element_text(size=rel(1.5),lineheight=0.9,face=&quot;bold.italic&quot;,hjust=0.5))+ theme(plot.margin = unit(c(3,3,3,3), &quot;mm&quot;)) locallegend&lt;-g_legend(local5+ theme(legend.position=&quot;bottom&quot;)) local&lt;-grid.arrange(arrangeGrob(local5 + theme(legend.position=&quot;none&quot;), local15 + theme(legend.position=&quot;none&quot;), local30 + theme(legend.position=&quot;none&quot;), local60 + theme(legend.position=&quot;none&quot;), local90 + theme(legend.position=&quot;none&quot;), local120 + theme(legend.position=&quot;none&quot;), nrow=2,ncol=3), locallegend, nrow=2,heights=c(10, 1)) . . - $ tau=5$ 일때가 재미있음. pc2에 의해서 점들은 3개의 그룹으로 나누어짐. . minimum (보라색) | maximum (파란색) | incresing $ cup$ decreasing (초록색, 빨간색) | . - $ tau$가 커질수록 이러한 구분은 무의미함 . &#44208;&#47200; . - 작은 $ tau$는 자료를 local view로 보았을 경우 특징을 잡아낸다. 반면에 큰 $ tau$는 자료를 global view로 보았을 경우 특징을 잡아냄 . - 이 예제를 파이썬으로 구현한것은 아래에 있음. . https://miruetoto.github.io/yechan/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/14/(%EC%97%B0%EA%B5%AC)-HST-old-example-(Python)-%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC.html . HST의 정의가 R에서 구현한 방식과 아주 조금 다르긴한데 (요즘 제가 정의를 자주 바꾸고 있어서요) 거의 비슷한 효과가 나오도록 제가 파라메터를 조정했습니다. | 바뀐 정의의 특성상 낮은 $ tau$에서 관찰가능한 선명한 3개의 직선은 나오지 않지만 어느정도 비슷한 결론을 줍니다. | .",
            "url": "https://miruetoto.github.io/hst2022/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/14/(%EC%97%B0%EA%B5%AC)-HST-old-exam-(R).html",
            "relUrl": "/%EB%85%BC%EB%AC%B8%EC%97%B0%EA%B5%AC/2021/07/14/(%EC%97%B0%EA%B5%AC)-HST-old-exam-(R).html",
            "date": " • Jul 14, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "",
          "url": "https://miruetoto.github.io/hst2022/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://miruetoto.github.io/hst2022/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}